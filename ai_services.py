import google.generativeai as genai
import requests
import logging
import asyncio
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π API –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–µ–π
class AIConfig:
    GOOGLE_GEMINI_API_KEY = os.getenv("GOOGLE_GEMINI_API_KEY", "AIzaSyCdDMpgLJyz6aYdwT9q4sbBk7sHVID4BTI")
    CUSTOM_GEMINI_PRO_API_KEY = os.getenv("CUSTOM_GEMINI_PRO_API_KEY", "sk-MHulnEHU3bRxsnDjr0nq68lTcRYa5IpQATY1pUG4NaxpWSMJzvzsJ4KCVu0P")
    CUSTOM_GROK_3_API_KEY = os.getenv("CUSTOM_GROK_3_API_KEY", "sk-MHulnEHU3bRxsnDjr0nq68lTcRYa5IpQATY1pUG4NaxpWSMJzvzsJ4KCVu0P")
    CUSTOM_GPT4O_MINI_API_KEY = os.getenv("CUSTOM_GPT4O_MINI_API_KEY", "sk-MHulnEHU3bRxsnDjr0nq68lTcRYa5IpQATY1pUG4NaxpWSMJzvzsJ4KCVu0P")
    CUSTOM_GEMINI_PRO_ENDPOINT = os.getenv("CUSTOM_GEMINI_PRO_ENDPOINT", "https://api.gen-api.ru/api/v1/networks/gemini-2-5-pro")
    MAX_OUTPUT_TOKENS_GEMINI_LIB = 2048

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ API-–∫–ª—é—á–∏
_API_KEYS_PROVIDER = {
    "CUSTOM_GEMINI_PRO_API_KEY": AIConfig.CUSTOM_GEMINI_PRO_API_KEY,
    "CUSTOM_GROK_3_API_KEY": AIConfig.CUSTOM_GROK_3_API_KEY,
    "CUSTOM_GPT4O_MINI_API_KEY": AIConfig.CUSTOM_GPT4O_MINI_API_KEY,
}

# –†–µ–∂–∏–º—ã –ò–ò (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ bot.py)
AI_MODES = {
    "universal_ai_basic": {
        "name": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π",
        "prompt": (
            "–¢—ã ‚Äî Gemini, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç Google."
            "–¢–≤–æ—è —Ü–µ–ª—å ‚Äî —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —à–∏—Ä–æ–∫–∏–º —Å–ø–µ–∫—Ç—Ä–æ–º –∑–∞–¥–∞—á:"
            "–æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –æ–±—ä—è—Å–Ω—è—Ç—å,"
            "–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
            "–í—Å–µ–≥–¥–∞ –±—É–¥—å –≤–µ–∂–ª–∏–≤, –æ–±—ä–µ–∫—Ç–∏–≤–µ–Ω, —Ç–æ—á–µ–Ω –∏ –ø–æ–ª–µ–∑–µ–Ω."
            "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π, –µ—Å–ª–∏ —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏."
            "–û–§–û–†–ú–õ–ï–ù–ò–ï –û–¢–í–ï–¢–ê:"
            "1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —è—Å–Ω–æ—Å—Ç—å: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º, —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ª–µ–≥–∫–∏–º –¥–ª—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è. –ß–µ—Ç–∫–æ —Ä–∞–∑–¥–µ–ª—è–π —Å–º—ã—Å–ª–æ–≤—ã–µ –±–ª–æ–∫–∏ –∞–±–∑–∞—Ü–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è –æ–¥–Ω—É –∏–ª–∏ –¥–≤–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –Ω–∏–º–∏."
            "2. –°–ø–∏—Å–∫–∏: –î–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä 1., 2., –∏–ª–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä -, *, —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏."
            "3. –ó–∞–≥–æ–ª–æ–≤–∫–∏: –î–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Å–º—ã—Å–ª–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –ø–æ—è—Å–Ω—è—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –º–æ–∂–Ω–æ –ó–ê–ì–õ–ê–í–ù–´–ú–ò –ë–£–ö–í–ê–ú–ò."
            "4. –ß–∏—Å—Ç–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞: –ì–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —è—Å–Ω—ã–π, —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏, –Ω–µ –Ω–µ—Å—É—â–µ–π —Å–º—ã—Å–ª–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ–º–æ–π –≥—Ä–∞–º–º–∞—Ç–∏–∫–æ–π."
            "5. –ü–æ–ª–Ω–æ—Ç–∞: –°—Ç–∞—Ä–∞–π—Å—è –¥–∞–≤–∞—Ç—å –ø–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É–Ω–∫—Ç—ã —Å–ø–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Å–º–æ–∂–µ—à—å –µ–≥–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å."
        ),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π'. –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?"
    },
    "gemini_pro_custom_mode": {
        "name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
        "prompt": (
            "–¢—ã ‚Äî Gemini 2.5 Pro, –º–æ—â–Ω—ã–π –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—ã–µ, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
            "–°–æ–±–ª—é–¥–∞–π –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å."
            "–§–æ—Ä–º—É–ª–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —è—Å–Ω–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∞–±–∑–∞—Ü—ã –∏ —Å–ø–∏—Å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
            "–ï—Å–ª–∏ —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —É–∫–∞–∂–∏ —ç—Ç–æ."
        ),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'. –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?"
    },
    "creative_helper": {
        "name": "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π",
        "prompt": (
            "–¢—ã ‚Äî Gemini, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ò–ò-–ø–∞—Ä—Ç–Ω—ë—Ä –∏ –ø–∏—Å–∞—Ç–µ–ª—å. "
            "–¢–≤–æ—è –º–∏—Å—Å–∏—è ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å, –ø–æ–º–æ–≥–∞—Ç—å –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–µ–∫—Å—Ç—ã, –∏–¥–µ–∏, —Å—Ü–µ–Ω–∞—Ä–∏–∏, —Å—Ç–∏—Ö–∏ –∏ —Ç.–¥.) –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–º—ã—Å–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
            "–ë—É–¥—å —Å–º–µ–ª—ã–º –≤ –∏–¥–µ—è—Ö, –ø—Ä–µ–¥–ª–∞–≥–∞–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –Ω–æ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞–π—Å—è –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–∏–∫–∏ –∏ –∑–¥—Ä–∞–≤–æ–≥–æ —Å–º—ã—Å–ª–∞."
            "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: 1. –ê–±–∑–∞—Ü—ã: –î–ª—è –ø—Ä–æ–∑—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–π ‚Äî —á–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∞–±–∑–∞—Ü—ã."
            "2. –°—Ç–∏—Ö–∏: –°–æ–±–ª—é–¥–∞–π —Å—Ç—Ä–æ—Ñ—ã –∏ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –∑–∞–¥–∞–Ω–∏–µ–º."
            "3. –î–∏–∞–ª–æ–≥–∏: –û—Ñ–æ—Ä–º–ª—è–π –¥–∏–∞–ª–æ–≥–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –æ–±—Ä–∞–∑–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: - –ü—Ä–∏–≤–µ—Ç! - —Å–∫–∞–∑–∞–ª –æ–Ω. –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."
            "4. –Ø–∑—ã–∫: –ò—Å–ø–æ–ª—å–∑—É–π –±–æ–≥–∞—Ç—ã–π –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ."
            "6. –ó–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å: –°—Ç–∞—Ä–∞–π—Å—è –¥–æ–≤–æ–¥–∏—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ü–∞ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –∑–∞–¥–∞—á–µ–π."
        ),
        "welcome": "–ê–≥–µ–Ω—Ç '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π' –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º! –ù–∞–¥ –∫–∞–∫–æ–π –∑–∞–¥–∞—á–µ–π –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º?"
    },
    "analyst": {
        "name": "–ê–Ω–∞–ª–∏—Ç–∏–∫",
        "prompt": (
            "–¢—ã ‚Äî –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫ –Ω–∞ –±–∞–∑–µ Gemini, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Ñ–∞–∫—Ç–æ–≤ –∏ —Ç—Ä–µ–Ω–¥–æ–≤."
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—ã–µ, –ª–æ–≥–∏—á–µ—Å–∫–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –±–∏–∑–Ω–µ—Å-–≤–æ–ø—Ä–æ—Å–æ–≤."
            "–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥:"
            "1. –ê–Ω–∞–ª–∏–∑: –†–∞–∑–±–µ—Ä–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã."
            "2. –í—ã–≤–æ–¥—ã: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —á–µ—Ç–∫–∏–µ –≤—ã–≤–æ–¥—ã –∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
            "3. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –û–±—ä—è—Å–Ω–∏ —Å–≤–æ–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
            "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —É–∫–∞–∂–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
        ),
        "welcome": "–ê–≥–µ–Ω—Ç '–ê–Ω–∞–ª–∏—Ç–∏–∫' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ö–∞–∫—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?"
    },
    "joker": {
        "name": "–®—É—Ç–Ω–∏–∫",
        "prompt": (
            "–¢—ã ‚Äî –ò–ò —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ Gemini."
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã —Å –ª–µ–≥–∫–æ—Å—Ç—å—é, –æ—Å—Ç—Ä–æ—É–º–∏–µ–º –∏ —é–º–æ—Ä–æ–º, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∏ —ç—Ç–æ–º –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å."
            "–î–æ–±–∞–≤–ª—è–π —à—É—Ç–∫–∏, –∞–Ω–µ–∫–¥–æ—Ç—ã –∏–ª–∏ –∑–∞–±–∞–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –Ω–æ –æ—Å—Ç–∞–≤–∞–π—Å—è –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–∏–ª–∏—á–∏—è."
            "–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –≤–µ—Å–µ–ª—ã–º–∏ –∏ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–º–∏."
        ),
        "welcome": "–ê–≥–µ–Ω—Ç '–®—É—Ç–Ω–∏–∫' –≤–∫–ª—é—á–µ–Ω! üòÑ –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å —Å —É–ª—ã–±–∫–æ–π!"
    }
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –ò–ò
AVAILABLE_TEXT_MODELS = {
    "google_gemini_2_0_flash": {
        "name": "Gemini 2.0", "id": "gemini-2.0-flash", "api_type": "google_genai",
        "is_limited": True, "limit_type": "daily_free", "limit": 72,
        "cost_category": "google_flash_free"
    },
    "google_gemini_2_5_flash_preview": {
        "name": "Gemini 2.5", "id": "gemini-2.5-flash-preview-04-17", "api_type": "google_genai",
        "is_limited": True, "limit_type": "subscription_or_daily_free",
        "limit_if_no_subscription": 48,
        "subscription_daily_limit": 75,
        "cost_category": "google_flash_preview_flex"
    },
    "custom_api_gemini_2_5_pro": {
        "name": "Gemini Pro", "id": "gemini-2.5-pro-preview-03-25", "api_type": "custom_http_api",
        "endpoint": AIConfig.CUSTOM_GEMINI_PRO_ENDPOINT, "api_key_var_name": "CUSTOM_GEMINI_PRO_API_KEY",
        "is_limited": True, "limit_type": "subscription_custom_pro",
        "limit_if_no_subscription": 0,
        "subscription_daily_limit": 25,
        "cost_category": "custom_api_pro_paid", "pricing_info": {}
    },
    "custom_api_grok_3": {
        "name": "Grok 3", "id": "grok-3-beta", "api_type": "custom_http_api",
        "endpoint": "https://api.gen-api.ru/api/v1/networks/grok-3", "api_key_var_name": "CUSTOM_GROK_3_API_KEY",
        "is_limited": True, "limit_type": "subscription_custom_pro",
        "limit_if_no_subscription": 3,
        "subscription_daily_limit": 25,
        "cost_category": "custom_api_grok_3_paid", "pricing_info": {}
    },
    "custom_api_gpt_4o_mini": {
        "name": "GPT-4o mini", "id": "gpt-4o-mini", "api_type": "custom_http_api",
        "endpoint": "https://api.gen-api.ru/api/v1/networks/gpt-4o-mini", "api_key_var_name": "CUSTOM_GPT4O_MINI_API_KEY",
        "is_limited": True, "limit_type": "subscription_custom_pro",
        "limit_if_no_subscription": 3,
        "subscription_daily_limit": 25,
        "cost_category": "custom_api_gpt4o_mini_paid", "pricing_info": {}
    }
}

class BaseAIService(ABC):
    def __init__(self, model_config: Dict[str, Any]):
        self.model_config = model_config
        self.model_id = model_config["id"]

    @abstractmethod
    async def generate_response(self, system_prompt: str, user_prompt: str) -> str:
        pass

class GoogleGenAIService(BaseAIService):
    async def generate_response(self, system_prompt: str, user_prompt: str) -> str:
        full_prompt = f"{system_prompt}\n\n**–ó–∞–ø—Ä–æ—Å:**\n{user_prompt}"
        try:
            model_genai = genai.GenerativeModel(
                self.model_id,
                generation_config={"max_output_tokens": AIConfig.MAX_OUTPUT_TOKENS_GEMINI_LIB}
            )
            response = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: model_genai.generate_content(full_prompt)
            )
            return response.text.strip() if response.text else "–û—Ç–≤–µ—Ç Google GenAI –ø—É—Å—Ç."
        except google.api_core.exceptions.ResourceExhausted as e:
            logger.error(f"Google GenAI API limit exhausted for model {self.model_id}: {e}")
            return f"–õ–∏–º–∏—Ç Google API –∏—Å—á–µ—Ä–ø–∞–Ω: {e}"
        except Exception as e:
            logger.error(f"Google GenAI API error for model {self.model_id}: {e}", exc_info=True)
            return f"–û—à–∏–±–∫–∞ Google API ({type(e).__name__}) –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ {self.model_id}."

class CustomHttpAIService(BaseAIService):
    async def generate_response(self, system_prompt: str, user_prompt: str) -> str:
        api_key_name = self.model_config.get("api_key_var_name")
        actual_key = _API_KEYS_PROVIDER.get(api_key_name)

        if not actual_key or "YOUR_" in actual_key or not (actual_key.startswith("sk-") or actual_key.startswith("AIzaSy")):
            logger.error(f"Invalid API key for model {self.model_id} (key name: {api_key_name}).")
            return f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ API –¥–ª—è ¬´{self.model_config.get('name', self.model_id)}¬ª."

        headers = {
            "Authorization": f"Bearer {actual_key}",
            "Content-Type": "application/json",
            "Accept": "application/json"
        }

        is_gpt4o_like = (self.model_id == "gpt-4o-mini")
        
        messages_payload = []
        if system_prompt:
            messages_payload.append({
                "role": "system", 
                "content": [{"type": "text", "text": system_prompt}] if is_gpt4o_like else system_prompt
            })
        messages_payload.append({
            "role": "user", 
            "content": [{"type": "text", "text": user_prompt}] if is_gpt4o_like else user_prompt
        })

        payload = {
            "messages": messages_payload,
            "model": self.model_id,
            "is_sync": True,
            "max_tokens": self.model_config.get("max_tokens", AIConfig.MAX_OUTPUT_TOKENS_GEMINI_LIB)
        }
        if self.model_config.get("parameters"):
            payload.update(self.model_config["parameters"])
        
        endpoint = self.model_config["endpoint"]

        try:
            response = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: requests.post(endpoint, headers=headers, json=payload, timeout=45)
            )
            response.raise_for_status()
            json_resp = response.json()
            
            extracted_text = None
            if self.model_id == "grok-3-beta":
                if "response" in json_resp and isinstance(json_resp["response"], list) and \
                   json_resp["response"] and "choices" in json_resp["response"][0] and \
                   isinstance(json_resp["response"][0]["choices"], list) and json_resp["response"][0]["choices"]:
                    extracted_text = json_resp["response"][0]["choices"][0].get("message",{}).get("content","").strip()
            elif self.model_id == "gemini-2.5-pro-preview-03-25":
                extracted_text = json_resp.get("text","").strip()
            elif self.model_id == "gpt-4o-mini":
                if json_resp.get("status") == "success":
                    output_val = json_resp.get("output")
                    if isinstance(output_val, str): extracted_text = output_val.strip()
                    elif isinstance(output_val, dict): extracted_text = output_val.get("text", output_val.get("content", "")).strip()
                    elif output_val is not None: extracted_text = str(output_val).strip()
                else: 
                    extracted_text = f"–û—à–∏–±–∫–∞ API {self.model_config['name']}: {json_resp.get('status','N/A')}. {json_resp.get('error_message','')}"
            if extracted_text is None:
                for key_check in ["text", "content", "message", "output", "response"]:
                    if isinstance(json_resp.get(key_check), str) and (check_val := json_resp[key_check].strip()):
                        extracted_text = check_val
                        break
            return extracted_text if extracted_text else f"–û—Ç–≤–µ—Ç API {self.model_config['name']} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."
        except requests.exceptions.HTTPError as e:
            logger.error(f"Custom API HTTPError for {self.model_id} ({endpoint}): {e.response.status_code} - {e.response.text}", exc_info=True)
            return f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ Custom API ({e.response.status_code}) –¥–ª—è {self.model_config['name']}."
        except requests.exceptions.RequestException as e:
            logger.error(f"Custom API RequestException for {self.model_id} ({endpoint}): {e}", exc_info=True)
            return f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Custom API ({type(e).__name__}) –¥–ª—è {self.model_config['name']}."
        except Exception as e:
            logger.error(f"Unexpected Custom API error for {self.model_id} ({endpoint}): {e}", exc_info=True)
            return f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Custom API ({type(e).__name__}) –¥–ª—è {self.model_config['name']}."

def get_ai_service(model_key: str) -> Optional[BaseAIService]:
    model_cfg = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_cfg:
        logger.error(f"Configuration for model key '{model_key}' not found.")
        return None
    api_type = model_cfg.get("api_type")
    if api_type == "google_genai":
        return GoogleGenAIService(model_cfg)
    elif api_type == "custom_http_api":
        return CustomHttpAIService(model_cfg)
    else:
        logger.error(f"Unknown API type '{api_type}' for model key '{model_key}'.")
        return None
