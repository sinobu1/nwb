# config.py
import telegram
from telegram import (
    ReplyKeyboardMarkup, KeyboardButton, Update,
    BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice, WebAppInfo
)
from telegram.constants import ParseMode, ChatAction
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, PreCheckoutQueryHandler
)
import google.generativeai as genai
import google.api_core.exceptions
import requests
import logging
import traceback
import os
import asyncio
import nest_asyncio
import json
import base64 
from datetime import datetime, timedelta, timezone
import pytz 
from typing import Optional, Dict, Any, Tuple, Union, List
import uuid
import firebase_admin
from firebase_admin import credentials, firestore, initialize_app
from firebase_admin.exceptions import FirebaseError
from google.cloud.firestore_v1.client import Client as FirestoreClient
from abc import ABC, abstractmethod

# --- –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê ---
nest_asyncio.apply()
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
class AppConfig:
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "8185454402:AAEgJLaBSaUSyP9Z_zv76Fn0PtEwltAqga0")
    GOOGLE_GEMINI_API_KEY = os.getenv("GOOGLE_GEMINI_API_KEY", "AIzaSyCdDMpgLJyz6aYdwT9q4sbBk7sHVID4BTI")
    CUSTOM_GEMINI_PRO_API_KEY = os.getenv("CUSTOM_GEMINI_PRO_API_KEY", "sk-MHulnEHU3bRxsnDjr0nq68lTcRYa5IpQATY1pUG4NaxpWSMJzvzsJ4KCVu0P")
    CUSTOM_GEMINI_PRO_ENDPOINT = os.getenv("CUSTOM_GEMINI_PRO_ENDPOINT", "https://api.gen-api.ru/api/v1/networks/gemini-2-5-pro")
    CUSTOM_GROK_3_API_KEY = os.getenv("CUSTOM_GROK_3_API_KEY", "sk-MHulnEHU3bRxsnDjr0nq68lTcRYa5IpQATY1pUG4NaxpWSMJzvzsJ4KCVu0P")
    CUSTOM_GPT4O_MINI_API_KEY = os.getenv("CUSTOM_GPT4O_MINI_API_KEY", "sk-MHulnEHU3bRxsnDjr0nq68lTcRYa5IpQATY1pUG4NaxpWSMJzvzsJ4KCVu0P")
    PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN", "390540012:LIVE:70602")
    ADMIN_ID = int(os.getenv("ADMIN_ID", "489230152"))
    FIREBASE_CREDENTIALS_JSON_STR = os.getenv("FIREBASE_CREDENTIALS")
    FIREBASE_CERT_PATH = "gemioracle-firebase-adminsdk-fbsvc-8f89d5b941.json"
    WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://nwb-production.up.railway.app/") 
    
    MAX_OUTPUT_TOKENS_GEMINI_LIB = 2048
    MAX_MESSAGE_LENGTH_TELEGRAM = 4000
    MIN_AI_REQUEST_LENGTH = 4
    MAX_CONVERSATION_HISTORY = 6 # –•—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–∞—Ä—ã (–≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç) -> 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (user, model, user, model...)

    DEFAULT_FREE_REQUESTS_GEMINI_2_0_FLASH_DAILY = 65
    DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY = 50 
    DEFAULT_FREE_REQUESTS_CUSTOM_GROK_DAILY = 0 
    DEFAULT_FREE_REQUESTS_CUSTOM_GEMINI_PRO_DAILY = 1 
    DEFAULT_FREE_REQUESTS_CUSTOM_GPT4O_MINI_DAILY = 10
    
    GEMS_FOR_NEW_USER = 0
    
    GEM_PACKAGES = {
        "pack_25_gems_trial": { 
            "gems": 25, "price_units": 5900, "currency": "RUB", 
            "title": "üíé 25 –ì–µ–º–æ–≤ (–ü—Ä–æ–±–Ω—ã–π)", "description": "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–∞–∫–µ—Ç. –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!",
            "is_one_time": True 
        },
        "pack_50_gems": {
            "gems": 50, "price_units": 12500, "currency": "RUB", 
            "title": "üåü 50 –ì–µ–º–æ–≤", "description": "–í—ã–≥–æ–¥–Ω—ã–π –ø–∞–∫–µ—Ç –¥–ª—è —á–∞—Å—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
        }
    }

    NEWS_CHANNEL_USERNAME = "@timextech"
    NEWS_CHANNEL_LINK = "https://t.me/timextech"
    NEWS_CHANNEL_BONUS_CONFIG = {
        "custom_api_gemini_2_5_pro": 1, "custom_api_grok_3": 1
    }

    DEFAULT_AI_MODE_KEY = "universal_ai_basic"
    DEFAULT_MODEL_KEY = "google_gemini_2_0_flash"
    
    MOSCOW_TZ = pytz.timezone('Europe/Moscow')

CONFIG = AppConfig()

_API_KEYS_PROVIDER = {
    "CUSTOM_GEMINI_PRO_API_KEY": CONFIG.CUSTOM_GEMINI_PRO_API_KEY,
    "CUSTOM_GROK_3_API_KEY": CONFIG.CUSTOM_GROK_3_API_KEY,
    "CUSTOM_GPT4O_MINI_API_KEY": CONFIG.CUSTOM_GPT4O_MINI_API_KEY,
}

class BotConstants:
    FS_USERS_COLLECTION = "users"
    FS_BOT_DATA_COLLECTION = "bot_data"
    FS_BOT_DATA_DOCUMENT = "data"
    FS_ALL_USER_DAILY_COUNTS_KEY = "all_user_daily_counts"
    FS_APP_MESSAGES_COLLECTION = "app_messages" 

    MENU_MAIN = "main_menu"
    MENU_AI_MODES_SUBMENU = "ai_modes_submenu"
    MENU_MODELS_SUBMENU = "models_submenu"
    MENU_LIMITS_SUBMENU = "limits_submenu"
    MENU_BONUS_SUBMENU = "bonus_submenu"
    MENU_GEMS_SUBMENU = "gems_submenu"
    MENU_HELP_SUBMENU = "help_submenu"

    CALLBACK_ACTION_SUBMENU = "submenu"
    CALLBACK_ACTION_SET_AGENT = "set_agent"
    CALLBACK_ACTION_SET_MODEL = "set_model"
    CALLBACK_ACTION_SHOW_LIMITS = "show_limits"
    CALLBACK_ACTION_CHECK_BONUS = "check_bonus"
    CALLBACK_ACTION_SHOW_GEMS_STORE = "show_gems_store"
    CALLBACK_ACTION_BUY_GEM_PACKAGE = "buy_gem_package"
    CALLBACK_ACTION_SHOW_HELP = "show_help"

    API_TYPE_GOOGLE_GENAI = "google_genai"
    API_TYPE_CUSTOM_HTTP = "custom_http_api"

AI_MODES = {
    "universal_ai_basic": {
        "name": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π", 
        "prompt": ("–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —à–∏—Ä–æ–∫–∏–π –∫—Ä—É–≥ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ë—É–¥—å –≤–µ–∂–ª–∏–≤ –∏ –ø–æ–ª–µ–∑–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π —è—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –∏ –∞–±–∑–∞—Ü–µ–≤, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."),
        "welcome": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º. –ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?"
    },
    "idea_generator": {
        "name": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π", 
        "prompt": ("–¢—ã ‚Äî –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ò–¥–µ–π, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π: –≤–µ—á–µ—Ä–∏–Ω–æ–∫, –ø–æ–¥–∞—Ä–∫–æ–≤, –±–∏–∑–Ω–µ—Å–∞, —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –º–Ω–æ–≥–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ. –ü—Ä–µ–¥–ª–∞–≥–∞–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Å—Ç–∏–º—É–ª–∏—Ä—É–π –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –∏–¥–µ–π, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ. –ß–µ—Ç–∫–æ —Ä–∞–∑–¥–µ–ª—è–π —Å–º—ã—Å–ª–æ–≤—ã–µ –±–ª–æ–∫–∏."),
        "welcome": "–ì–æ—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏! –ö–∞–∫–∞—è —Ç–µ–º–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    },
    "career_coach": {
        "name": "–ö–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", 
        "prompt": ("–¢—ã ‚Äî –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, –ò–ò-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –∫–∞—Ä—å–µ—Ä—ã. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—é –Ω–∞–≤—ã–∫–æ–≤, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª–µ–π, –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ä–æ—Å—Ç—É. –ë—É–¥—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º, –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã. –û—Ñ–æ—Ä–º–ª—è–π –ø–ª–∞–Ω—ã –ø–æ –ø—É–Ω–∫—Ç–∞–º, –≤—ã–¥–µ–ª—è–π –∫–ª—é—á–µ–≤—ã–µ —ç—Ç–∞–ø—ã."),
        "welcome": "–†–∞—Å–∫—Ä–æ–µ–º –≤–∞—à –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö —Ü–µ–ª—è—Ö –∏–ª–∏ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏."
    },
    "programming_partner": {
        "name": "–ü–∞—Ä—Ç–Ω–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞", 
        "prompt": ("–¢—ã ‚Äî –ü–∞—Ä—Ç–Ω–µ—Ä –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –û–±—ä—è—Å–Ω—è–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á, –ø–æ–º–æ–≥–∞–π –æ—Ç–ª–∞–∂–∏–≤–∞—Ç—å –∫–æ–¥, –¥–µ–ª–∏—Å—å –ª—É—á—à–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∫–æ–¥–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–¥–∞. –ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–º."),
        "welcome": "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∫–æ–¥–æ–º! –ö–∞–∫–∞—è –∑–∞–¥–∞—á–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è?"
    },
    "tutor_assistant": {
        "name": "–í–Ω–µ—à–∫–æ–ª—å–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫", 
        "prompt": ("–¢—ã ‚Äî –í–Ω–µ—à–∫–æ–ª—å–Ω—ã–π –ù–∞—Å—Ç–∞–≤–Ω–∏–∫, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É—á–µ–±—ã. –¢–≤–æ—è –º–∏—Å—Å–∏—è ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Å —É—á–µ–±–æ–π –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏. –û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –ø–æ–º–æ–≥–∞–π —Å —Ä–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á, –ø—Ä–æ–≤–µ—Ä—è–π –ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è. –ë—É–¥—å —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–º, –æ–±–æ–¥—Ä—è—é—â–∏–º –∏ —è—Å–Ω—ã–º –≤ —Å–≤–æ–∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏—è—Ö."),
        "welcome": "–†–∞–¥ –ø–æ–º–æ—á—å —Å —É—á–µ–±–æ–π! –ó–∞ —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤–æ–∑—å–º–µ–º—Å—è?"
    },
    "literary_editor": {
        "name": "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä", 
        "prompt": ("–¢—ã ‚Äî –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –†–µ–¥–∞–∫—Ç–æ—Ä, –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–∏—Å–∞—Ç–µ–ª–µ–π. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–∏—Å–∞—Ç—å –ª—É—á—à–µ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è —á–µ—Ç–∫–∏–µ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –ø–æ –∏—Ö —Ç–µ–∫—Å—Ç–∞–º. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∏–ª—å, –≥—Ä–∞–º–º–∞—Ç–∏–∫—É, —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –ª–æ–≥–∏–∫—É –∏–∑–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–µ–¥–ª–∞–≥–∞–π —É–ª—É—á—à–µ–Ω–∏—è, –ø–æ–º–æ–≥–∞–π —Å –≤—ã–±–æ—Ä–æ–º —Å–ª–æ–≤ –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–π. –ë—É–¥—å —Ç–∞–∫—Ç–∏—á–Ω—ã–º –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º –≤ —Å–≤–æ–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö."),
        "welcome": "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —É–ª—É—á—à–∏—Ç—å –≤–∞—à —Ç–µ–∫—Å—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç—É—Ä—ã."
    },
    "photo_dietitian_analyzer": { 
        "name": "ü•ë –î–∏–µ—Ç–æ–ª–æ–≥ (–∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ)", 
        "prompt": (
            "–¢—ã ‚Äî –î–∏–µ—Ç–æ–ª–æ–≥-–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–¥–æ—Ä–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–π –ò–ò-–º–æ–¥–µ–ª—å—é, —Å–ø–æ—Å–æ–±–Ω–æ–π –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–¥—ã. "
            "–¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –§–û–¢–û–ì–†–ê–§–ò–ô –µ–¥—ã, –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n\n"
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –§–û–¢–û –∏ –¢–ï–ö–°–¢ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–µ—Å –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π):\n"
            "1. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –±–ª—é–¥–∞ –ø–æ —Ñ–æ—Ç–æ.\n"
            "2. –£—á–∏—Ç—ã–≤–∞—è —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–µ—Å/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, —Ä–∞—Å—Å—á–∏—Ç–∞–π –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π (–ö–∫–∞–ª), —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–µ–ª–∫–æ–≤ (–ë), –∂–∏—Ä–æ–≤ (–ñ) –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤ (–£) –¥–ª—è –≤—Å–µ–π –ø–æ—Ä—Ü–∏–∏.\n"
            "3. –ü—Ä–µ–¥—Å—Ç–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–µ—Ç–∫–æ–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "   '–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –±–ª—é–¥–∞ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/–≤–µ—Å: [—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]):\n"
            "   - –ë–ª—é–¥–æ/–ü—Ä–æ–¥—É–∫—Ç—ã: [–î–µ—Ç–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤]\n"
            "   - –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: ~[X] –ö–∫–∞–ª\n"
            "   - –ë–µ–ª–∫–∏: ~[Y] –≥\n"
            "   - –ñ–∏—Ä—ã: ~[Z] –≥\n"
            "   - –£–≥–ª–µ–≤–æ–¥—ã: ~[W] –≥\n\n"
            "   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: [1-2 –∫—Ä–∞—Ç–∫–∏—Ö, –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É –±–ª—é–¥—É/–ø—Ä–∏–µ–º—É –ø–∏—â–∏].'\n"
            "4. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ç–æ–ª—å–∫–æ –§–û–¢–û –±–µ–∑ —Ç–µ–∫—Å—Ç–∞: –≤–µ–∂–ª–∏–≤–æ –ø–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö. –ü—Ä–∏–º–µ—Ä: '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ —Ñ–æ—Ç–æ! –ß—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å —ç—Ç–æ–π –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.'\n"
            "5. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ç–æ–ª—å–∫–æ –¢–ï–ö–°–¢ –±–µ–∑ —Ñ–æ—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ –¥–∏–µ—Ç–æ–ª–æ–≥–∏–∏): –æ—Ç–≤–µ—á–∞–π –Ω–∞ –Ω–µ–≥–æ –∫–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç-–¥–∏–µ—Ç–æ–ª–æ–≥, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö, –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ.\n"
            "–ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω, –¥—Ä—É–∂–µ–ª—é–±–µ–Ω –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —É–º–µ—Å—Ç–Ω–æ."
        ),
        "welcome": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –î–∏–µ—Ç–æ–ª–æ–≥. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –∏ —É–∫–∞–∂–∏—Ç–µ –≤–µ—Å/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ö–ë–ñ–£, –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –ø–∏—Ç–∞–Ω–∏—é.",
        "multimodal_capable": True,
        "forced_model_key": "google_gemini_2_5_flash_preview", 
        "native_vision_model_id": "gemini-2.5-flash-preview-04-17", 
        "initial_lifetime_free_uses": 5, # 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
        "gem_cost_after_lifetime": 2.5 # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    }
}

AVAILABLE_TEXT_MODELS = {
    "google_gemini_2_0_flash": {
        "name": "Gemini 2.0 Flash", "id": "gemini-2.0-flash", "api_type": BotConstants.API_TYPE_GOOGLE_GENAI,
        "is_limited": True, 
        "free_daily_limit": CONFIG.DEFAULT_FREE_REQUESTS_GEMINI_2_0_FLASH_DAILY,
        "gem_cost": 0 
    },
    "google_gemini_2_5_flash_preview": { 
        "name": "Gemini 2.5 Flash", "id": "gemini-2.5-flash-preview-04-17", "api_type": BotConstants.API_TYPE_GOOGLE_GENAI,
        "is_limited": True,
        "free_daily_limit": CONFIG.DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY,
        "gem_cost": 2.5,
        "is_vision_model": True 
    },
    "custom_api_gemini_2_5_pro": {
        "name": "Gemini 2.5 Pro", "id": "gemini-2.5-pro-preview-03-25", "api_type": BotConstants.API_TYPE_CUSTOM_HTTP, 
        "endpoint": CONFIG.CUSTOM_GEMINI_PRO_ENDPOINT, "api_key_var_name": "CUSTOM_GEMINI_PRO_API_KEY",
        "is_limited": True, 
        "free_daily_limit": CONFIG.DEFAULT_FREE_REQUESTS_CUSTOM_GEMINI_PRO_DAILY, 
        "gem_cost": 2.5
    },
    "custom_api_grok_3": {
        "name": "Grok 3", "id": "grok-3-beta", "api_type": BotConstants.API_TYPE_CUSTOM_HTTP,
        "endpoint": "https://api.gen-api.ru/api/v1/networks/grok-3", "api_key_var_name": "CUSTOM_GROK_3_API_KEY",
        "is_limited": True, 
        "free_daily_limit": CONFIG.DEFAULT_FREE_REQUESTS_CUSTOM_GROK_DAILY, 
        "gem_cost": 2.5
    },
    "custom_api_gpt_4o_mini": {
        "name": "GPT-4o mini", "id": "gpt-4o-mini", "api_type": BotConstants.API_TYPE_CUSTOM_HTTP,
        "endpoint": "https://api.gen-api.ru/api/v1/networks/gpt-4o-mini", "api_key_var_name": "CUSTOM_GPT4O_MINI_API_KEY",
        "is_limited": True, 
        "free_daily_limit": CONFIG.DEFAULT_FREE_REQUESTS_CUSTOM_GPT4O_MINI_DAILY,
        "gem_cost": 0.5
    }
}
DEFAULT_MODEL_ID = AVAILABLE_TEXT_MODELS[CONFIG.DEFAULT_MODEL_KEY]["id"]

MENU_STRUCTURE = {
    BotConstants.MENU_MAIN: {
        "title": "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üëá –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", 
        "items": [
            {"text": "ü§ñ –ê–≥–µ–Ω—Ç—ã –ò–ò", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_AI_MODES_SUBMENU},
            {"text": "‚öôÔ∏è –ú–æ–¥–µ–ª–∏ –ò–ò", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_MODELS_SUBMENU},
            {"text": "üìä –õ–∏–º–∏—Ç—ã", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_LIMITS_SUBMENU},
            {"text": "üéÅ –ë–æ–Ω—É—Å", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_BONUS_SUBMENU},
            {"text": "üíé –ì–µ–º—ã", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_GEMS_SUBMENU},
            {"text": "‚ùì –ü–æ–º–æ—â—å", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_HELP_SUBMENU}
        ], "parent": None, "is_submenu": False
    },
    BotConstants.MENU_AI_MODES_SUBMENU: {
        "title": "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç –ò–ò", "items": [
            {"text": mode["name"], "action": BotConstants.CALLBACK_ACTION_SET_AGENT, "target": key}
            for key, mode in AI_MODES.items() 
        ], "parent": BotConstants.MENU_MAIN, "is_submenu": True
    },
    BotConstants.MENU_MODELS_SUBMENU: {
        "title": "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò", "items": [
            {"text": model["name"], "action": BotConstants.CALLBACK_ACTION_SET_MODEL, "target": key}
            for key, model in AVAILABLE_TEXT_MODELS.items()
        ], "parent": BotConstants.MENU_MAIN, "is_submenu": True
    },
    BotConstants.MENU_LIMITS_SUBMENU: {"title": "–í–∞—à–∏ –ª–∏–º–∏—Ç—ã –∏ –±–∞–ª–∞–Ω—Å", "items": [{"text": "üìä –ü–æ–∫–∞–∑–∞—Ç—å", "action": BotConstants.CALLBACK_ACTION_SHOW_LIMITS, "target": "usage"}], "parent": BotConstants.MENU_MAIN, "is_submenu": True},
    BotConstants.MENU_BONUS_SUBMENU: {"title": "–ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª", "items": [{"text": "üéÅ –ü–æ–ª—É—á–∏—Ç—å", "action": BotConstants.CALLBACK_ACTION_CHECK_BONUS, "target": "news_bonus"}], "parent": BotConstants.MENU_MAIN, "is_submenu": True},
    BotConstants.MENU_GEMS_SUBMENU: {
        "title": "üíé –ú–∞–≥–∞–∑–∏–Ω –ì–µ–º–æ–≤", 
        "items": [
            {"text": package_info["title"], "action": BotConstants.CALLBACK_ACTION_BUY_GEM_PACKAGE, "target": package_key}
            for package_key, package_info in CONFIG.GEM_PACKAGES.items()
        ] + [{"text": "‚ÑπÔ∏è –ú–æ–π –±–∞–ª–∞–Ω—Å –∏ –ª–∏–º–∏—Ç—ã", "action": BotConstants.CALLBACK_ACTION_SHOW_LIMITS, "target": "show_limits_from_gems_menu"}],
        "parent": BotConstants.MENU_MAIN, 
        "is_submenu": True
    },
    BotConstants.MENU_HELP_SUBMENU: {"title": "–ü–æ–º–æ—â—å", "items": [{"text": "‚ùì –°–ø—Ä–∞–≤–∫–∞", "action": BotConstants.CALLBACK_ACTION_SHOW_HELP, "target": "help"}], "parent": BotConstants.MENU_MAIN, "is_submenu": True}
}

class FirestoreService:
    def __init__(self, cert_path: str, creds_json_str: Optional[str] = None):
        self._db: Optional[FirestoreClient] = None
        try:
            cred_obj = None
            if creds_json_str:
                try:
                    cred_obj = credentials.Certificate(json.loads(creds_json_str))
                    logger.info("Firebase credentials loaded from JSON string.")
                except json.JSONDecodeError as e:
                    logger.error(f"Error parsing FIREBASE_CREDENTIALS_JSON_STR: {e}. Check JSON env var.")
                    raise
            elif os.path.exists(cert_path):
                cred_obj = credentials.Certificate(cert_path)
                logger.info(f"Firebase credentials loaded from file: {cert_path}.")
            else:
                raise FileNotFoundError("Firebase credentials not configured (JSON string or cert file).")

            if not firebase_admin._apps:
                initialize_app(cred_obj)
                logger.info("Firebase app successfully initialized.")
            else:
                logger.info("Firebase app already initialized.")
            self._db = firestore.client()
            logger.info("Firestore client successfully initialized.")
        except Exception as e:
            logger.error(f"Critical error during Firebase/Firestore initialization: {e}", exc_info=True)
            self._db = None

    async def _execute_firestore_op(self, func, *args, **kwargs):
        if not self._db:
            logger.warning(f"Firestore (db) is not initialized. Operation '{func.__name__}' skipped.")
            return None
        return await asyncio.get_event_loop().run_in_executor(None, lambda: func(*args, **kwargs))

    async def get_user_data(self, user_id: int) -> Dict[str, Any]:
        if not self._db: return {}
        doc_ref = self._db.collection(BotConstants.FS_USERS_COLLECTION).document(str(user_id))
        doc = await self._execute_firestore_op(doc_ref.get)
        return doc.to_dict() if doc and doc.exists else {}

    async def set_user_data(self, user_id: int, data: Dict[str, Any]) -> None:
        if not self._db: return
        doc_ref = self._db.collection(BotConstants.FS_USERS_COLLECTION).document(str(user_id))
        await self._execute_firestore_op(doc_ref.set, data, merge=True)
        logger.debug(f"User data for {user_id} updated with keys: {list(data.keys())}")

    async def get_bot_data(self) -> Dict[str, Any]:
        if not self._db: return {}
        doc_ref = self._db.collection(BotConstants.FS_BOT_DATA_COLLECTION).document(BotConstants.FS_BOT_DATA_DOCUMENT)
        doc = await self._execute_firestore_op(doc_ref.get)
        return doc.to_dict() if doc and doc.exists else {}

    async def set_bot_data(self, data: Dict[str, Any]) -> None:
        if not self._db: return
        doc_ref = self._db.collection(BotConstants.FS_BOT_DATA_COLLECTION).document(BotConstants.FS_BOT_DATA_DOCUMENT)
        await self._execute_firestore_op(doc_ref.set, data, merge=True)
        logger.debug(f"Bot data updated with keys: {list(data.keys())}")

firestore_service = FirestoreService(
    cert_path=CONFIG.FIREBASE_CERT_PATH,
    creds_json_str=CONFIG.FIREBASE_CREDENTIALS_JSON_STR
)

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—Å—Ç—É–ø –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö
class BaseAIService(ABC):
    def __init__(self, model_config: Dict[str, Any]):
        self.model_config = model_config
        self.model_id = model_config["id"]

    @abstractmethod
    async def generate_response(self, system_prompt: str, user_prompt: str, history: List[Dict], image_data: Optional[Dict[str, Any]] = None) -> str:
        pass

class GoogleGenAIService(BaseAIService):
    async def generate_response(self, system_prompt: str, user_prompt: str, history: List[Dict], image_data: Optional[Dict[str, Any]] = None) -> str:
        try:
            if not CONFIG.GOOGLE_GEMINI_API_KEY or "YOUR_" in CONFIG.GOOGLE_GEMINI_API_KEY:
                 return "API –∫–ª—é—á –¥–ª—è Google Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."

            model_genai = genai.GenerativeModel(
                self.model_id, 
                generation_config={"max_output_tokens": CONFIG.MAX_OUTPUT_TOKENS_GEMINI_LIB},
                # system_instruction —É–±—Ä–∞–Ω –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞, —Ç.–∫. Gemini API v1beta –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é –≤ start_chat –¥–ª—è –º—É–ª—å—Ç–∏-—Ç—ë—Ä–Ω–∞
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –≤–∫–ª—é—á–∞—è —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –Ω–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            # Gemini API v1beta (python client) –¥–ª—è –º—É–ª—å—Ç–∏-—Ç—ë—Ä–Ω–∞ (start_chat) –æ–∂–∏–¥–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
            # [{'role': 'user', 'parts': [...]}, {'role': 'model', 'parts': [...]}]
            # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç 'user' –∏–ª–∏ 'model' —Å –æ—Å–æ–±–æ–π —Ä–æ–ª—å—é,
            # –Ω–æ –±–æ–ª–µ–µ –∫–∞–Ω–æ–Ω–∏—á–Ω–æ - –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ API —ç—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç, –∏–ª–∏ –≤–∫–ª—é—á–∞—Ç—å –≤ –ø–µ—Ä–≤—ã–π user_prompt.
            # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å CustomHttpAIService, –º—ã –±—É–¥–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å system_prompt
            # –∏ –æ–Ω –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞—á–∞–ª–æ `messages_payload` –≤ CustomHttpAIService.
            # –î–ª—è GoogleGenAIService, system_instruction –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏, –Ω–æ –¥–ª—è chat_session
            # –æ–Ω –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –∫–∞–∂–¥–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é. –ú—ã –º–æ–∂–µ–º —ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ, –¥–æ–±–∞–≤–ª—è—è –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏.

            current_history = []
            if system_prompt: # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –ø–µ—Ä–≤—É—é "–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é" –≤ —á–∞—Ç
                 current_history.append({'role': 'user', 'parts': [{'text': system_prompt}]})
                 current_history.append({'role': 'model', 'parts': [{'text': "–ü–æ–Ω—è–ª. –Ø –≥–æ—Ç–æ–≤."}]}) # –û—Ç–≤–µ—Ç-–∑–∞–≥–ª—É—à–∫–∞ –æ—Ç –º–æ–¥–µ–ª–∏

            current_history.extend(history) # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é

            content_parts_for_current_message = []
            if image_data and self.model_config.get("is_vision_model"):
                if image_data.get("base64") and image_data.get("mime_type"):
                    try:
                        image_bytes = base64.b64decode(image_data["base64"])
                        image_part = {"mime_type": image_data["mime_type"], "data": image_bytes}
                        content_parts_for_current_message.append(image_part) 
                        logger.info(f"Image data prepared for vision model {self.model_id}")
                    except Exception as e:
                        logger.error(f"Error decoding base64 image for model {self.model_id}: {e}")
                        return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è." 
                else:
                    logger.warning(f"Vision model {self.model_id} called but image_data is incomplete.")
            
            if user_prompt: 
                content_parts_for_current_message.append({'text': user_prompt})


            if not content_parts_for_current_message: 
                logger.warning(f"No content parts to send for model {self.model_id}.")
                return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ò–ò."
            
            # logger.debug(f"Google GenAI History: {current_history}")
            # logger.debug(f"Google GenAI Current Message Parts: {content_parts_for_current_message}")

            chat_session = model_genai.start_chat(history=current_history)
            response = await asyncio.get_event_loop().run_in_executor(None, lambda: chat_session.send_message(content_parts_for_current_message))
            return response.text.strip() if response.text else "–û—Ç–≤–µ—Ç Google GenAI –ø—É—Å—Ç."
        except google.api_core.exceptions.ResourceExhausted as e:
            logger.error(f"Google GenAI API limit exhausted for model {self.model_id}: {e}")
            return f"–õ–∏–º–∏—Ç Google API –∏—Å—á–µ—Ä–ø–∞–Ω: {e}"
        except Exception as e:
            logger.error(f"Google GenAI API error for model {self.model_id}: {e}", exc_info=True)
            return f"–û—à–∏–±–∫–∞ Google API ({type(e).__name__}) –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ {self.model_id}."

class CustomHttpAIService(BaseAIService):
    async def generate_response(self, system_prompt: str, user_prompt: str, history: List[Dict], image_data: Optional[Dict[str, Any]] = None) -> str:
        if image_data: # Custom HTTP API –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ
            logger.warning(f"CustomHttpAIService for model {self.model_id} received image_data, but current implementation ignores it.")

        api_key_name = self.model_config.get("api_key_var_name")
        actual_key = _API_KEYS_PROVIDER.get(api_key_name)

        if not actual_key or ("YOUR_" in actual_key and not (actual_key.startswith("sk-") or actual_key.startswith("AIzaSy"))):
            logger.error(f"Invalid API key for model {self.model_id} (key name: {api_key_name}).")
            return f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ API –¥–ª—è ¬´{self.model_config.get('name', self.model_id)}¬ª."

        headers = {
            "Authorization": f"Bearer {actual_key}",
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
        
        endpoint_url = self.model_config.get("endpoint", "")
        is_gen_api_endpoint = endpoint_url.startswith("https://api.gen-api.ru")
        
        messages_payload = []
        if system_prompt:
            messages_payload.append({"role": "system", "content": system_prompt})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É—è —Ñ–æ—Ä–º–∞—Ç Gemini (parts: [{'text': ...}]) –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (content: ...)
        if history:
            for msg in history:
                role = msg.get("role")
                parts = msg.get("parts")
                if role and parts and isinstance(parts, list) and parts[0].get("text"):
                    messages_payload.append({"role": role, "content": parts[0]["text"]})
                # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç –¥—Ä—É–≥–æ–≥–æ Custom API), –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
                elif role and msg.get("content"):
                     messages_payload.append({"role": role, "content": msg["content"]})


        if user_prompt: 
            messages_payload.append({"role": "user", "content": user_prompt})
        
        payload = {
            "messages": messages_payload,
            "is_sync": True, 
            "max_tokens": self.model_config.get("max_tokens", CONFIG.MAX_OUTPUT_TOKENS_GEMINI_LIB)
        }
        
        if is_gen_api_endpoint and self.model_id:
             payload['model'] = self.model_id 

        if self.model_config.get("parameters"):
            payload.update(self.model_config["parameters"])
        
        endpoint = endpoint_url 
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ payload –Ω–∞ {endpoint}: {json.dumps(payload, ensure_ascii=False, indent=2)}")

        try:
            response = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: requests.post(endpoint, headers=headers, json=payload, timeout=90)
            )
            response.raise_for_status()
            json_resp = response.json()
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {endpoint}: {json.dumps(json_resp, ensure_ascii=False, indent=2)}")
            
            extracted_text = None

            if is_gen_api_endpoint:
                if json_resp.get("status") == "success" and "output" in json_resp:
                    extracted_text = json_resp["output"]
                elif "response" in json_resp and isinstance(json_resp["response"], list) and json_resp["response"]:
                    first_response_item = json_resp["response"][0]
                    if "message" in first_response_item and "content" in first_response_item["message"]:
                        extracted_text = first_response_item["message"]["content"]
                elif "text" in json_resp: 
                    extracted_text = json_resp.get("text")

                if not extracted_text and json_resp.get("status") not in ["success", "starting", "processing"]:
                    status_from_api = json_resp.get('status','N/A')
                    error_msg_from_api = json_resp.get('error_message', json_resp.get('result'))
                    if isinstance(error_msg_from_api, list): error_msg_from_api = " ".join(error_msg_from_api)
                    input_details_on_error = json_resp.get('input', {})
                    if not error_msg_from_api and isinstance(input_details_on_error, dict): error_msg_from_api = input_details_on_error.get('error', '')
                    logger.error(f"–û—à–∏–±–∫–∞ API –¥–ª—è {self.model_config['name']}. –°—Ç–∞—Ç—É—Å: {status_from_api}. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {json_resp}")
                    final_error_message = f"–û—à–∏–±–∫–∞ API {self.model_config['name']}: –°—Ç–∞—Ç—É—Å ¬´{status_from_api}¬ª. {error_msg_from_api}"
                    if not str(error_msg_from_api).strip() and str(error_msg_from_api) != '0':
                        final_error_message = f"–û—à–∏–±–∫–∞ API {self.model_config['name']}: –°—Ç–∞—Ç—É—Å ¬´{status_from_api}¬ª. –î–µ—Ç–∞–ª–∏: {str(json_resp)[:200]}"
                    return final_error_message
            else: # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                if isinstance(json_resp.get("choices"), list) and json_resp["choices"]:
                    choice = json_resp["choices"][0]
                    if isinstance(choice.get("message"), dict) and choice["message"].get("content"):
                        extracted_text = choice["message"]["content"]
                    elif isinstance(choice.get("text"), str): # –î–ª—è –±–æ–ª–µ–µ —Å—Ç–∞—Ä—ã—Ö API
                         extracted_text = choice.get("text")
                elif isinstance(json_resp.get("text"), str): # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ API –º–æ–≥—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é
                    extracted_text = json_resp.get("text")
                elif isinstance(json_resp.get("content"), str): # –ï—â–µ –æ–¥–∏–Ω –≤–æ–∑–º–æ–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                     extracted_text = json_resp.get("content")
            
            return extracted_text.strip() if extracted_text else f"–û—Ç–≤–µ—Ç API {self.model_config['name']} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞."
        except requests.exceptions.HTTPError as e:
            error_body = e.response.text if e.response else "No response body"; status_code = e.response.status_code if e.response else "N/A"
            logger.error(f"Custom API HTTPError for {self.model_id} ({endpoint}): {status_code} - {error_body}", exc_info=True)
            return f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ Custom API ({status_code}) –¥–ª—è {self.model_config['name']}. –û—Ç–≤–µ—Ç: {error_body[:200]}"
        except requests.exceptions.RequestException as e:
            logger.error(f"Custom API RequestException for {self.model_id} ({endpoint}): {e}", exc_info=True)
            return f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Custom API ({type(e).__name__}) –¥–ª—è {self.model_config['name']}."
        except Exception as e:
            logger.error(f"Unexpected Custom API error for {self.model_id} ({endpoint}): {e}", exc_info=True)
            return f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Custom API ({type(e).__name__}) –¥–ª—è {self.model_config['name']}."

async def get_user_gem_balance(user_id: int, user_data: Optional[Dict[str, Any]] = None) -> float:
    if user_data is None: user_data = await firestore_service.get_user_data(user_id)
    return float(user_data.get('gem_balance', 0.0))

async def update_user_gem_balance(user_id: int, new_balance: float) -> None:
    await firestore_service.set_user_data(user_id, {'gem_balance': round(new_balance, 2)})
    logger.info(f"User {user_id} gem balance updated to: {new_balance:.2f}")

async def get_daily_usage_for_model(user_id: int, model_key: str, bot_data_cache: Optional[Dict[str, Any]] = None) -> int:
    if bot_data_cache is None: bot_data_cache = await firestore_service.get_bot_data()
    today_str = datetime.now(CONFIG.MOSCOW_TZ).strftime("%Y-%m-%d")
    all_user_daily_counts = bot_data_cache.get(BotConstants.FS_ALL_USER_DAILY_COUNTS_KEY, {})
    user_counts_today = all_user_daily_counts.get(str(user_id), {})
    model_usage_info = user_counts_today.get(model_key, {'date': '', 'count': 0})
    
    if model_usage_info.get('date') != today_str:
        return 0
    return model_usage_info['count']

async def get_agent_lifetime_uses_left(user_id: int, agent_config_key: str, user_data: Optional[Dict[str, Any]] = None) -> int:
    if user_data is None: user_data = await firestore_service.get_user_data(user_id)
    firestore_key = f"lifetime_uses_{agent_config_key}"
    return int(user_data.get(firestore_key, 0))

async def decrement_agent_lifetime_uses(user_id: int, agent_config_key: str, user_data: Optional[Dict[str, Any]] = None) -> None:
    if user_data is None: user_data_to_update = await firestore_service.get_user_data(user_id)
    else: user_data_to_update = user_data
    firestore_key = f"lifetime_uses_{agent_config_key}"
    current_uses = int(user_data_to_update.get(firestore_key, 0))
    if current_uses > 0:
        await firestore_service.set_user_data(user_id, {firestore_key: current_uses - 1})
        logger.info(f"User {user_id} consumed a lifetime free use for agent {agent_config_key}. Left: {current_uses - 1}")

async def check_and_log_request_attempt(
    user_id: int, model_key: str, user_data: Optional[Dict[str, Any]] = None, 
    bot_data_cache: Optional[Dict[str, Any]] = None, current_agent_key: Optional[str] = None
) -> Tuple[bool, str, str, Optional[float]]:
    model_cfg = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_cfg: return False, "–û—à–∏–±–∫–∞: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∏–ª–ª–∏–Ω–≥-–º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", "error", None

    if user_data is None: user_data = await firestore_service.get_user_data(user_id)
    if bot_data_cache is None: bot_data_cache = await firestore_service.get_bot_data()
    active_agent_config = AI_MODES.get(current_agent_key) if current_agent_key else None

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–Ω—É—Å–∞ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
    news_bonus_uses_left_key = f"news_bonus_uses_left_{model_key}"
    if user_data.get('claimed_news_bonus', False) and user_data.get(news_bonus_uses_left_key, 0) > 0:
        logger.info(f"User {user_id} can use model {model_key} via news channel bonus.")
        return True, f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–Ω—É—Å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è ¬´{model_cfg['name']}¬ª.", "bonus", 0.0

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∞–≥–µ–Ω—Ç–∞
    agent_lifetime_uses_exhausted = False
    if active_agent_config and current_agent_key:
        initial_lifetime_uses = active_agent_config.get('initial_lifetime_free_uses')
        if initial_lifetime_uses is not None and model_key == active_agent_config.get("forced_model_key"): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ñ–æ—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–≥–µ–Ω—Ç–æ–º
            agent_uses_left = await get_agent_lifetime_uses_left(user_id, current_agent_key, user_data)
            if agent_uses_left > 0:
                return True, f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ ¬´{active_agent_config.get('name')}¬ª ({agent_uses_left}/{initial_lifetime_uses}).", "agent_lifetime_free", 0.0
            else: # –ü–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
                agent_lifetime_uses_exhausted = True 
                # –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –µ—Å—Ç—å —Å–ø–µ—Ü. —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
                gem_cost_after_lifetime = active_agent_config.get('gem_cost_after_lifetime')
                if gem_cost_after_lifetime is not None and gem_cost_after_lifetime > 0:
                    user_gem_balance_check = await get_user_gem_balance(user_id, user_data)
                    if user_gem_balance_check >= gem_cost_after_lifetime:
                        return True, f"–ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ {gem_cost_after_lifetime:.1f} –≥–µ–º–æ–≤ (—Å–ø–µ—Ü. —Ç–∞—Ä–∏—Ñ –∞–≥–µ–Ω—Ç–∞).", "gem", gem_cost_after_lifetime
                    else:
                        msg_no_gems_agent = (f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–º–æ–≤ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ ¬´{active_agent_config.get('name')}¬ª.\n"
                                           f"–ù—É–∂–Ω–æ: {gem_cost_after_lifetime:.1f}, —É –≤–∞—Å: {user_gem_balance_check:.1f}\n"
                                           f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –º–µ–Ω—é ¬´üíé –ì–µ–º—ã¬ª.")
                        return False, msg_no_gems_agent, "no_gems_agent_specific", gem_cost_after_lifetime
                # –ï—Å–ª–∏ —Å–ø–µ—Ü. —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ—Ç, —Ç–æ –¥–∞–ª—å—à–µ –±—É–¥–µ—Ç –æ–±—â–∞—è –ª–æ–≥–∏–∫–∞ (–¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –º–æ–¥–µ–ª–∏ / –æ–±—ã—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–∏)


    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç—Å–∫–∏–π –ª–∏–º–∏—Ç –±—ã–ª, –Ω–æ –∏—Å—á–µ—Ä–ø–∞–Ω –ò –ù–ï–¢ —Å–ø–µ—Ü. —Ü–µ–Ω—ã –¥–ª—è –∞–≥–µ–Ω—Ç–∞)
    # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –∏–∑-–∑–∞ agent_lifetime_uses_exhausted
    can_try_daily_limit = True
    if agent_lifetime_uses_exhausted and active_agent_config and active_agent_config.get('gem_cost_after_lifetime') is not None:
        # –ï—Å–ª–∏ –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–≥–µ–Ω—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –ò —É –∞–≥–µ–Ω—Ç–∞ –µ—Å—Ç—å —Å–≤–æ—è —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ,
        # —Ç–æ –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –º–æ–¥–µ–ª–∏ —É–∂–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Ç.–∫. –∞–≥–µ–Ω—Ç –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.
        can_try_daily_limit = False


    if can_try_daily_limit:
        free_daily_limit = model_cfg.get('free_daily_limit', 0)
        current_daily_usage = await get_daily_usage_for_model(user_id, model_key, bot_data_cache)
        if current_daily_usage < free_daily_limit:
            return True, f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–Ω–µ–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ ¬´{model_cfg['name']}¬ª ({current_daily_usage + 1}/{free_daily_limit}).", "daily_free", 0.0

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞ –≥–µ–º—ã (–æ–±—ã—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–∏)
    # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏:
    # - –∞–≥–µ–Ω—Ç –Ω–µ –∏–º–µ–µ—Ç –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –ò–õ–ò
    # - –∞–≥–µ–Ω—Ç –∏–º–µ–µ—Ç –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã, –æ–Ω–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –ù–û —É –∞–≥–µ–Ω—Ç–∞ –ù–ï–¢ —Å–ø–µ—Ü. —Ü–µ–Ω—ã –ø–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ò–õ–ò
    # - –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –º–æ–¥–µ–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    gem_cost = model_cfg.get('gem_cost', 0.0)
    if gem_cost > 0:
        user_gem_balance = await get_user_gem_balance(user_id, user_data)
        if user_gem_balance >= gem_cost:
            return True, f"–ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ {gem_cost:.1f} –≥–µ–º–æ–≤.", "gem", gem_cost
        else:
            msg = (f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–º–æ–≤ –¥–ª—è ¬´{model_cfg['name']}¬ª.\n"
                   f"–ù—É–∂–Ω–æ: {gem_cost:.1f}, —É –≤–∞—Å: {user_gem_balance:.1f}\n"
                   f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –º–µ–Ω—é ¬´üíé –ì–µ–º—ã¬ª.")
            return False, msg, "no_gems", gem_cost
    
    # 5. –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –ª–∏–º–∏—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏ –º–æ–¥–µ–ª—å –Ω–µ –ø–ª–∞—Ç–Ω–∞—è (gem_cost == 0)
    # –∏–ª–∏ –∞–≥–µ–Ω—Ç –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç—ã –∏ –Ω–µ –∏–º–µ–µ—Ç –ø–ª–∞—Ç–Ω–æ–π –æ–ø—Ü–∏–∏.
    final_msg = ""
    if agent_lifetime_uses_exhausted and active_agent_config:
        final_msg = (f"–í—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ ¬´{active_agent_config.get('name')}¬ª –∏—Å—á–µ—Ä–ø–∞–Ω—ã. "
                     f"–≠—Ç–∞ –º–æ–¥–µ–ª—å ({model_cfg['name']}) –¥–∞–ª–µ–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.")
    else:
        final_msg = (f"–í—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è ¬´{model_cfg['name']}¬ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã. "
                     f"–≠—Ç–∞ –º–æ–¥–µ–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞ –≥–µ–º—ã.")
        
    logger.warning(f"User {user_id} all limits exhausted for {model_key} (agent: {current_agent_key}). Message: {final_msg}")
    return False, final_msg, "limit_exhausted_no_gems", None

async def increment_request_count(user_id: int, model_key: str, usage_type: str, current_agent_key: Optional[str] = None, gem_cost_val: Optional[float] = None):
    if usage_type == "bonus":
        user_data = await firestore_service.get_user_data(user_id) 
        bonus_uses_left_key = f"news_bonus_uses_left_{model_key}"
        bonus_left = user_data.get(bonus_uses_left_key, 0)
        if bonus_left > 0: 
            await firestore_service.set_user_data(user_id, {bonus_uses_left_key: bonus_left - 1})
            logger.info(f"User {user_id} consumed bonus for {model_key}. Left: {bonus_left - 1}")
        else:
            logger.warning(f"User {user_id} tried to consume bonus for {model_key}, but no uses left (key: {bonus_uses_left_key}).")

    elif usage_type == "agent_lifetime_free":
        if not current_agent_key: 
            logger.error(f"User {user_id} used 'agent_lifetime_free' for {model_key} but current_agent_key missing.")
            return
        await decrement_agent_lifetime_uses(user_id, current_agent_key)
    elif usage_type == "daily_free":
        bot_data = await firestore_service.get_bot_data()
        all_counts = bot_data.get(BotConstants.FS_ALL_USER_DAILY_COUNTS_KEY, {})
        user_counts = all_counts.get(str(user_id), {})
        today = datetime.now(CONFIG.MOSCOW_TZ).strftime("%Y-%m-%d")
        model_usage = user_counts.get(model_key, {'date': today, 'count': 0})
        
        if model_usage.get('date') != today: 
            model_usage = {'date': today, 'count': 0}
            
        model_usage['count'] += 1
        user_counts[model_key] = model_usage
        all_counts[str(user_id)] = user_counts
        await firestore_service.set_bot_data({BotConstants.FS_ALL_USER_DAILY_COUNTS_KEY: all_counts})
        logger.info(f"Incremented DAILY FREE for {user_id}, {model_key} to {model_usage['count']} for date {today}.")
    elif usage_type == "gem": # –≠—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç –∏ –æ–±—ã—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–∏, –∏ —Å–ø–µ—Ü. —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞
        if gem_cost_val is None or gem_cost_val <= 0: 
            logger.error(f"User {user_id} gem usage for {model_key} but invalid gem_cost: {gem_cost_val}")
            return
        balance = await get_user_gem_balance(user_id) 
        new_balance = balance - gem_cost_val
        if new_balance < 0: 
            logger.error(f"User {user_id} overdraft on gems for {model_key}. Bal: {balance}, Cost: {gem_cost_val}")
            new_balance = 0.0
        await update_user_gem_balance(user_id, new_balance)
        logger.info(f"User {user_id} spent {gem_cost_val:.1f} gems for {model_key}. New balance: {new_balance:.2f}")
    else: 
        logger.error(f"Unknown usage_type '{usage_type}' for {user_id}, {model_key}")

def get_ai_service(model_key: str) -> Optional[BaseAIService]:
    model_cfg = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_cfg:
        logger.error(f"Configuration for model key '{model_key}' not found.")
        return None
    api_type = model_cfg.get("api_type")
    if api_type == BotConstants.API_TYPE_GOOGLE_GENAI: return GoogleGenAIService(model_cfg)
    elif api_type == BotConstants.API_TYPE_CUSTOM_HTTP: return CustomHttpAIService(model_cfg)
    else: 
        logger.error(f"Unknown API type '{api_type}' for model key '{model_key}'.")
        return None

async def _store_and_try_delete_message(update: Update, user_id: int, is_command_to_keep: bool = False):
    if not update.message: return
    message_id_to_process = update.message.message_id
    timestamp_now_iso = datetime.now(timezone.utc).isoformat()
    chat_id = update.effective_chat.id
    user_data_for_msg_handling = await firestore_service.get_user_data(user_id)
    prev_command_info = user_data_for_msg_handling.pop('user_command_to_delete', None)
    if prev_command_info and prev_command_info.get('message_id'):
        try:
            prev_msg_time = datetime.fromisoformat(prev_command_info['timestamp'])
            if prev_msg_time.tzinfo is None: prev_msg_time = prev_msg_time.replace(tzinfo=timezone.utc)
            if datetime.now(timezone.utc) - prev_msg_time <= timedelta(hours=48):
                await update.get_bot().delete_message(chat_id=chat_id, message_id=prev_command_info['message_id'])
                logger.info(f"Successfully deleted previous user message {prev_command_info['message_id']}")
        except (telegram.error.BadRequest, ValueError) as e:
            if "message to delete not found" not in str(e).lower(): # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
                 logger.warning(f"Failed to delete/process previous user message {prev_command_info.get('message_id')}: {e}")
    
    if not is_command_to_keep: # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start)
        # –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ menu_button_handler –¥–ª—è –∫–Ω–æ–ø–æ–∫
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –Ω–µ —É–¥–∞–ª—è–µ–º, –æ–Ω–∏ —á–∞—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞
        pass 
    else: # –ö–æ–º–∞–Ω–¥—ã —Ç–∏–ø–∞ /start, /menu –∏ —Ç.–¥.
         user_data_for_msg_handling['user_command_message_to_keep'] = {
            'message_id': message_id_to_process, 'timestamp': timestamp_now_iso
        }
    await firestore_service.set_user_data(user_id, user_data_for_msg_handling)


def auto_delete_message_decorator(is_command_to_keep: bool = False):
    def decorator(func):
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
            if update.effective_user and update.message:
                 await _store_and_try_delete_message(update, update.effective_user.id, is_command_to_keep)
            return await func(update, context)
        return wrapper
    return decorator

async def get_current_model_key(user_id: int, user_data: Optional[Dict[str, Any]] = None) -> str:
    if user_data is None: user_data = await firestore_service.get_user_data(user_id)
    selected_id = user_data.get('selected_model_id', DEFAULT_MODEL_ID)
    selected_api_type = user_data.get('selected_api_type')

    if selected_api_type:
        for key, info in AVAILABLE_TEXT_MODELS.items():
            if info["id"] == selected_id and info.get("api_type") == selected_api_type:
                return key
    
    for key, info in AVAILABLE_TEXT_MODELS.items():
        if info["id"] == selected_id:
            if user_data.get('selected_api_type') != info.get("api_type"):
                await firestore_service.set_user_data(user_id, {'selected_api_type': info.get("api_type")})
            return key
            
    default_cfg = AVAILABLE_TEXT_MODELS[CONFIG.DEFAULT_MODEL_KEY]
    await firestore_service.set_user_data(user_id, {
        'selected_model_id': default_cfg["id"], 
        'selected_api_type': default_cfg["api_type"]
    })
    return CONFIG.DEFAULT_MODEL_KEY

async def get_selected_model_details(user_id: int, user_data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    model_key = await get_current_model_key(user_id, user_data)
    return AVAILABLE_TEXT_MODELS.get(model_key, AVAILABLE_TEXT_MODELS[CONFIG.DEFAULT_MODEL_KEY])

async def get_current_mode_details(user_id: int, user_data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    if user_data is None: user_data = await firestore_service.get_user_data(user_id)
    
    active_agent_key = user_data.get('current_ai_mode', CONFIG.DEFAULT_AI_MODE_KEY)
    agent_config = AI_MODES.get(active_agent_key)

    if not agent_config: 
        logger.warning(f"Invalid agent key '{active_agent_key}' found for user {user_id}. Resetting to default.")
        active_agent_key = CONFIG.DEFAULT_AI_MODE_KEY
        await firestore_service.set_user_data(user_id, {'current_ai_mode': active_agent_key, 'conversation_history': []}) # –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏
        agent_config = AI_MODES[active_agent_key]
        
    return agent_config

def smart_truncate(text: str, max_length: int) -> Tuple[str, bool]:
    if not isinstance(text, str): text = str(text)
    if len(text) <= max_length: return text, False
    suffix = "\n\n(...–æ—Ç–≤–µ—Ç –±—ã–ª —Å–æ–∫—Ä–∞—â–µ–Ω)"
    adjusted_max_length = max_length - len(suffix)
    if adjusted_max_length <= 0: return text[:max_length - len("...")] + "...", True 
    truncated_text = text[:adjusted_max_length]
    for separator in ['\n\n', '. ', '! ', '? ', '\n', ' ']: 
        position = truncated_text.rfind(separator)
        if position != -1:
            actual_cut_position = position + (len(separator) if separator != ' ' else 0)
            if actual_cut_position > 0 and actual_cut_position > adjusted_max_length * 0.3:
                 return text[:actual_cut_position].strip() + suffix, True
    return text[:adjusted_max_length].strip() + suffix, True

def is_menu_button_text(text: str) -> bool:
    if text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]: return True
    for menu_data in MENU_STRUCTURE.values():
        for item in menu_data.get("items", []):
            if item["text"] == text: return True
    return False

def generate_menu_keyboard(menu_key: str) -> ReplyKeyboardMarkup:
    menu_config = MENU_STRUCTURE.get(menu_key, MENU_STRUCTURE[BotConstants.MENU_MAIN])
    keyboard_rows: List[List[KeyboardButton]] = []
    items = menu_config.get("items", [])

    def create_button(item_config: Dict[str, Any]) -> KeyboardButton:
        text = item_config["text"]
        web_app_url = item_config.get("web_app_url")
        if web_app_url and item_config.get("action") == "open_mini_app": 
            return KeyboardButton(text, web_app=WebAppInfo(url=web_app_url))
        return KeyboardButton(text)

    group_by_two_keys = [
        BotConstants.MENU_MAIN, 
        BotConstants.MENU_MODELS_SUBMENU, 
        BotConstants.MENU_GEMS_SUBMENU,
        BotConstants.MENU_AI_MODES_SUBMENU
    ]

    if menu_key in group_by_two_keys:
        for i in range(0, len(items), 2):
            row = [create_button(items[j]) for j in range(i, min(i + 2, len(items)))]
            keyboard_rows.append(row)
    else:
        for item in items:
            keyboard_rows.append([create_button(item)])

    if menu_config.get("is_submenu", False):
        navigation_row = [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        if menu_config.get("parent"): navigation_row.insert(0, KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
        keyboard_rows.append(navigation_row)

    return ReplyKeyboardMarkup(keyboard_rows, resize_keyboard=True, one_time_keyboard=False)

async def show_menu(update: Update, user_id: int, menu_key: str, user_data_param: Optional[Dict[str, Any]] = None):
    menu_cfg = MENU_STRUCTURE.get(menu_key)
    if not menu_cfg:
        logger.error(f"Menu key '{menu_key}' not found. Defaulting to main menu for user {user_id}.")
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∫–∞–∑—ã–≤–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=generate_menu_keyboard(BotConstants.MENU_MAIN))
        await firestore_service.set_user_data(user_id, {'current_menu': BotConstants.MENU_MAIN})
        return
    
    await firestore_service.set_user_data(user_id, {'current_menu': menu_key})
    
    menu_title_to_send = menu_cfg["title"]

    if update.message:
        await update.message.reply_text(menu_title_to_send, reply_markup=generate_menu_keyboard(menu_key), disable_web_page_preview=True)
    elif update.callback_query and update.callback_query.message: 
        await update.callback_query.message.reply_text(menu_title_to_send, reply_markup=generate_menu_keyboard(menu_key), disable_web_page_preview=True)
    else: 
        bot_instance = update.get_bot() 
        await bot_instance.send_message(chat_id=user_id, text=menu_title_to_send, reply_markup=generate_menu_keyboard(menu_key), disable_web_page_preview=True)

    logger.info(f"User {user_id} was shown menu '{menu_key}'.")
