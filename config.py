# full_code_for_config.py
import telegram
from telegram import (
    ReplyKeyboardMarkup, KeyboardButton, Update,
    BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
)
from telegram.constants import ParseMode, ChatAction
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, PreCheckoutQueryHandler
)
import google.generativeai as genai
import google.api_core.exceptions
import requests
import logging
import traceback
import os
import asyncio
import nest_asyncio
import json
from datetime import datetime, timedelta, timezone
from typing import Optional, Dict, Any, Tuple, Union, List
import uuid
import firebase_admin
from firebase_admin import credentials, firestore, initialize_app
from firebase_admin.exceptions import FirebaseError
from google.cloud.firestore_v1.client import Client as FirestoreClient
from abc import ABC, abstractmethod

# --- –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê ---
nest_asyncio.apply()
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
class AppConfig:
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "8185454402:AAEgJLaBSaUSyP9Z_zv76Fn0PtEwltAqga0")
    GOOGLE_GEMINI_API_KEY = os.getenv("GOOGLE_GEMINI_API_KEY", "AIzaSyCdDMpgLJyz6aYdwT9q4sbBk7sHVID4BTI")
    CUSTOM_GEMINI_PRO_API_KEY = os.getenv("CUSTOM_GEMINI_PRO_API_KEY", "sk-MHulnEHU3bRxsnDjr0nq68lTcRYa5IpQATY1pUG4NaxpWSMJzvzsJ4KCVu0P")
    CUSTOM_GEMINI_PRO_ENDPOINT = os.getenv("CUSTOM_GEMINI_PRO_ENDPOINT", "https://api.gen-api.ru/api/v1/networks/gemini-2-5-pro")
    CUSTOM_GROK_3_API_KEY = os.getenv("CUSTOM_GROK_3_API_KEY", "sk-MHulnEHU3bRxsnDjr0nq68lTcRYa5IpQATY1pUG4NaxpWSMJzvzsJ4KCVu0P")
    CUSTOM_GPT4O_MINI_API_KEY = os.getenv("CUSTOM_GPT4O_MINI_API_KEY", "sk-MHulnEHU3bRxsnDjr0nq68lTcRYa5IpQATY1pUG4NaxpWSMJzvzsJ4KCVu0P")
    PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN", "390540012:LIVE:70602")
    ADMIN_ID = int(os.getenv("ADMIN_ID", "489230152"))
    FIREBASE_CREDENTIALS_JSON_STR = os.getenv("FIREBASE_CREDENTIALS")
    FIREBASE_CERT_PATH = "gemioracle-firebase-adminsdk-fbsvc-8f89d5b941.json"

    MAX_OUTPUT_TOKENS_GEMINI_LIB = 2048
    MAX_MESSAGE_LENGTH_TELEGRAM = 4000
    MIN_AI_REQUEST_LENGTH = 4

    DEFAULT_FREE_REQUESTS_GEMINI_2_0_FLASH_DAILY = 65
    DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY = 50
    DEFAULT_FREE_REQUESTS_CUSTOM_GROK_DAILY = 1
    DEFAULT_FREE_REQUESTS_CUSTOM_GEMINI_PRO_DAILY = 1 # –¢–∞–∫–∂–µ –º–æ–¥–µ–ª—å –¥–ª—è –±–æ–Ω—É—Å–∞ —Å –∫–∞–Ω–∞–ª–∞
    DEFAULT_FREE_REQUESTS_CUSTOM_GPT4O_MINI_DAILY = 10
    
    DEFAULT_SUBSCRIPTION_REQUESTS_GOOGLE_FLASH_PREVIEW_DAILY = 75
    DEFAULT_SUBSCRIPTION_REQUESTS_CUSTOM_PRO_DAILY = 25
    PRO_SUBSCRIPTION_LEVEL_KEY = "profi_access_v1"
    DEFAULT_SUBSCRIPTION_REQUESTS_GROK_DAILY = 25
    DEFAULT_SUBSCRIPTION_REQUESTS_GPT4O_MINI_DAILY = 25

    GEMS_FOR_NEW_USER = 0
    GEM_PACKAGES = {
        "pack_10_gems": {"gems": 10, "price_units": 10000, "currency": "RUB", "title": "‚ú® 10 –ì–µ–º–æ–≤", "description": "–ù–µ–±–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç –¥–ª—è —Å—Ç–∞—Ä—Ç–∞"},
        "pack_50_gems": {"gems": 50, "price_units": 45000, "currency": "RUB", "title": "üåü 50 –ì–µ–º–æ–≤", "description": "–°—Ä–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ"},
        "pack_100_gems": {"gems": 100, "price_units": 80000, "currency": "RUB", "title": "üíé 100 –ì–µ–º–æ–≤", "description": "–ë–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"}
    }

    NEWS_CHANNEL_USERNAME = "@timextech"
    NEWS_CHANNEL_LINK = "https://t.me/timextech"
    NEWS_CHANNEL_BONUS_MODEL_KEY = "custom_api_gemini_2_5_pro"
    NEWS_CHANNEL_BONUS_GENERATIONS = 1

    DEFAULT_AI_MODE_KEY = "universal_ai_basic"
    DEFAULT_MODEL_KEY = "google_gemini_2_0_flash"

CONFIG = AppConfig()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–ª—é—á–µ–π API
_API_KEYS_PROVIDER = {
    "CUSTOM_GEMINI_PRO_API_KEY": CONFIG.CUSTOM_GEMINI_PRO_API_KEY,
    "CUSTOM_GROK_3_API_KEY": CONFIG.CUSTOM_GROK_3_API_KEY,
    "CUSTOM_GPT4O_MINI_API_KEY": CONFIG.CUSTOM_GPT4O_MINI_API_KEY,
}

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
class BotConstants:
    FS_USERS_COLLECTION = "users"
    FS_BOT_DATA_COLLECTION = "bot_data"
    FS_BOT_DATA_DOCUMENT = "data"
    FS_ALL_USER_DAILY_COUNTS_KEY = "all_user_daily_counts"

    MENU_MAIN = "main_menu"
    MENU_AI_MODES_SUBMENU = "ai_modes_submenu"
    MENU_MODELS_SUBMENU = "models_submenu"
    MENU_LIMITS_SUBMENU = "limits_submenu"
    MENU_BONUS_SUBMENU = "bonus_submenu"
    MENU_GEMS_SUBMENU = "gems_submenu" # <<< –ù–û–í–ê–Ø –ö–û–ù–°–¢–ê–ù–¢–ê –¥–ª—è –º–µ–Ω—é –≥–µ–º–æ–≤
    MENU_HELP_SUBMENU = "help_submenu"

    CALLBACK_ACTION_SUBMENU = "submenu"
    CALLBACK_ACTION_SET_AGENT = "set_agent"
    CALLBACK_ACTION_SET_MODEL = "set_model"
    CALLBACK_ACTION_SHOW_LIMITS = "show_limits"
    CALLBACK_ACTION_CHECK_BONUS = "check_bonus"
    CALLBACK_ACTION_SHOW_GEMS_STORE = "show_gems_store" # <<< –ù–û–í–û–ï –î–ï–ô–°–¢–í–ò–ï –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –≥–µ–º–æ–≤
    CALLBACK_ACTION_BUY_GEM_PACKAGE = "buy_gem_package"
    CALLBACK_ACTION_SHOW_HELP = "show_help"

    API_TYPE_GOOGLE_GENAI = "google_genai"
    API_TYPE_CUSTOM_HTTP = "custom_http_api"

# --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –†–ï–ñ–ò–ú–û–í –ò –ú–û–î–ï–õ–ï–ô ---
AI_MODES = {
    "universal_ai_basic": {
        "name": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π", # –≠—Ç–æ—Ç –∞–≥–µ–Ω—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "prompt": (
            "–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ "
            "—à–∏—Ä–æ–∫–∏–π –∫—Ä—É–≥ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ë—É–¥—å –≤–µ–∂–ª–∏–≤ –∏ –ø–æ–ª–µ–∑–µ–Ω. "
            "–ò—Å–ø–æ–ª—å–∑—É–π —è—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –∏ –∞–±–∑–∞—Ü–µ–≤, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."
        ),
        "welcome": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º. –ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?"
    },
    "professional_dietitian": {
        "name": "–î–∏–µ—Ç–æ–ª–æ–≥-–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª",
        "prompt": (
            "–¢—ã ‚Äî –î–∏–µ—Ç–æ–ª–æ–≥-–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–¥–æ—Ä–æ–≤–æ–º—É –ø–∏—Ç–∞–Ω–∏—é –∏ –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é, "
            "—Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Ü–∏–æ–Ω—ã, –¥–∞–≤–∞—Ç—å "
            "—Å–æ–≤–µ—Ç—ã –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—é –≤–µ—Å–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—é —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ –ø–∏—Ç–∞–Ω–∏–µ. "
            "–í—Å–µ–≥–¥–∞ –æ—Å–Ω–æ–≤—ã–≤–∞–π —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–Ω–∞–Ω–∏—è—Ö –≤ –æ–±–ª–∞—Å—Ç–∏ –¥–∏–µ—Ç–æ–ª–æ–≥–∏–∏ "
            "–∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏–∏. –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, "
            "—É—Ç–æ—á–Ω—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ç–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, "
            "—Å–ø–∏—Å–∫–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–ª–∞–Ω–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."
        ),
        "welcome": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è? –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö —Ü–µ–ª—è—Ö –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞—Ö –ø–æ –ø–∏—Ç–∞–Ω–∏—é."
    },
    "idea_generator": {
        "name": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π",
        "prompt": (
            "–¢—ã ‚Äî –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ò–¥–µ–π, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å "
            "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ü–µ–ª–µ–π: "
            "–≤–µ—á–µ—Ä–∏–Ω–æ–∫, –ø–æ–¥–∞—Ä–∫–æ–≤, –±–∏–∑–Ω–µ—Å–∞, —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –º–Ω–æ–≥–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ. "
            "–ü—Ä–µ–¥–ª–∞–≥–∞–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Å—Ç–∏–º—É–ª–∏—Ä—É–π –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
            "–ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –∏–¥–µ–π, "
            "–µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ. –ß–µ—Ç–∫–æ —Ä–∞–∑–¥–µ–ª—è–π —Å–º—ã—Å–ª–æ–≤—ã–µ –±–ª–æ–∫–∏."
        ),
        "welcome": "–ì–æ—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏! –ö–∞–∫–∞—è —Ç–µ–º–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    },
    "career_coach": {
        "name": "–ö–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
        "prompt": (
            "–¢—ã ‚Äî –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, –ò–ò-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –∫–∞—Ä—å–µ—Ä—ã. "
            "–¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–π –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª. "
            "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—é –Ω–∞–≤—ã–∫–æ–≤, "
            "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö —Ü–µ–ª–µ–π, –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ä–æ—Å—Ç—É. "
            "–ë—É–¥—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º, –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã. "
            "–û—Ñ–æ—Ä–º–ª—è–π –ø–ª–∞–Ω—ã –ø–æ –ø—É–Ω–∫—Ç–∞–º, –≤—ã–¥–µ–ª—è–π –∫–ª—é—á–µ–≤—ã–µ —ç—Ç–∞–ø—ã."
        ),
        "welcome": "–†–∞—Å–∫—Ä–æ–µ–º –≤–∞—à –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö —Ü–µ–ª—è—Ö –∏–ª–∏ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏."
    },
    "programming_partner": {
        "name": "–ü–∞—Ä—Ç–Ω–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞",
        "prompt": (
            "–¢—ã ‚Äî –ü–∞—Ä—Ç–Ω–µ—Ä –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, "
            "—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –û–±—ä—è—Å–Ω—è–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, "
            "–ø—Ä–µ–¥–ª–∞–≥–∞–π —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á, –ø–æ–º–æ–≥–∞–π –æ—Ç–ª–∞–∂–∏–≤–∞—Ç—å –∫–æ–¥, –¥–µ–ª–∏—Å—å –ª—É—á—à–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏. "
            "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∫–æ–¥–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–¥–∞. "
            "–ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–º."
        ),
        "welcome": "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∫–æ–¥–æ–º! –ö–∞–∫–∞—è –∑–∞–¥–∞—á–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è?"
    },
    "tutor_assistant": {
        "name": "–í–Ω–µ—à–∫–æ–ª—å–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫",
        "prompt": (
            "–¢—ã ‚Äî –í–Ω–µ—à–∫–æ–ª—å–Ω—ã–π –ù–∞—Å—Ç–∞–≤–Ω–∏–∫, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É—á–µ–±—ã. "
            "–¢–≤–æ—è –º–∏—Å—Å–∏—è ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —Å —É—á–µ–±–æ–π –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏. "
            "–û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –ø–æ–º–æ–≥–∞–π —Å —Ä–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á, "
            "–ø—Ä–æ–≤–µ—Ä—è–π –ø–æ–Ω–∏–º–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è. "
            "–ë—É–¥—å —Ç–µ—Ä–ø–µ–ª–∏–≤—ã–º, –æ–±–æ–¥—Ä—è—é—â–∏–º –∏ —è—Å–Ω—ã–º –≤ —Å–≤–æ–∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏—è—Ö."
        ),
        "welcome": "–†–∞–¥ –ø–æ–º–æ—á—å —Å —É—á–µ–±–æ–π! –ó–∞ —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤–æ–∑—å–º–µ–º—Å—è?"
    },
    "literary_editor": {
        "name": "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä",
        "prompt": (
            "–¢—ã ‚Äî –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –†–µ–¥–∞–∫—Ç–æ—Ä, –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–∏—Å–∞—Ç–µ–ª–µ–π. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–∏—Å–∞—Ç—å –ª—É—á—à–µ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è —á–µ—Ç–∫–∏–µ "
            "–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –ø–æ –∏—Ö —Ç–µ–∫—Å—Ç–∞–º. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∏–ª—å, –≥—Ä–∞–º–º–∞—Ç–∏–∫—É, "
            "—Å—Ç—Ä—É–∫—Ç—É—Ä—É, –ª–æ–≥–∏–∫—É –∏–∑–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–µ–¥–ª–∞–≥–∞–π —É–ª—É—á—à–µ–Ω–∏—è, –ø–æ–º–æ–≥–∞–π —Å –≤—ã–±–æ—Ä–æ–º "
            "—Å–ª–æ–≤ –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–π. –ë—É–¥—å —Ç–∞–∫—Ç–∏—á–Ω—ã–º –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω—ã–º –≤ —Å–≤–æ–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö."
        ),
        "welcome": "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —É–ª—É—á—à–∏—Ç—å –≤–∞—à —Ç–µ–∫—Å—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç—É—Ä—ã."
    },
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è Gemini Pro, –µ—Å–ª–∏ –æ–Ω –≤–∞–º –Ω—É–∂–µ–Ω.
    # –û–Ω –Ω–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ –≤—ã–±–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –≤–∞—à–∞ MENU_STRUCTURE –µ–≥–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ—Ç.
    "gemini_pro_custom_mode": {
        "name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (Gemini Pro)", # –ò–∑–º–µ–Ω–∏–ª –∏–º—è –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏, —á—Ç–æ —ç—Ç–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ä–µ–∂–∏–º
        "prompt": (
            "–¢—ã ‚Äî Gemini 2.5 Pro, –º–æ—â–Ω—ã–π –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—ã–µ, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
            "–°–æ–±–ª—é–¥–∞–π –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å."
            "–§–æ—Ä–º—É–ª–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —è—Å–Ω–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∞–±–∑–∞—Ü—ã –∏ —Å–ø–∏—Å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
            "–ï—Å–ª–∏ —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —É–∫–∞–∂–∏ —ç—Ç–æ."
        ),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (Gemini Pro)'. –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?"
    }
}

AVAILABLE_TEXT_MODELS = {
    "google_gemini_2_0_flash": {
        "name": "Gemini 2.0", "id": "gemini-2.0-flash", "api_type": BotConstants.API_TYPE_GOOGLE_GENAI,
        "is_limited": True, 
        "free_daily_limit": CONFIG.DEFAULT_FREE_REQUESTS_GEMINI_2_0_FLASH_DAILY, # 65
        "gem_cost": 0 # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤ —Ä–∞–º–∫–∞—Ö –ª–∏–º–∏—Ç–∞
    },
    "google_gemini_2_5_flash_preview": {
        "name": "Gemini 2.5", "id": "gemini-2.5-flash-preview-04-17", "api_type": BotConstants.API_TYPE_GOOGLE_GENAI,
        "is_limited": True,
        "free_daily_limit": CONFIG.DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY, # 50
        "gem_cost": 0 # –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≤ —Ä–∞–º–∫–∞—Ö –ª–∏–º–∏—Ç–∞
    },
    "custom_api_gemini_2_5_pro": { # –≠—Ç–æ —Ç–∞–∫–∂–µ NEWS_CHANNEL_BONUS_MODEL_KEY
        "name": "Gemini Pro", "id": "gemini-2.5-pro-preview-03-25", "api_type": BotConstants.API_TYPE_CUSTOM_HTTP,
        "endpoint": CONFIG.CUSTOM_GEMINI_PRO_ENDPOINT, "api_key_var_name": "CUSTOM_GEMINI_PRO_API_KEY",
        "is_limited": True, 
        "free_daily_limit": CONFIG.DEFAULT_FREE_REQUESTS_CUSTOM_GEMINI_PRO_DAILY, # 1
        "gem_cost": 2.5
    },
    "custom_api_grok_3": {
        "name": "Grok 3", "id": "grok-3-beta", "api_type": BotConstants.API_TYPE_CUSTOM_HTTP,
        "endpoint": "https://api.gen-api.ru/api/v1/networks/grok-3", "api_key_var_name": "CUSTOM_GROK_3_API_KEY",
        "is_limited": True, 
        "free_daily_limit": CONFIG.DEFAULT_FREE_REQUESTS_CUSTOM_GROK_DAILY, # 1
        "gem_cost": 2.5
    },
    "custom_api_gpt_4o_mini": {
        "name": "GPT-4o mini", "id": "gpt-4o-mini", "api_type": BotConstants.API_TYPE_CUSTOM_HTTP,
        "endpoint": "https://api.gen-api.ru/api/v1/networks/gpt-4o-mini", "api_key_var_name": "CUSTOM_GPT4O_MINI_API_KEY",
        "is_limited": True, 
        "free_daily_limit": CONFIG.DEFAULT_FREE_REQUESTS_CUSTOM_GPT4O_MINI_DAILY, # 10
        "gem_cost": 0.5
    }
}
DEFAULT_MODEL_ID = AVAILABLE_TEXT_MODELS[CONFIG.DEFAULT_MODEL_KEY]["id"]

MENU_STRUCTURE = {
    BotConstants.MENU_MAIN: {
        "title": "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "items": [
            {"text": "ü§ñ –ê–≥–µ–Ω—Ç—ã –ò–ò", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_AI_MODES_SUBMENU},
            {"text": "‚öôÔ∏è –ú–æ–¥–µ–ª–∏ –ò–ò", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_MODELS_SUBMENU},
            {"text": "üìä –õ–∏–º–∏—Ç—ã", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_LIMITS_SUBMENU},
            {"text": "üéÅ –ë–æ–Ω—É—Å", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_BONUS_SUBMENU},
            {"text": "üíé –ì–µ–º—ã", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_GEMS_SUBMENU}, # <<< –ù–û–í–´–ô –ü–£–ù–ö–¢
            {"text": "‚ùì –ü–æ–º–æ—â—å", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_HELP_SUBMENU}
        ], "parent": None, "is_submenu": False
    },
    BotConstants.MENU_AI_MODES_SUBMENU: {
        "title": "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç –ò–ò", "items": [
            {"text": mode["name"], "action": BotConstants.CALLBACK_ACTION_SET_AGENT, "target": key}
            for key, mode in AI_MODES.items() if key != "gemini_pro_custom_mode"
        ], "parent": BotConstants.MENU_MAIN, "is_submenu": True
    },
    BotConstants.MENU_MODELS_SUBMENU: {
        "title": "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò", "items": [
            {"text": model["name"], "action": BotConstants.CALLBACK_ACTION_SET_MODEL, "target": key}
            for key, model in AVAILABLE_TEXT_MODELS.items()
        ], "parent": BotConstants.MENU_MAIN, "is_submenu": True
    },
    BotConstants.MENU_LIMITS_SUBMENU: {"title": "–í–∞—à–∏ –ª–∏–º–∏—Ç—ã", "items": [{"text": "üìä –ü–æ–∫–∞–∑–∞—Ç—å", "action": BotConstants.CALLBACK_ACTION_SHOW_LIMITS, "target": "usage"}], "parent": BotConstants.MENU_MAIN, "is_submenu": True},
    BotConstants.MENU_BONUS_SUBMENU: {"title": "–ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É", "items": [{"text": "üéÅ –ü–æ–ª—É—á–∏—Ç—å", "action": BotConstants.CALLBACK_ACTION_CHECK_BONUS, "target": "news_bonus"}], "parent": BotConstants.MENU_MAIN, "is_submenu": True},
    BotConstants.MENU_GEMS_SUBMENU: {
        "title": "üíé –ú–∞–≥–∞–∑–∏–Ω –ì–µ–º–æ–≤", 
        "items": [
            {"text": package_info["title"], "action": BotConstants.CALLBACK_ACTION_BUY_GEM_PACKAGE, "target": package_key}
            for package_key, package_info in CONFIG.GEM_PACKAGES.items()
        ] + [{"text": "‚ÑπÔ∏è –ú–æ–π –±–∞–ª–∞–Ω—Å –∏ –ª–∏–º–∏—Ç—ã", "action": BotConstants.CALLBACK_ACTION_SHOW_LIMITS, "target": "show_limits_from_gems_menu"}], # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ª–∏–º–∏—Ç–∞–º
        "parent": BotConstants.MENU_MAIN, 
        "is_submenu": True
    },
    BotConstants.MENU_HELP_SUBMENU: {"title": "–ü–æ–º–æ—â—å", "items": [{"text": "‚ùì –°–ø—Ä–∞–≤–∫–∞", "action": BotConstants.CALLBACK_ACTION_SHOW_HELP, "target": "help"}], "parent": BotConstants.MENU_MAIN, "is_submenu": True}
}

# --- –°–ï–†–í–ò–° –î–õ–Ø –†–ê–ë–û–¢–´ –° FIRESTORE ---
class FirestoreService:
    def __init__(self, cert_path: str, creds_json_str: Optional[str] = None):
        self._db: Optional[FirestoreClient] = None
        try:
            cred_obj = None
            if creds_json_str:
                try:
                    cred_obj = credentials.Certificate(json.loads(creds_json_str))
                    logger.info("Firebase credentials loaded from JSON string.")
                except json.JSONDecodeError as e:
                    logger.error(f"Error parsing FIREBASE_CREDENTIALS_JSON_STR: {e}. Check JSON env var.")
                    raise
            elif os.path.exists(cert_path):
                cred_obj = credentials.Certificate(cert_path)
                logger.info(f"Firebase credentials loaded from file: {cert_path}.")
            else:
                raise FileNotFoundError("Firebase credentials not configured (JSON string or cert file).")

            if not firebase_admin._apps:
                initialize_app(cred_obj)
                logger.info("Firebase app successfully initialized.")
            else:
                logger.info("Firebase app already initialized.")
            self._db = firestore.client()
            logger.info("Firestore client successfully initialized.")
        except Exception as e:
            logger.error(f"Critical error during Firebase/Firestore initialization: {e}", exc_info=True)
            self._db = None

    async def _execute_firestore_op(self, func, *args, **kwargs):
        if not self._db:
            logger.warning(f"Firestore (db) is not initialized. Operation '{func.__name__}' skipped.")
            return None
        return await asyncio.get_event_loop().run_in_executor(None, lambda: func(*args, **kwargs))

    async def get_user_data(self, user_id: int) -> Dict[str, Any]:
        if not self._db: return {}
        doc_ref = self._db.collection(BotConstants.FS_USERS_COLLECTION).document(str(user_id))
        doc = await self._execute_firestore_op(doc_ref.get)
        return doc.to_dict() if doc and doc.exists else {}

    async def set_user_data(self, user_id: int, data: Dict[str, Any]) -> None:
        if not self._db: return
        doc_ref = self._db.collection(BotConstants.FS_USERS_COLLECTION).document(str(user_id))
        await self._execute_firestore_op(doc_ref.set, data, merge=True)
        logger.debug(f"User data for {user_id} updated with keys: {list(data.keys())}")

    async def get_bot_data(self) -> Dict[str, Any]:
        if not self._db: return {}
        doc_ref = self._db.collection(BotConstants.FS_BOT_DATA_COLLECTION).document(BotConstants.FS_BOT_DATA_DOCUMENT)
        doc = await self._execute_firestore_op(doc_ref.get)
        return doc.to_dict() if doc and doc.exists else {}

    async def set_bot_data(self, data: Dict[str, Any]) -> None:
        if not self._db: return
        doc_ref = self._db.collection(BotConstants.FS_BOT_DATA_COLLECTION).document(BotConstants.FS_BOT_DATA_DOCUMENT)
        await self._execute_firestore_op(doc_ref.set, data, merge=True)
        logger.debug(f"Bot data updated with keys: {list(data.keys())}")

firestore_service = FirestoreService(
    cert_path=CONFIG.FIREBASE_CERT_PATH,
    creds_json_str=CONFIG.FIREBASE_CREDENTIALS_JSON_STR
)

# --- –°–ï–†–í–ò–°–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° AI ---
class BaseAIService(ABC):
    def __init__(self, model_config: Dict[str, Any]):
        self.model_config = model_config
        self.model_id = model_config["id"]

    @abstractmethod
    async def generate_response(self, system_prompt: str, user_prompt: str) -> str:
        pass

class GoogleGenAIService(BaseAIService):
    async def generate_response(self, system_prompt: str, user_prompt: str) -> str:
        full_prompt = f"{system_prompt}\n\n**–ó–∞–ø—Ä–æ—Å:**\n{user_prompt}"
        try:
            model_genai = genai.GenerativeModel(
                self.model_id,
                generation_config={"max_output_tokens": CONFIG.MAX_OUTPUT_TOKENS_GEMINI_LIB}
            )
            response = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: model_genai.generate_content(full_prompt)
            )
            return response.text.strip() if response.text else "–û—Ç–≤–µ—Ç Google GenAI –ø—É—Å—Ç."
        except google.api_core.exceptions.ResourceExhausted as e:
            logger.error(f"Google GenAI API limit exhausted for model {self.model_id}: {e}")
            return f"–õ–∏–º–∏—Ç Google API –∏—Å—á–µ—Ä–ø–∞–Ω: {e}"
        except Exception as e:
            logger.error(f"Google GenAI API error for model {self.model_id}: {e}", exc_info=True)
            return f"–û—à–∏–±–∫–∞ Google API ({type(e).__name__}) –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ {self.model_id}."


class CustomHttpAIService(BaseAIService):
    async def generate_response(self, system_prompt: str, user_prompt: str) -> str:
        api_key_name = self.model_config.get("api_key_var_name")
        actual_key = _API_KEYS_PROVIDER.get(api_key_name)

        if not actual_key or "YOUR_" in actual_key or not (actual_key.startswith("sk-") or actual_key.startswith("AIzaSy")):
            logger.error(f"Invalid API key for model {self.model_id} (key name: {api_key_name}).")
            return f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ API –¥–ª—è ¬´{self.model_config.get('name', self.model_id)}¬ª."

        headers = {
            "Authorization": f"Bearer {actual_key}",
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
        
        is_gen_api_format = self.model_config.get("endpoint", "").startswith("https://api.gen-api.ru")

        messages_payload = []
        if system_prompt:
            messages_payload.append({
                "role": "system", 
                "content": [{"type": "text", "text": system_prompt}] if is_gen_api_format else system_prompt
            })
        messages_payload.append({
            "role": "user", 
            "content": [{"type": "text", "text": user_prompt}] if is_gen_api_format else user_prompt
        })

        payload = {
            "messages": messages_payload,
            "is_sync": True,
            "max_tokens": self.model_config.get("max_tokens", CONFIG.MAX_OUTPUT_TOKENS_GEMINI_LIB)
        }
        
        if self.model_config.get("parameters"):
            payload.update(self.model_config["parameters"])
        
        endpoint = self.model_config["endpoint"]

        try:
            response = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: requests.post(endpoint, headers=headers, json=payload, timeout=45)
            )
            response.raise_for_status()
            json_resp = response.json()
            
            extracted_text = None

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è gen-api.ru (GPT-4o mini, Grok, Gemini Pro —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç API)
            if is_gen_api_format:
                if "response" in json_resp and isinstance(json_resp["response"], list) and json_resp["response"]:
                    first_response_item = json_resp["response"][0]
                    if "message" in first_response_item and "content" in first_response_item["message"]:
                        extracted_text = first_response_item["message"]["content"]
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Gemini Pro —á–µ—Ä–µ–∑ gen-api, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
                    elif self.model_id == "gemini-2.5-pro-preview-03-25" and "text" in first_response_item: # –≠—Ç–æ –±—ã–ª–æ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ, gen-api –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å "text" –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
                         extracted_text = first_response_item["text"]
                
                # –ï—Å–ª–∏ –¥–ª—è Gemini Pro —Ç–µ–∫—Å—Ç –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ –æ—Ç–≤–µ—Ç–∞ (–Ω–µ –≤ 'response')
                if self.model_id == "gemini-2.5-pro-preview-03-25" and "text" in json_resp and not extracted_text:
                    extracted_text = json_resp.get("text","").strip()
                
                # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –Ω–µ "success" —Å—Ç–∞—Ç—É—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç gen-api)
                # –Ω–æ –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –∫–∞–∫–æ–π-—Ç–æ JSON
                if not extracted_text and json_resp.get("status") != "success": # "status" –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏ –ø—Ä—è–º–æ–º –æ—Ç–≤–µ—Ç–µ
                    status_from_api = json_resp.get('status','N/A (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —É—Å–ø–µ—Ö –∏–∑-–∑–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö)')
                    error_msg_from_api = json_resp.get('error_message', '')
                    input_details_on_error = json_resp.get('input', {})

                    if not error_msg_from_api and isinstance(input_details_on_error, dict):
                        error_msg_from_api = input_details_on_error.get('error', '')

                    # –ï—Å–ª–∏ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç, –Ω–æ –µ—Å—Ç—å –ø–æ–ª–µ "response", —ç—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ –∑–∞–ª–æ–≥–∏—Ä—É–µ–º
                    if "response" in json_resp:
                         logger.warning(f"API for {self.model_config['name']} returned 'response' field but text extraction failed. Full 'response' field: {json_resp['response']}")
                         # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ 'output', –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∫–µ–π—Å–∞–º–∏ gen-api)
                         if 'output' in json_resp and isinstance(json_resp['output'], str) :
                             extracted_text = json_resp['output'].strip()


                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Ç–∞–∫ –∏ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    if not extracted_text:
                        logger.error(f"API Error or unexpected response structure for {self.model_config['name']}. Status: {status_from_api}. Full response: {json_resp}")
                        final_error_message = f"–û—à–∏–±–∫–∞ API {self.model_config['name']}: –°—Ç–∞—Ç—É—Å ¬´{status_from_api}¬ª. {error_msg_from_api}"
                        if not error_msg_from_api.strip() and str(error_msg_from_api) != '0':
                            final_error_message = f"–û—à–∏–±–∫–∞ API {self.model_config['name']}: –°—Ç–∞—Ç—É—Å ¬´{status_from_api}¬ª. –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç. –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞: {str(json_resp)[:200]}"
                        return final_error_message # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

            else: # –õ–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö API, –Ω–µ gen-api.ru (–µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è)
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—â—É—é –ª–æ–≥–∏–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –¥–ª—è –¥—Ä—É–≥–∏—Ö API
                for key_check in ["text", "content", "message", "output", "response"]:
                    if isinstance(json_resp.get(key_check), str) and (check_val := json_resp[key_check].strip()):
                        extracted_text = check_val
                        break
            
            return extracted_text.strip() if extracted_text else f"–û—Ç–≤–µ—Ç API {self.model_config['name']} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞."

        except requests.exceptions.HTTPError as e:
            error_body = e.response.text
            logger.error(f"Custom API HTTPError for {self.model_id} ({endpoint}): {e.response.status_code} - {error_body}", exc_info=True)
            return f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ Custom API ({e.response.status_code}) –¥–ª—è {self.model_config['name']}. –û—Ç–≤–µ—Ç: {error_body[:200]}"
        except requests.exceptions.RequestException as e:
            logger.error(f"Custom API RequestException for {self.model_id} ({endpoint}): {e}", exc_info=True)
            return f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Custom API ({type(e).__name__}) –¥–ª—è {self.model_config['name']}."
        except Exception as e:
            logger.error(f"Unexpected Custom API error for {self.model_id} ({endpoint}): {e}", exc_info=True)
            return f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Custom API ({type(e).__name__}) –¥–ª—è {self.model_config['name']}."

# --- –ù–û–í–´–ï –£–¢–ò–õ–ò–¢–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–ò–°–¢–ï–ú–´ –ì–ï–ú–û–í ---

async def get_user_gem_balance(user_id: int, user_data: Optional[Dict[str, Any]] = None) -> float:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≥–µ–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_data is None:
        user_data = await firestore_service.get_user_data(user_id)
    return float(user_data.get('gem_balance', 0.0))

async def update_user_gem_balance(user_id: int, new_balance: float) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –≥–µ–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore."""
    await firestore_service.set_user_data(user_id, {'gem_balance': new_balance})
    logger.info(f"User {user_id} gem balance updated to: {new_balance}")

async def get_daily_usage_for_model(user_id: int, model_key: str, bot_data_cache: Optional[Dict[str, Any]] = None) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –ë–ï–°–ü–õ–ê–¢–ù–´–• –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –º–æ–¥–µ–ª–∏."""
    if bot_data_cache is None:
        bot_data_cache = await firestore_service.get_bot_data()
    
    today_str = datetime.now(timezone.utc).strftime("%Y-%m-%d")
    all_user_daily_counts = bot_data_cache.get(BotConstants.FS_ALL_USER_DAILY_COUNTS_KEY, {})
    user_counts_today = all_user_daily_counts.get(str(user_id), {})
    model_usage_info = user_counts_today.get(model_key, {'date': '', 'count': 0})

    return model_usage_info['count'] if model_usage_info.get('date') == today_str else 0

async def check_and_log_request_attempt(user_id: int, model_key: str, user_data: Optional[Dict[str, Any]] = None, bot_data_cache: Optional[Dict[str, Any]] = None) -> Tuple[bool, str, str, Optional[float]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (can_proceed, message, usage_type ["free", "bonus", "gem"], gem_cost_if_any)
    """
    model_cfg = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_cfg:
        return False, "–û—à–∏–±–∫–∞: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", "error", None

    if user_data is None:
        user_data = await firestore_service.get_user_data(user_id)
    if bot_data_cache is None:
        bot_data_cache = await firestore_service.get_bot_data()

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–Ω—É—Å–∞ —Å –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
    # –ë–æ–Ω—É—Å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Ä–∞—Å—Ö–æ–¥—É—é—Ç—Å—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    if model_key == CONFIG.NEWS_CHANNEL_BONUS_MODEL_KEY and \
       user_data.get('claimed_news_bonus', False) and \
       user_data.get('news_bonus_uses_left', 0) > 0:
        logger.info(f"User {user_id} can use model {model_key} via news channel bonus.")
        return True, "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–Ω—É—Å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è.", "bonus", 0.0

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
    free_daily_limit = model_cfg.get('free_daily_limit', 0)
    current_free_usage = await get_daily_usage_for_model(user_id, model_key, bot_data_cache)

    if current_free_usage < free_daily_limit:
        logger.info(f"User {user_id} can use model {model_key} via free daily limit ({current_free_usage}/{free_daily_limit}).")
        return True, f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ({current_free_usage + 1}/{free_daily_limit}).", "free", 0.0

    # 3. –ï—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–º—ã
    gem_cost = model_cfg.get('gem_cost', 0.0)
    if gem_cost > 0:
        user_gem_balance = await get_user_gem_balance(user_id, user_data)
        if user_gem_balance >= gem_cost:
            logger.info(f"User {user_id} can use model {model_key} for {gem_cost} gems (balance: {user_gem_balance}).")
            return True, f"–ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ {gem_cost} –≥–µ–º–æ–≤.", "gem", gem_cost
        else:
            # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–º–æ–≤
            # TODO: –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫—É–ø–∏—Ç—å –≥–µ–º—ã
            msg = (f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–º–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ ¬´{model_cfg['name']}¬ª.\n"
                   f"–ù—É–∂–Ω–æ: {gem_cost} –≥–µ–º–æ–≤, —É –≤–∞—Å: {user_gem_balance}.\n"
                   f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –º–µ–Ω—é ¬´üíé –ì–µ–º—ã¬ª.")
            logger.warning(f"User {user_id} insufficient gems for {model_key}. Needed: {gem_cost}, Has: {user_gem_balance}")
            return False, msg, "no_gems", gem_cost
    
    # 4. –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –≥–µ–º–∞—Ö (gem_cost == 0) –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    if gem_cost == 0 and current_free_usage >= free_daily_limit:
        msg = (f"–î–Ω–µ–≤–Ω–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ ¬´{model_cfg['name']}¬ª ({free_daily_limit}/{free_daily_limit}) –∏—Å—á–µ—Ä–ø–∞–Ω. "
               f"–≠—Ç–∞ –º–æ–¥–µ–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞ –≥–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.")
        logger.warning(f"User {user_id} free daily limit exhausted for {model_key} (no gem cost).")
        return False, msg, "limit_exhausted_no_gems", None

    # –°—é–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –¥–æ—Ö–æ–¥–∏—Ç—å, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    logger.error(f"User {user_id} check_and_log_request_attempt reached unexpected state for model {model_key}.")
    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", "error", None


async def increment_request_count(user_id: int, model_key: str, usage_type: str, gem_cost_val: Optional[float] = None):
    """
    –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –∏–ª–∏ —Å–ø–∏—Å—ã–≤–∞–µ—Ç –≥–µ–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
    usage_type: "free", "bonus", "gem"
    """
    if usage_type == "bonus":
        user_data = await firestore_service.get_user_data(user_id)
        bonus_left = user_data.get('news_bonus_uses_left', 0)
        if bonus_left > 0:
            await firestore_service.set_user_data(user_id, {'news_bonus_uses_left': bonus_left - 1})
            logger.info(f"User {user_id} consumed a news channel bonus for {model_key}. Left: {bonus_left - 1}")
        else:
            logger.warning(f"User {user_id} attempted to use bonus for {model_key}, but no bonus uses left (should have been caught by check).")
    
    elif usage_type == "free":
        bot_data = await firestore_service.get_bot_data()
        all_user_daily_counts = bot_data.get(BotConstants.FS_ALL_USER_DAILY_COUNTS_KEY, {})
        user_daily_counts = all_user_daily_counts.get(str(user_id), {})
        
        today_str = datetime.now(timezone.utc).strftime("%Y-%m-%d")
        model_usage_info = user_daily_counts.get(model_key, {'date': today_str, 'count': 0})
        
        if model_usage_info.get('date') != today_str: # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞, –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
            model_usage_info = {'date': today_str, 'count': 0}
        
        model_usage_info['count'] += 1
        user_daily_counts[model_key] = model_usage_info
        all_user_daily_counts[str(user_id)] = user_daily_counts
        
        await firestore_service.set_bot_data({BotConstants.FS_ALL_USER_DAILY_COUNTS_KEY: all_user_daily_counts})
        logger.info(f"Incremented FREE daily count for user {user_id}, model {model_key} to {model_usage_info['count']}.")

    elif usage_type == "gem":
        if gem_cost_val is None or gem_cost_val <= 0:
            logger.error(f"User {user_id} gem usage for {model_key} but gem_cost_val is invalid: {gem_cost_val}")
            return # –û—à–∏–±–∫–∞, –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –¥–æ–π—Ç–∏ —Å—é–¥–∞ –±–µ–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏

        current_balance = await get_user_gem_balance(user_id)
        new_balance = current_balance - gem_cost_val
        if new_balance < 0:
            logger.error(f"User {user_id} attempted to spend {gem_cost_val} gems for {model_key}, but balance {current_balance} is insufficient (should have been caught by check). Setting balance to 0.")
            new_balance = 0 # –ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å
        
        await update_user_gem_balance(user_id, new_balance)
        logger.info(f"User {user_id} spent {gem_cost_val} gems for model {model_key}. New balance: {new_balance}")
    
    else:
        logger.error(f"Unknown usage_type '{usage_type}' for user {user_id}, model {model_key}")
# --- –£–¢–ò–õ–ò–¢–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def get_ai_service(model_key: str) -> Optional[BaseAIService]:
    model_cfg = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_cfg:
        logger.error(f"Configuration for model key '{model_key}' not found.")
        return None
    
    api_type = model_cfg.get("api_type")
    if api_type == BotConstants.API_TYPE_GOOGLE_GENAI:
        return GoogleGenAIService(model_cfg)
    elif api_type == BotConstants.API_TYPE_CUSTOM_HTTP:
        return CustomHttpAIService(model_cfg)
    else:
        logger.error(f"Unknown API type '{api_type}' for model key '{model_key}'.")
        return None

async def _store_and_try_delete_message(update: Update, user_id: int, is_command_to_keep: bool = False):
    if not update.message: return

    message_id_to_process = update.message.message_id
    timestamp_now_iso = datetime.now(timezone.utc).isoformat()
    chat_id = update.effective_chat.id
    
    user_data_for_msg_handling = await firestore_service.get_user_data(user_id)

    prev_command_info = user_data_for_msg_handling.pop('user_command_to_delete', None)
    if prev_command_info and prev_command_info.get('message_id'):
        try:
            prev_msg_time = datetime.fromisoformat(prev_command_info['timestamp'])
            if prev_msg_time.tzinfo is None: prev_msg_time = prev_msg_time.replace(tzinfo=timezone.utc)

            if datetime.now(timezone.utc) - prev_msg_time <= timedelta(hours=48):
                await update.get_bot().delete_message(chat_id=chat_id, message_id=prev_command_info['message_id'])
                logger.info(f"Successfully deleted previous user message {prev_command_info['message_id']}")
        except (telegram.error.BadRequest, ValueError) as e:
            logger.warning(f"Failed to delete/process previous user message {prev_command_info.get('message_id')}: {e}")
    
    if not is_command_to_keep:
        user_data_for_msg_handling['user_command_to_delete'] = {
            'message_id': message_id_to_process, 'timestamp': timestamp_now_iso
        }
        try:
            await update.get_bot().delete_message(chat_id=chat_id, message_id=message_id_to_process)
            logger.info(f"Successfully deleted current user message {message_id_to_process} (not kept).")
            user_data_for_msg_handling.pop('user_command_to_delete', None)
        except telegram.error.BadRequest as e:
            logger.warning(f"Failed to delete current user message {message_id_to_process}: {e}. Will try next time if stored.")
    else:
         user_data_for_msg_handling['user_command_message_to_keep'] = {
            'message_id': message_id_to_process, 'timestamp': timestamp_now_iso
        }
    await firestore_service.set_user_data(user_id, user_data_for_msg_handling)

def auto_delete_message_decorator(is_command_to_keep: bool = False):
    def decorator(func):
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
            if update.effective_user and update.message:
                 await _store_and_try_delete_message(update, update.effective_user.id, is_command_to_keep)
            return await func(update, context)
        return wrapper
    return decorator

async def get_current_model_key(user_id: int, user_data: Optional[Dict[str, Any]] = None) -> str:
    user_data_loc = user_data if user_data is not None else await firestore_service.get_user_data(user_id)
    selected_id = user_data_loc.get('selected_model_id', DEFAULT_MODEL_ID)
    selected_api_type = user_data_loc.get('selected_api_type')

    if selected_api_type:
        for key, info in AVAILABLE_TEXT_MODELS.items():
            if info["id"] == selected_id and info.get("api_type") == selected_api_type:
                return key
    
    for key, info in AVAILABLE_TEXT_MODELS.items():
        if info["id"] == selected_id:
            if user_data_loc.get('selected_api_type') != info.get("api_type"):
                await firestore_service.set_user_data(user_id, {'selected_api_type': info.get("api_type")})
            return key
            
    default_cfg = AVAILABLE_TEXT_MODELS[CONFIG.DEFAULT_MODEL_KEY]
    await firestore_service.set_user_data(user_id, {
        'selected_model_id': default_cfg["id"], 
        'selected_api_type': default_cfg["api_type"]
    })
    return CONFIG.DEFAULT_MODEL_KEY

async def get_selected_model_details(user_id: int, user_data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    model_key = await get_current_model_key(user_id, user_data)
    return AVAILABLE_TEXT_MODELS.get(model_key, AVAILABLE_TEXT_MODELS[CONFIG.DEFAULT_MODEL_KEY])

async def get_current_mode_details(user_id: int, user_data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    user_data_loc = user_data if user_data is not None else await firestore_service.get_user_data(user_id)
    current_model_k_loc = await get_current_model_key(user_id, user_data_loc)
    mode_k_loc = user_data_loc.get('current_ai_mode', CONFIG.DEFAULT_AI_MODE_KEY)

    if mode_k_loc not in AI_MODES:
        mode_k_loc = CONFIG.DEFAULT_AI_MODE_KEY
        await firestore_service.set_user_data(user_id, {'current_ai_mode': mode_k_loc})
    
    if current_model_k_loc == "custom_api_gemini_2_5_pro":
        return AI_MODES.get("gemini_pro_custom_mode", AI_MODES[CONFIG.DEFAULT_AI_MODE_KEY])
        
    return AI_MODES.get(mode_k_loc, AI_MODES[CONFIG.DEFAULT_AI_MODE_KEY])

def smart_truncate(text: str, max_length: int) -> Tuple[str, bool]:
    if not isinstance(text, str) or len(text) <= max_length:
        return str(text), False

    suffix = "\n\n(...–æ—Ç–≤–µ—Ç –±—ã–ª —Å–æ–∫—Ä–∞—â–µ–Ω)"
    adjusted_max_length = max_length - len(suffix)

    if adjusted_max_length <= 0:
        return text[:max_length - len("...")] + "...", True 
        
    truncated_text = text[:adjusted_max_length]
    
    for separator in ['\n\n', '. ', '! ', '? ', '\n', ' ']: 
        position = truncated_text.rfind(separator)
        if position != -1:
            actual_cut_position = position + (len(separator) if separator != ' ' else 0)
            if actual_cut_position > 0 and actual_cut_position > adjusted_max_length * 0.3:
                 return text[:actual_cut_position].strip() + suffix, True
                 
    return text[:adjusted_max_length].strip() + suffix, True

def is_user_profi_subscriber(subscription_details: Dict[str, Any]) -> bool:
    if not subscription_details: return False
    if subscription_details.get('level') == CONFIG.PRO_SUBSCRIPTION_LEVEL_KEY and \
       subscription_details.get('valid_until'):
        try:
            valid_until_dt = datetime.fromisoformat(subscription_details['valid_until'])
            if valid_until_dt.tzinfo is None:
                valid_until_dt = valid_until_dt.replace(tzinfo=timezone.utc)
            return datetime.now(timezone.utc).date() <= valid_until_dt.date()
        except ValueError:
            logger.warning(f"Invalid date format for 'valid_until': {subscription_details['valid_until']}")
            return False
    return False

async def get_user_actual_limit_for_model(
    user_id: int, 
    model_key: str, 
    user_data: Optional[Dict[str, Any]] = None, 
    bot_data_cache: Optional[Dict[str, Any]] = None
) -> int:
    model_cfg = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_cfg: return 0

    bot_data_loc = bot_data_cache if bot_data_cache is not None else await firestore_service.get_bot_data()
    user_subscriptions = bot_data_loc.get(BotConstants.FS_USER_SUBSCRIPTIONS_KEY, {}).get(str(user_id), {})
    is_profi_user = is_user_profi_subscriber(user_subscriptions)

    limit_type = model_cfg.get("limit_type")
    base_limit = 0

    if limit_type == "daily_free":
        base_limit = model_cfg.get("limit", 0)
    elif limit_type == "subscription_or_daily_free":
        base_limit = model_cfg.get("subscription_daily_limit", 0) if is_profi_user \
                     else model_cfg.get("limit_if_no_subscription", 0)
    elif limit_type == "subscription_custom_pro":
        base_limit = model_cfg.get("subscription_daily_limit", 0) if is_profi_user \
                     else model_cfg.get("limit_if_no_subscription", 0)
    elif not model_cfg.get("is_limited", False):
        return float('inf')
    else:
        return 0

    user_data_loc = user_data if user_data is not None else await firestore_service.get_user_data(user_id)
    if model_key == CONFIG.NEWS_CHANNEL_BONUS_MODEL_KEY and \
       not is_profi_user and \
       user_data_loc.get('claimed_news_bonus', False):
        base_limit += user_data_loc.get('news_bonus_uses_left', 0)
        
    return base_limit

async def check_and_log_request_attempt(user_id: int, model_key: str) -> Tuple[bool, str, int]:
    today_str = datetime.now(timezone.utc).strftime("%Y-%m-%d")
    model_cfg = AVAILABLE_TEXT_MODELS.get(model_key)

    if not model_cfg or not model_cfg.get("is_limited"):
        return True, "", 0

    user_data_loc = await firestore_service.get_user_data(user_id)
    bot_data_loc = await firestore_service.get_bot_data()
    user_subscriptions = bot_data_loc.get(BotConstants.FS_USER_SUBSCRIPTIONS_KEY, {}).get(str(user_id), {})
    is_profi_user = is_user_profi_subscriber(user_subscriptions)

    if model_key == CONFIG.NEWS_CHANNEL_BONUS_MODEL_KEY and \
       not is_profi_user and \
       user_data_loc.get('claimed_news_bonus', False) and \
       user_data_loc.get('news_bonus_uses_left', 0) > 0:
        return True, "bonus_available", 0

    all_user_daily_counts = bot_data_loc.get(BotConstants.FS_ALL_USER_DAILY_COUNTS_KEY, {})
    user_daily_counts = all_user_daily_counts.get(str(user_id), {})
    model_usage_info = user_daily_counts.get(model_key, {'date': '', 'count': 0})

    if model_usage_info['date'] != today_str:
        model_usage_info = {'date': today_str, 'count': 0}

    current_usage_count = model_usage_info['count']
    
    limit_for_comparison = 0 
    if model_cfg.get("limit_type") == "daily_free":
        limit_for_comparison = model_cfg.get("limit", 0)
    elif model_cfg.get("limit_type") == "subscription_or_daily_free":
        limit_for_comparison = model_cfg.get("subscription_daily_limit", 0) if is_profi_user \
                               else model_cfg.get("limit_if_no_subscription", 0)
    elif model_cfg.get("limit_type") == "subscription_custom_pro":
        limit_for_comparison = model_cfg.get("subscription_daily_limit", 0) if is_profi_user \
                               else model_cfg.get("limit_if_no_subscription", 0)

    if current_usage_count >= limit_for_comparison:
        display_limit = await get_user_actual_limit_for_model(user_id, model_key, user_data_loc, bot_data_loc)
        message_parts = [f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ({current_usage_count}/{display_limit}) –¥–ª—è –º–æ–¥–µ–ª–∏ ¬´{model_cfg['name']}¬ª. –ú–æ–¥–µ–ª—å –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ¬´{AVAILABLE_TEXT_MODELS[CONFIG.DEFAULT_MODEL_KEY]['name']}¬ª."]
        
        default_model_config = AVAILABLE_TEXT_MODELS[CONFIG.DEFAULT_MODEL_KEY]
        await firestore_service.set_user_data(user_id, {
            'selected_model_id': default_model_config["id"],
            'selected_api_type': default_model_config.get("api_type")
        })

        if model_key == CONFIG.NEWS_CHANNEL_BONUS_MODEL_KEY and not is_profi_user:
            bonus_model_name = AVAILABLE_TEXT_MODELS.get(CONFIG.NEWS_CHANNEL_BONUS_MODEL_KEY, {}).get("name", "–±–æ–Ω—É—Å–Ω–æ–π –º–æ–¥–µ–ª–∏")
            if not user_data_loc.get('claimed_news_bonus', False):
                message_parts.append(f'üí° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ <a href="{CONFIG.NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π</a> –¥–∞—Å—Ç –≤–∞–º –±–æ–Ω—É—Å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ({CONFIG.NEWS_CHANNEL_BONUS_GENERATIONS} –¥–ª—è –º–æ–¥–µ–ª–∏ {bonus_model_name})!')
            elif user_data_loc.get('news_bonus_uses_left', 0) == 0:
                message_parts.append(f"‚ÑπÔ∏è –ë–æ–Ω—É—Å —Å <a href='{CONFIG.NEWS_CHANNEL_LINK}'>–∫–∞–Ω–∞–ª–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</a> –¥–ª—è –º–æ–¥–µ–ª–∏ {bonus_model_name} —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        
        if not is_profi_user:
            message_parts.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è <a href='https://t.me/gemini_oracle_bot?start=subscribe'>Profi –ø–æ–¥–ø–∏—Å–∫–∏</a> –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤.")
        
        if model_usage_info['date'] == today_str and user_daily_counts.get(model_key) != model_usage_info:
             user_daily_counts[model_key] = model_usage_info
             all_user_daily_counts[str(user_id)] = user_daily_counts
             await firestore_service.set_bot_data({BotConstants.FS_ALL_USER_DAILY_COUNTS_KEY: all_user_daily_counts})

        return False, "\n".join(message_parts), current_usage_count

    if model_usage_info['date'] == today_str and user_daily_counts.get(model_key) != model_usage_info:
        user_daily_counts[model_key] = model_usage_info
        all_user_daily_counts[str(user_id)] = user_daily_counts
        await firestore_service.set_bot_data({BotConstants.FS_ALL_USER_DAILY_COUNTS_KEY: all_user_daily_counts})
        
    return True, "", current_usage_count

async def increment_request_count(user_id: int, model_key: str):
    model_cfg = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_cfg or not model_cfg.get("is_limited"):
        return

    user_data_loc = await firestore_service.get_user_data(user_id)
    bot_data_loc = await firestore_service.get_bot_data()
    user_subscriptions = bot_data_loc.get(BotConstants.FS_USER_SUBSCRIPTIONS_KEY, {}).get(str(user_id), {})
    is_profi_user = is_user_profi_subscriber(user_subscriptions)

    if model_key == CONFIG.NEWS_CHANNEL_BONUS_MODEL_KEY and \
       not is_profi_user and \
       user_data_loc.get('claimed_news_bonus', False):
        bonus_uses_left = user_data_loc.get('news_bonus_uses_left', 0)
        if bonus_uses_left > 0:
            await firestore_service.set_user_data(user_id, {'news_bonus_uses_left': bonus_uses_left - 1})
            logger.info(f"User {user_id} consumed a news channel bonus use for model {model_key}. Left: {bonus_uses_left - 1}")
            return

    today_str = datetime.now(timezone.utc).strftime("%Y-%m-%d")
    all_user_daily_counts = bot_data_loc.get(BotConstants.FS_ALL_USER_DAILY_COUNTS_KEY, {})
    user_daily_counts = all_user_daily_counts.get(str(user_id), {})
    
    model_usage_info = user_daily_counts.get(model_key, {'date': today_str, 'count': 0})
    if model_usage_info['date'] != today_str:
        model_usage_info = {'date': today_str, 'count': 0}
    
    model_usage_info['count'] += 1
    user_daily_counts[model_key] = model_usage_info
    all_user_daily_counts[str(user_id)] = user_daily_counts
    
    await firestore_service.set_bot_data({BotConstants.FS_ALL_USER_DAILY_COUNTS_KEY: all_user_daily_counts})
    logger.info(f"Incremented daily count for user {user_id}, model {model_key} to {model_usage_info['count']}.")

def is_menu_button_text(text: str) -> bool:
    if text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        return True
    for menu_data in MENU_STRUCTURE.values():
        for item in menu_data.get("items", []):
            if item["text"] == text:
                return True
    return False

def generate_menu_keyboard(menu_key: str) -> ReplyKeyboardMarkup:
    menu_config = MENU_STRUCTURE.get(menu_key, MENU_STRUCTURE[BotConstants.MENU_MAIN])
    keyboard_rows: List[List[KeyboardButton]] = []
    items = menu_config["items"]

    if menu_key in [BotConstants.MENU_MAIN, BotConstants.MENU_MODELS_SUBMENU]:
        for i in range(0, len(items), 2):
            keyboard_rows.append(
                [KeyboardButton(items[j]["text"]) for j in range(i, min(i + 2, len(items)))]
            )
    else:
        for item in items:
            keyboard_rows.append([KeyboardButton(item["text"])])
            
    if menu_config.get("is_submenu", False):
        navigation_row = [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        if menu_config.get("parent"):
            navigation_row.insert(0, KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
        keyboard_rows.append(navigation_row)
        
    return ReplyKeyboardMarkup(keyboard_rows, resize_keyboard=True, one_time_keyboard=False)

async def show_menu(update: Update, user_id: int, menu_key: str, user_data_param: Optional[Dict[str, Any]] = None):
    menu_cfg = MENU_STRUCTURE.get(menu_key)
    if not menu_cfg:
        logger.error(f"Menu key '{menu_key}' not found in MENU_STRUCTURE. Defaulting to main menu for user {user_id}.")
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∫–∞–∑—ã–≤–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=generate_menu_keyboard(BotConstants.MENU_MAIN)
        )
        await firestore_service.set_user_data(user_id, {'current_menu': BotConstants.MENU_MAIN})
        return

    await firestore_service.set_user_data(user_id, {'current_menu': menu_key})
    await update.message.reply_text(
        menu_cfg["title"],
        reply_markup=generate_menu_keyboard(menu_key),
        disable_web_page_preview=True
    )
    logger.info(f"User {user_id} was shown menu '{menu_key}'.")
