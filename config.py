# config.py
import telegram
from telegram import (
    ReplyKeyboardMarkup, KeyboardButton, Update,
    BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
)
from telegram.constants import ParseMode, ChatAction
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, PreCheckoutQueryHandler
)
import google.generativeai as genai
import google.api_core.exceptions
import requests
import logging
import traceback
import os
import asyncio
import nest_asyncio
import json
from datetime import datetime, timedelta, timezone
from typing import Optional, Dict, Any, Tuple, Union, List
import uuid
import firebase_admin
from firebase_admin import credentials, firestore, initialize_app
from firebase_admin.exceptions import FirebaseError
from google.cloud.firestore_v1.client import Client as FirestoreClient
from abc import ABC, abstractmethod

# --- –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê ---
nest_asyncio.apply()
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
class AppConfig:
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "8185454402:AAEgJLaBSaUSyP9Z_zv76Fn0PtEwltAqga0")
    GOOGLE_GEMINI_API_KEY = os.getenv("GOOGLE_GEMINI_API_KEY", "AIzaSyCdDMpgLJyz6aYdwT9q4sbBk7sHVID4BTI") # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ
    CUSTOM_GEMINI_PRO_API_KEY = os.getenv("CUSTOM_GEMINI_PRO_API_KEY", "YOUR_CUSTOM_GEMINI_PRO_API_KEY") # –ó–∞–º–µ–Ω–∏—Ç–µ
    CUSTOM_GEMINI_PRO_ENDPOINT = os.getenv("CUSTOM_GEMINI_PRO_ENDPOINT", "YOUR_CUSTOM_GEMINI_PRO_ENDPOINT") # –ó–∞–º–µ–Ω–∏—Ç–µ
    CUSTOM_GROK_3_API_KEY = os.getenv("CUSTOM_GROK_3_API_KEY", "YOUR_CUSTOM_GROK_3_API_KEY") # –ó–∞–º–µ–Ω–∏—Ç–µ
    CUSTOM_GPT4O_MINI_API_KEY = os.getenv("CUSTOM_GPT4O_MINI_API_KEY", "YOUR_CUSTOM_GPT4O_MINI_API_KEY") # –ó–∞–º–µ–Ω–∏—Ç–µ
    PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN", "YOUR_PAYMENT_PROVIDER_TOKEN") # –ó–∞–º–µ–Ω–∏—Ç–µ

    # --- URL –î–õ–Ø –í–ê–®–ï–ì–û MINI APP ---
    # –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ placeholder –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å GitHub Pages)
    MINI_APP_URL = os.getenv("MINI_APP_URL", "https://sinobu1.github.io/nwb/") # –ü—Ä–∏–º–µ—Ä

    ADMIN_ID = int(os.getenv("ADMIN_ID", "489230152")) # –í–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    FIREBASE_CREDENTIALS_JSON_STR = os.getenv("FIREBASE_CREDENTIALS")
    FIREBASE_CERT_PATH = "gemioracle-firebase-adminsdk-fbsvc-8f89d5b941.json" # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ Firebase

    MAX_OUTPUT_TOKENS_GEMINI_LIB = 2048
    MAX_MESSAGE_LENGTH_TELEGRAM = 4000
    MIN_AI_REQUEST_LENGTH = 4

    DEFAULT_FREE_REQUESTS_GEMINI_2_0_FLASH_DAILY = 65
    DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY = 50
    DEFAULT_FREE_REQUESTS_CUSTOM_GROK_DAILY = 1
    DEFAULT_FREE_REQUESTS_CUSTOM_GEMINI_PRO_DAILY = 1
    DEFAULT_FREE_REQUESTS_CUSTOM_GPT4O_MINI_DAILY = 10
    
    GEMS_FOR_NEW_USER = 0.0 # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ float –¥–ª—è –≥–µ–º–æ–≤
    GEM_PACKAGES = {
        "pack_10_gems": {"gems": 10.0, "price_units": 10000, "currency": "RUB", "title": "‚ú® 10 –ì–µ–º–æ–≤", "description": "–ù–µ–±–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç –¥–ª—è —Å—Ç–∞—Ä—Ç–∞"},
        "pack_50_gems": {"gems": 50.0, "price_units": 45000, "currency": "RUB", "title": "üåü 50 –ì–µ–º–æ–≤", "description": "–°—Ä–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ"},
        "pack_100_gems": {"gems": 100.0, "price_units": 80000, "currency": "RUB", "title": "üíé 100 –ì–µ–º–æ–≤", "description": "–ë–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"}
    }

    NEWS_CHANNEL_USERNAME = "@timextech" # –í–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª
    NEWS_CHANNEL_LINK = "https://t.me/timextech"
    NEWS_CHANNEL_BONUS_MODEL_KEY = "custom_api_gemini_2_5_pro"
    NEWS_CHANNEL_BONUS_GENERATIONS = 1

    DEFAULT_AI_MODE_KEY = "universal_ai_basic"
    DEFAULT_MODEL_KEY = "google_gemini_2_0_flash"

CONFIG = AppConfig()

_API_KEYS_PROVIDER = {
    "CUSTOM_GEMINI_PRO_API_KEY": CONFIG.CUSTOM_GEMINI_PRO_API_KEY,
    "CUSTOM_GROK_3_API_KEY": CONFIG.CUSTOM_GROK_3_API_KEY,
    "CUSTOM_GPT4O_MINI_API_KEY": CONFIG.CUSTOM_GPT4O_MINI_API_KEY,
}

class BotConstants:
    FS_USERS_COLLECTION = "users"
    FS_BOT_DATA_COLLECTION = "bot_data"
    FS_BOT_DATA_DOCUMENT = "data"
    FS_ALL_USER_DAILY_COUNTS_KEY = "all_user_daily_counts"

    MENU_MAIN = "main_menu"
    MENU_AI_MODES_SUBMENU = "ai_modes_submenu"
    MENU_MODELS_SUBMENU = "models_submenu"
    MENU_LIMITS_SUBMENU = "limits_submenu"
    MENU_BONUS_SUBMENU = "bonus_submenu"
    MENU_GEMS_SUBMENU = "gems_submenu"
    MENU_HELP_SUBMENU = "help_submenu"

    CALLBACK_ACTION_SUBMENU = "submenu"
    CALLBACK_ACTION_SET_AGENT = "set_agent"
    CALLBACK_ACTION_SET_MODEL = "set_model"
    CALLBACK_ACTION_SHOW_LIMITS = "show_limits"
    CALLBACK_ACTION_CHECK_BONUS = "check_bonus"
    CALLBACK_ACTION_SHOW_GEMS_STORE = "show_gems_store"
    CALLBACK_ACTION_BUY_GEM_PACKAGE = "buy_gem_package"
    CALLBACK_ACTION_SHOW_HELP = "show_help"

    API_TYPE_GOOGLE_GENAI = "google_genai"
    API_TYPE_CUSTOM_HTTP = "custom_http_api"

AI_MODES = {
    "universal_ai_basic": {
        "name": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π",
        "prompt": ("–¢—ã ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —à–∏—Ä–æ–∫–∏–π –∫—Ä—É–≥ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ë—É–¥—å –≤–µ–∂–ª–∏–≤ –∏ –ø–æ–ª–µ–∑–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π —è—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –∏ –∞–±–∑–∞—Ü–µ–≤, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."),
        "welcome": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º. –ö–∞–∫–æ–π —É –≤–∞—Å –≤–æ–ø—Ä–æ—Å?",
        "image_url": "https://via.placeholder.com/300x200/FF7EB3/FFFFFF?text=–£–Ω–∏–≤–µ—Ä—Å–∞–ª" # –ü—Ä–∏–º–µ—Ä URL –∫–∞—Ä—Ç–∏–Ω–∫–∏
    },
    "idea_generator": {
        "name": "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π",
        "prompt": ("–¢—ã ‚Äî –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ò–¥–µ–π, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫..."),
        "welcome": "–ì–æ—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏! –ö–∞–∫–∞—è —Ç–µ–º–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        "image_url": "https://via.placeholder.com/300x200/38EF7D/FFFFFF?text=–ò–¥–µ–∏" # –ü—Ä–∏–º–µ—Ä URL –∫–∞—Ä—Ç–∏–Ω–∫–∏
    },
    "career_coach": {
        "name": "–ö–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
        "prompt": ("–¢—ã ‚Äî –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, –ò–ò-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –∫–∞—Ä—å–µ—Ä—ã..."),
        "welcome": "–†–∞—Å–∫—Ä–æ–µ–º –≤–∞—à –∫–∞—Ä—å–µ—Ä–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö —Ü–µ–ª—è—Ö –∏–ª–∏ —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏."
    },
    "programming_partner": {
        "name": "–ü–∞—Ä—Ç–Ω–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞",
        "prompt": ("–¢—ã ‚Äî –ü–∞—Ä—Ç–Ω–µ—Ä –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞, –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤..."),
        "welcome": "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∫–æ–¥–æ–º! –ö–∞–∫–∞—è –∑–∞–¥–∞—á–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è?"
    },
    "tutor_assistant": {
        "name": "–í–Ω–µ—à–∫–æ–ª—å–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫",
        "prompt": ("–¢—ã ‚Äî –í–Ω–µ—à–∫–æ–ª—å–Ω—ã–π –ù–∞—Å—Ç–∞–≤–Ω–∏–∫, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É—á–µ–±—ã..."),
        "welcome": "–†–∞–¥ –ø–æ–º–æ—á—å —Å —É—á–µ–±–æ–π! –ó–∞ —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤–æ–∑—å–º–µ–º—Å—è?"
    },
    "literary_editor": {
        "name": "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä",
        "prompt": ("–¢—ã ‚Äî –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –†–µ–¥–∞–∫—Ç–æ—Ä, –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–∏—Å–∞—Ç–µ–ª–µ–π..."),
        "welcome": "–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —É–ª—É—á—à–∏—Ç—å –≤–∞—à —Ç–µ–∫—Å—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç—É—Ä—ã."
    },
    "photo_dietitian_analyzer": { 
        "name": "ü•ë –î–∏–µ—Ç–æ–ª–æ–≥", # –°–æ–∫—Ä–∞—Ç–∏–ª –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        "prompt": ("–¢—ã ‚Äî –î–∏–µ—Ç–æ–ª–æ–≥-–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª..."),
        "welcome": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –î–∏–µ—Ç–æ–ª–æ–≥ –ø–æ —Ñ–æ—Ç–æ...",
        "multimodal_capable": True,
        "forced_model_key": "google_gemini_2_5_flash_preview", 
        "native_vision_model_id": "gemini-1.5-flash-latest", # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª 'latest' –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
        "initial_lifetime_free_uses": 5,
        "image_url": "https://via.placeholder.com/300x200/764BA2/FFFFFF?text=–î–∏–µ—Ç–æ–ª–æ–≥" # –ü—Ä–∏–º–µ—Ä URL –∫–∞—Ä—Ç–∏–Ω–∫–∏
    },
    "gemini_pro_custom_mode": {
        "name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (Gemini Pro)",
        "prompt": ("–¢—ã ‚Äî Gemini Pro, –º–æ—â–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç..."),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (Gemini Pro)'. –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?"
    }
}

AVAILABLE_TEXT_MODELS = {
    "google_gemini_2_0_flash": {
        "name": "Gemini 2.0 Flash", "id": "gemini-2.0-flash", "api_type": BotConstants.API_TYPE_GOOGLE_GENAI,
        "is_limited": True, 
        "free_daily_limit": CONFIG.DEFAULT_FREE_REQUESTS_GEMINI_2_0_FLASH_DAILY,
        "gem_cost": 0.0 
    },
    "google_gemini_2_5_flash_preview": {
        "name": "Gemini 2.5 Flash", "id": "gemini-1.5-flash-latest", "api_type": BotConstants.API_TYPE_GOOGLE_GENAI, # –ò–∑–º–µ–Ω–∏–ª –Ω–∞ 1.5-flash-latest, —Ç.–∫. 2.5 preview –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º
        "is_limited": True,
        "free_daily_limit": CONFIG.DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY,
        "gem_cost": 2.5,
        "image_url": "https://via.placeholder.com/300x200/4FACFE/000000?text=G-Flash" # –ü—Ä–∏–º–µ—Ä URL –∫–∞—Ä—Ç–∏–Ω–∫–∏
    },
    "custom_api_gemini_2_5_pro": {
        "name": "Gemini Pro (Custom)", "id": "gemini-2.5-pro-preview-03-25", "api_type": BotConstants.API_TYPE_CUSTOM_HTTP,
        "endpoint": CONFIG.CUSTOM_GEMINI_PRO_ENDPOINT, "api_key_var_name": "CUSTOM_GEMINI_PRO_API_KEY",
        "is_limited": True, 
        "free_daily_limit": CONFIG.DEFAULT_FREE_REQUESTS_CUSTOM_GEMINI_PRO_DAILY,
        "gem_cost": 2.5
    },
    "custom_api_grok_3": {
        "name": "Grok 3 (Custom)", "id": "grok-3-beta", "api_type": BotConstants.API_TYPE_CUSTOM_HTTP,
        "endpoint": "https://api.gen-api.ru/api/v1/networks/grok-3", "api_key_var_name": "CUSTOM_GROK_3_API_KEY",
        "is_limited": True, 
        "free_daily_limit": CONFIG.DEFAULT_FREE_REQUESTS_CUSTOM_GROK_DAILY,
        "gem_cost": 2.5
    },
    "custom_api_gpt_4o_mini": {
        "name": "GPT-4o mini (Custom)", "id": "gpt-4o-mini", "api_type": BotConstants.API_TYPE_CUSTOM_HTTP,
        "endpoint": "https://api.gen-api.ru/api/v1/networks/gpt-4o-mini", "api_key_var_name": "CUSTOM_GPT4O_MINI_API_KEY",
        "is_limited": True, 
        "free_daily_limit": CONFIG.DEFAULT_FREE_REQUESTS_CUSTOM_GPT4O_MINI_DAILY,
        "gem_cost": 0.5,
        "image_url": "https://via.placeholder.com/300x200/F9D423/000000?text=GPT-4o+mini" # –ü—Ä–∏–º–µ—Ä URL –∫–∞—Ä—Ç–∏–Ω–∫–∏
    }
}
DEFAULT_MODEL_ID = AVAILABLE_TEXT_MODELS[CONFIG.DEFAULT_MODEL_KEY]["id"]

MENU_STRUCTURE = {
    BotConstants.MENU_MAIN: {
        "title": "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "items": [
            {"text": "ü§ñ –ê–≥–µ–Ω—Ç—ã –ò–ò", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_AI_MODES_SUBMENU},
            {"text": "‚öôÔ∏è –ú–æ–¥–µ–ª–∏ –ò–ò", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_MODELS_SUBMENU},
            {"text": "üìä –õ–∏–º–∏—Ç—ã", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_LIMITS_SUBMENU},
            {"text": "üéÅ –ë–æ–Ω—É—Å", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_BONUS_SUBMENU},
            {"text": "üíé –ì–µ–º—ã", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_GEMS_SUBMENU},
            {"text": "‚ùì –ü–æ–º–æ—â—å", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_HELP_SUBMENU}
        ], "parent": None, "is_submenu": False
    },
    BotConstants.MENU_AI_MODES_SUBMENU: {
        "title": "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç –ò–ò", "items": [
            {"text": mode["name"], "action": BotConstants.CALLBACK_ACTION_SET_AGENT, "target": key}
            for key, mode in AI_MODES.items() if key != "gemini_pro_custom_mode" # –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —ç—Ç–æ—Ç –∞–≥–µ–Ω—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
        ], "parent": BotConstants.MENU_MAIN, "is_submenu": True
    },
    BotConstants.MENU_MODELS_SUBMENU: {
        "title": "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò", "items": [
            {"text": model["name"], "action": BotConstants.CALLBACK_ACTION_SET_MODEL, "target": key}
            for key, model in AVAILABLE_TEXT_MODELS.items()
        ], "parent": BotConstants.MENU_MAIN, "is_submenu": True
    },
    BotConstants.MENU_LIMITS_SUBMENU: {"title": "–í–∞—à–∏ –ª–∏–º–∏—Ç—ã –∏ –±–∞–ª–∞–Ω—Å", "items": [{"text": "üìä –ü–æ–∫–∞–∑–∞—Ç—å", "action": BotConstants.CALLBACK_ACTION_SHOW_LIMITS, "target": "usage"}], "parent": BotConstants.MENU_MAIN, "is_submenu": True},
    BotConstants.MENU_BONUS_SUBMENU: {"title": "–ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª", "items": [{"text": "üéÅ –ü–æ–ª—É—á–∏—Ç—å", "action": BotConstants.CALLBACK_ACTION_CHECK_BONUS, "target": "news_bonus"}], "parent": BotConstants.MENU_MAIN, "is_submenu": True},
    BotConstants.MENU_GEMS_SUBMENU: {
        "title": "üíé –ú–∞–≥–∞–∑–∏–Ω –ì–µ–º–æ–≤", 
        "items": [
            {"text": package_info["title"], "action": BotConstants.CALLBACK_ACTION_BUY_GEM_PACKAGE, "target": package_key}
            for package_key, package_info in CONFIG.GEM_PACKAGES.items()
        ] + [{"text": "‚ÑπÔ∏è –ú–æ–π –±–∞–ª–∞–Ω—Å –∏ –ª–∏–º–∏—Ç—ã", "action": BotConstants.CALLBACK_ACTION_SHOW_LIMITS, "target": "show_limits_from_gems_menu"}],
        "parent": BotConstants.MENU_MAIN, 
        "is_submenu": True
    },
    BotConstants.MENU_HELP_SUBMENU: {"title": "–ü–æ–º–æ—â—å", "items": [{"text": "‚ùì –°–ø—Ä–∞–≤–∫–∞", "action": BotConstants.CALLBACK_ACTION_SHOW_HELP, "target": "help"}], "parent": BotConstants.MENU_MAIN, "is_submenu": True}
}

class FirestoreService:
    def __init__(self, cert_path: str, creds_json_str: Optional[str] = None):
        self._db: Optional[FirestoreClient] = None
        try:
            cred_obj = None
            if creds_json_str:
                try:
                    cred_obj = credentials.Certificate(json.loads(creds_json_str))
                    logger.info("Firebase credentials loaded from JSON string.")
                except json.JSONDecodeError as e:
                    logger.error(f"Error parsing FIREBASE_CREDENTIALS_JSON_STR: {e}. Check JSON env var.")
                    raise
            elif os.path.exists(cert_path):
                cred_obj = credentials.Certificate(cert_path)
                logger.info(f"Firebase credentials loaded from file: {cert_path}.")
            else:
                logger.warning(f"Firebase credentials file not found at {cert_path} and JSON string not provided. Firestore will not be initialized.")
                return # –ù–µ –ø–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–≥–∏—Ä—É–µ–º –∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º

            if not firebase_admin._apps:
                initialize_app(cred_obj)
                logger.info("Firebase app successfully initialized.")
            else:
                logger.info("Firebase app already initialized.")
            self._db = firestore.client()
            logger.info("Firestore client successfully initialized.")
        except Exception as e:
            logger.error(f"Critical error during Firebase/Firestore initialization: {e}", exc_info=True)
            self._db = None # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ _db None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

    async def _execute_firestore_op(self, func, *args, **kwargs):
        if not self._db:
            logger.warning(f"Firestore (db) is not initialized. Operation '{func.__name__}' skipped.")
            return None
        try:
            return await asyncio.get_event_loop().run_in_executor(None, lambda: func(*args, **kwargs))
        except Exception as e:
            logger.error(f"Firestore operation '{func.__name__}' failed: {e}", exc_info=True)
            return None


    async def get_user_data(self, user_id: int) -> Dict[str, Any]:
        if not self._db: return {}
        doc_ref = self._db.collection(BotConstants.FS_USERS_COLLECTION).document(str(user_id))
        doc = await self._execute_firestore_op(doc_ref.get)
        return doc.to_dict() if doc and doc.exists else {}

    async def set_user_data(self, user_id: int, data: Dict[str, Any]) -> None:
        if not self._db: return
        doc_ref = self._db.collection(BotConstants.FS_USERS_COLLECTION).document(str(user_id))
        await self._execute_firestore_op(doc_ref.set, data, merge=True)
        # logger.debug(f"User data for {user_id} updated with keys: {list(data.keys())}") # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    async def get_bot_data(self) -> Dict[str, Any]:
        if not self._db: return {}
        doc_ref = self._db.collection(BotConstants.FS_BOT_DATA_COLLECTION).document(BotConstants.FS_BOT_DATA_DOCUMENT)
        doc = await self._execute_firestore_op(doc_ref.get)
        return doc.to_dict() if doc and doc.exists else {}

    async def set_bot_data(self, data: Dict[str, Any]) -> None:
        if not self._db: return
        doc_ref = self._db.collection(BotConstants.FS_BOT_DATA_COLLECTION).document(BotConstants.FS_BOT_DATA_DOCUMENT)
        await self._execute_firestore_op(doc_ref.set, data, merge=True)
        # logger.debug(f"Bot data updated with keys: {list(data.keys())}")

firestore_service = FirestoreService(
    cert_path=CONFIG.FIREBASE_CERT_PATH,
    creds_json_str=CONFIG.FIREBASE_CREDENTIALS_JSON_STR
)

class BaseAIService(ABC):
    def __init__(self, model_config: Dict[str, Any]):
        self.model_config = model_config
        self.model_id = model_config["id"]

    @abstractmethod
    async def generate_response(self, system_prompt: str, user_prompt: str, image_data: Optional[Dict[str, Any]] = None) -> str:
        pass

class GoogleGenAIService(BaseAIService):
    async def generate_response(self, system_prompt: str, user_prompt: str, image_data: Optional[Dict[str, Any]] = None) -> str:
        if image_data:
            logger.warning(f"GoogleGenAIService for text model {self.model_id} received image_data, but will ignore it.")
        
        full_prompt = f"{system_prompt}\n\n**–ó–∞–ø—Ä–æ—Å:**\n{user_prompt}"
        try:
            if not CONFIG.GOOGLE_GEMINI_API_KEY or "YOUR_" in CONFIG.GOOGLE_GEMINI_API_KEY or not CONFIG.GOOGLE_GEMINI_API_KEY.startswith("AIzaSy"):
                 logger.warning(f"Google Gemini API key for {self.model_id} is not configured correctly or is missing.")
                 return "API –∫–ª—é—á –¥–ª—è Google Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω."

            model_genai = genai.GenerativeModel(
                self.model_id,
                generation_config={"max_output_tokens": CONFIG.MAX_OUTPUT_TOKENS_GEMINI_LIB}
            )
            response = await asyncio.get_event_loop().run_in_executor(None, lambda: model_genai.generate_content(full_prompt))
            return response.text.strip() if response.text else "–û—Ç–≤–µ—Ç Google GenAI –ø—É—Å—Ç."
        except google.api_core.exceptions.ResourceExhausted as e:
            logger.error(f"Google GenAI API limit exhausted for model {self.model_id}: {e}")
            return f"–õ–∏–º–∏—Ç Google API –∏—Å—á–µ—Ä–ø–∞–Ω –¥–ª—è –º–æ–¥–µ–ª–∏ {self.model_config.get('name', self.model_id)}."
        except Exception as e:
            logger.error(f"Google GenAI API error for model {self.model_id}: {e}", exc_info=True)
            return f"–û—à–∏–±–∫–∞ Google API ({type(e).__name__}) –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ {self.model_config.get('name', self.model_id)}."

class CustomHttpAIService(BaseAIService):
    async def generate_response(self, system_prompt: str, user_prompt: str, image_data: Optional[Dict[str, Any]] = None) -> str:
        api_key_name = self.model_config.get("api_key_var_name")
        actual_key = _API_KEYS_PROVIDER.get(api_key_name)

        if not actual_key or ("YOUR_" in actual_key and not (actual_key.startswith("sk-") or actual_key.startswith("AIzaSy"))): # –£—Ç–æ—á–Ω–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –∫–ª—é—á–∞
            logger.error(f"Invalid or missing API key for model {self.model_id} (key name: {api_key_name}). Key value: '{str(actual_key)[:10]}...'")
            return f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ API –¥–ª—è ¬´{self.model_config.get('name', self.model_id)}¬ª."

        headers = { "Authorization": f"Bearer {actual_key}", "Content-Type": "application/json", "Accept": "application/json" }
        endpoint_url = self.model_config.get("endpoint", "")
        if not endpoint_url:
            logger.error(f"Endpoint URL is not configured for model {self.model_id}.")
            return f"–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω endpoint –¥–ª—è –º–æ–¥–µ–ª–∏ ¬´{self.model_config.get('name', self.model_id)}¬ª."

        payload = {
            "messages": [{"role": "system", "content": system_prompt}, {"role": "user", "content": user_prompt}],
            "is_sync": True, # –≠—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ–Ω –¥–ª—è gen-api.ru, –¥–ª—è –¥—Ä—É–≥–∏—Ö API –µ–≥–æ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å
            "max_tokens": self.model_config.get("max_tokens", CONFIG.MAX_OUTPUT_TOKENS_GEMINI_LIB)
        }
        # –î–æ–±–∞–≤–ª—è–µ–º model ID –≤ payload, –µ—Å–ª–∏ —ç—Ç–æ gen-api.ru
        if endpoint_url.startswith("https://api.gen-api.ru") and self.model_id:
             payload['model'] = self.model_id 

        try:
            response = await asyncio.get_event_loop().run_in_executor(
                None, lambda: requests.post(endpoint_url, headers=headers, json=payload, timeout=90)
            )
            response.raise_for_status()
            json_resp = response.json()
            
            # –ë–æ–ª–µ–µ –≥–∏–±–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            extracted_text = None
            if endpoint_url.startswith("https://api.gen-api.ru"):
                 extracted_text = json_resp.get("output") # –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á –¥–ª—è gen-api
            if not extracted_text and isinstance(json_resp.get("choices"), list) and json_resp["choices"]: # OpenAI-like
                extracted_text = json_resp["choices"][0].get("message", {}).get("content")
            if not extracted_text: extracted_text = json_resp.get("text") # –û–±—â–∏–π –∫–ª—é—á

            return extracted_text.strip() if extracted_text else f"–û—Ç–≤–µ—Ç API {self.model_config['name']} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."
        except requests.exceptions.HTTPError as e:
            error_body = e.response.text if e.response else "No response body"
            logger.error(f"Custom API HTTPError for {self.model_id} ({endpoint_url}): {e.response.status_code} - {error_body}", exc_info=True)
            return f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ Custom API ({e.response.status_code}) –¥–ª—è {self.model_config['name']}. –î–µ—Ç–∞–ª–∏: {error_body[:200]}"
        except requests.exceptions.RequestException as e:
            logger.error(f"Custom API RequestException for {self.model_id} ({endpoint_url}): {e}", exc_info=True)
            return f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ Custom API ({type(e).__name__}) –¥–ª—è {self.model_config['name']}."
        except Exception as e:
            logger.error(f"Unexpected Custom API error for {self.model_id} ({endpoint_url}): {e}", exc_info=True)
            return f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Custom API ({type(e).__name__}) –¥–ª—è {self.model_config['name']}."

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

async def get_user_gem_balance(user_id: int, user_data: Optional[Dict[str, Any]] = None) -> float:
    if user_data is None: user_data = await firestore_service.get_user_data(user_id)
    return float(user_data.get('gem_balance', 0.0))

async def update_user_gem_balance(user_id: int, new_balance: float) -> None:
    await firestore_service.set_user_data(user_id, {'gem_balance': round(new_balance, 2)})
    logger.info(f"User {user_id} gem balance updated to: {new_balance:.2f}")

async def get_daily_usage_for_model(user_id: int, model_key: str, bot_data_cache: Optional[Dict[str, Any]] = None) -> int:
    if bot_data_cache is None: bot_data_cache = await firestore_service.get_bot_data()
    today_str = datetime.now(timezone.utc).strftime("%Y-%m-%d")
    all_user_daily_counts = bot_data_cache.get(BotConstants.FS_ALL_USER_DAILY_COUNTS_KEY, {})
    user_counts_today = all_user_daily_counts.get(str(user_id), {})
    model_usage_info = user_counts_today.get(model_key, {'date': '', 'count': 0})
    return model_usage_info['count'] if model_usage_info.get('date') == today_str else 0

async def get_agent_lifetime_uses_left(user_id: int, agent_config_key: str, user_data: Optional[Dict[str, Any]] = None) -> int:
    if user_data is None: user_data = await firestore_service.get_user_data(user_id)
    firestore_key = f"lifetime_uses_{agent_config_key}"
    return int(user_data.get(firestore_key, 0))

async def decrement_agent_lifetime_uses(user_id: int, agent_config_key: str, user_data: Optional[Dict[str, Any]] = None) -> None:
    if user_data is None: user_data_to_update = await firestore_service.get_user_data(user_id)
    else: user_data_to_update = user_data # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    firestore_key = f"lifetime_uses_{agent_config_key}"
    current_uses = int(user_data_to_update.get(firestore_key, 0))
    if current_uses > 0:
        await firestore_service.set_user_data(user_id, {firestore_key: current_uses - 1})
        logger.info(f"User {user_id} consumed a lifetime free use for agent {agent_config_key}. Left: {current_uses - 1}")

async def check_and_log_request_attempt(
    user_id: int, model_key: str, user_data: Optional[Dict[str, Any]] = None, 
    bot_data_cache: Optional[Dict[str, Any]] = None, current_agent_key: Optional[str] = None
) -> Tuple[bool, str, str, Optional[float]]:
    model_cfg = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_cfg: 
        logger.error(f"Billing model key '{model_key}' not found in AVAILABLE_TEXT_MODELS.")
        return False, "–û—à–∏–±–∫–∞: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∏–ª–ª–∏–Ω–≥-–º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", "error", None

    if user_data is None: user_data = await firestore_service.get_user_data(user_id)
    if bot_data_cache is None: bot_data_cache = await firestore_service.get_bot_data()
    
    active_agent_config = None
    if current_agent_key: # current_agent_key - —ç—Ç–æ –∫–ª—é—á –∏–∑ AI_MODES
        active_agent_config = AI_MODES.get(current_agent_key)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —Å –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    if model_key == CONFIG.NEWS_CHANNEL_BONUS_MODEL_KEY and \
       user_data.get('claimed_news_bonus', False) and \
       user_data.get('news_bonus_uses_left', 0) > 0:
        logger.info(f"User {user_id} using news channel bonus for model {model_key}.")
        return True, "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–Ω—É—Å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.", "bonus", 0.0

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å - —ç—Ç–æ forced_model_key –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    if active_agent_config and current_agent_key and \
       model_key == active_agent_config.get("forced_model_key") and \
       active_agent_config.get('initial_lifetime_free_uses') is not None:
        agent_uses_left = await get_agent_lifetime_uses_left(user_id, current_agent_key, user_data)
        if agent_uses_left > 0:
            logger.info(f"User {user_id} using agent lifetime free use for agent {current_agent_key} (model {model_key}). Left: {agent_uses_left}")
            return True, f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ ¬´{active_agent_config.get('name')}¬ª ({agent_uses_left}/{active_agent_config.get('initial_lifetime_free_uses')}).", "agent_lifetime_free", 0.0

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏
    free_daily_limit = model_cfg.get('free_daily_limit', 0)
    current_daily_usage = await get_daily_usage_for_model(user_id, model_key, bot_data_cache)
    if current_daily_usage < free_daily_limit:
        logger.info(f"User {user_id} using free daily limit for model {model_key} ({current_daily_usage + 1}/{free_daily_limit}).")
        return True, f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–Ω–µ–≤–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ ¬´{model_cfg['name']}¬ª ({current_daily_usage + 1}/{free_daily_limit}).", "daily_free", 0.0

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –≥–µ–º–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å
    gem_cost = model_cfg.get('gem_cost', 0.0)
    if gem_cost > 0:
        user_gem_balance = await get_user_gem_balance(user_id, user_data)
        if user_gem_balance >= gem_cost:
            logger.info(f"User {user_id} can use model {model_key} for {gem_cost} gems (balance: {user_gem_balance}).")
            return True, f"–ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ {gem_cost:.1f} –≥–µ–º–æ–≤.", "gem", gem_cost
        else:
            msg = (f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–º–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ ¬´{model_cfg['name']}¬ª.\n"
                   f"–ù—É–∂–Ω–æ: {gem_cost:.1f}, —É –≤–∞—Å: {user_gem_balance:.1f}.\n"
                   f"–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å: /gems –∏–ª–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é ¬´üíé –ì–µ–º—ã¬ª.")
            logger.warning(f"User {user_id} insufficient gems for {model_key}. Needed: {gem_cost}, Has: {user_gem_balance}")
            return False, msg, "no_gems", gem_cost
    
    # 5. –ï—Å–ª–∏ –≤—Å–µ –ª–∏–º–∏—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏ –º–æ–¥–µ–ª—å –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è (gem_cost == 0)
    if gem_cost == 0 and current_daily_usage >= free_daily_limit:
        msg = (f"–î–Ω–µ–≤–Ω–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è ¬´{model_cfg['name']}¬ª ({free_daily_limit}/{free_daily_limit}) –∏—Å—á–µ—Ä–ø–∞–Ω. –ú–æ–¥–µ–ª—å –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∑–∞ –≥–µ–º—ã.")
        logger.warning(f"User {user_id} free daily limit exhausted for {model_key} (model has no gem cost).")
        return False, msg, "limit_exhausted_no_gems", None

    # –°–∏—Ç—É–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–µ)
    logger.error(f"User {user_id} check_and_log_request_attempt reached an unexpected state for model {model_key} with agent {current_agent_key}.")
    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", "error", None


async def increment_request_count(user_id: int, model_key: str, usage_type: str, current_agent_key: Optional[str] = None, gem_cost_val: Optional[float] = None):
    if usage_type == "bonus":
        user_data = await firestore_service.get_user_data(user_id) 
        bonus_left = user_data.get('news_bonus_uses_left', 0)
        if bonus_left > 0: await firestore_service.set_user_data(user_id, {'news_bonus_uses_left': bonus_left - 1})
        logger.info(f"User {user_id} consumed bonus for {model_key}. Left: {max(0, bonus_left - 1)}")
    elif usage_type == "agent_lifetime_free":
        if not current_agent_key: 
            logger.error(f"User {user_id} used 'agent_lifetime_free' for {model_key} but current_agent_key missing."); return
        await decrement_agent_lifetime_uses(user_id, current_agent_key) # user_data –±—É–¥–µ—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω–∞ –≤–Ω—É—Ç—Ä–∏ decrement
    elif usage_type == "daily_free":
        bot_data = await firestore_service.get_bot_data()
        all_counts = bot_data.get(BotConstants.FS_ALL_USER_DAILY_COUNTS_KEY, {})
        user_counts = all_counts.get(str(user_id), {})
        today = datetime.now(timezone.utc).strftime("%Y-%m-%d")
        model_usage = user_counts.get(model_key, {'date': today, 'count': 0})
        if model_usage.get('date') != today: model_usage = {'date': today, 'count': 0} # –°–±—Ä–æ—Å –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        model_usage['count'] += 1
        user_counts[model_key] = model_usage
        all_counts[str(user_id)] = user_counts
        await firestore_service.set_bot_data({BotConstants.FS_ALL_USER_DAILY_COUNTS_KEY: all_counts})
        logger.info(f"Incremented DAILY FREE for {user_id}, {model_key} to {model_usage['count']}.")
    elif usage_type == "gem":
        if gem_cost_val is None or gem_cost_val <= 0: 
            logger.error(f"User {user_id} gem usage for {model_key} but invalid gem_cost: {gem_cost_val}"); return
        balance = await get_user_gem_balance(user_id) 
        new_balance = balance - gem_cost_val
        if new_balance < 0: 
            logger.error(f"User {user_id} overdraft on gems for {model_key}. Bal: {balance}, Cost: {gem_cost_val}. Setting to 0."); new_balance = 0.0
        await update_user_gem_balance(user_id, new_balance)
        logger.info(f"User {user_id} spent {gem_cost_val:.1f} gems for {model_key}. New balance: {new_balance:.2f}")
    else: logger.error(f"Unknown usage_type '{usage_type}' for {user_id}, {model_key}")


def get_ai_service(model_key: str) -> Optional[BaseAIService]:
    model_cfg = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_cfg:
        logger.error(f"Configuration for model key '{model_key}' not found.")
        return None
    api_type = model_cfg.get("api_type")
    if api_type == BotConstants.API_TYPE_GOOGLE_GENAI: return GoogleGenAIService(model_cfg)
    elif api_type == BotConstants.API_TYPE_CUSTOM_HTTP: return CustomHttpAIService(model_cfg)
    else: 
        logger.error(f"Unknown API type '{api_type}' for model key '{model_key}'.")
        return None

async def _store_and_try_delete_message(update: Update, user_id: int, is_command_to_keep: bool = False):
    if not update.message: return
    message_id_to_process = update.message.message_id
    timestamp_now_iso = datetime.now(timezone.utc).isoformat()
    chat_id = update.effective_chat.id
    user_data_for_msg_handling = await firestore_service.get_user_data(user_id)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ "–∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ" —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∏ –Ω–µ "—Å–æ—Ö—Ä–∞–Ω—è–µ–º–æ–µ"
    prev_command_info = user_data_for_msg_handling.pop('user_command_to_delete', None)
    if prev_command_info and prev_command_info.get('message_id'):
        try:
            prev_msg_time = datetime.fromisoformat(prev_command_info['timestamp'])
            if prev_msg_time.tzinfo is None: prev_msg_time = prev_msg_time.replace(tzinfo=timezone.utc)
            if datetime.now(timezone.utc) - prev_msg_time <= timedelta(hours=48): # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–¥–∞–≤–Ω–∏–µ
                await update.get_bot().delete_message(chat_id=chat_id, message_id=prev_command_info['message_id'])
                logger.info(f"Successfully deleted previous user message {prev_command_info['message_id']}")
        except (telegram.error.BadRequest, ValueError) as e:
            logger.warning(f"Failed to delete/process previous user message {prev_command_info.get('message_id')}: {e}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not is_command_to_keep:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –µ–≥–æ —Å—Ä–∞–∑—É
        try:
            await update.message.delete()
            logger.info(f"Successfully deleted current user message {message_id_to_process} (not kept).")
        except telegram.error.BadRequest as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ä–∞–∑—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç –ø—Ä–∞–≤), –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–∞
            user_data_for_msg_handling['user_command_to_delete'] = {'message_id': message_id_to_process, 'timestamp': timestamp_now_iso}
            logger.warning(f"Failed to delete current user message {message_id_to_process}: {e}. Will try next time if stored.")
    else:
         # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å (is_command_to_keep=True), –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ –∫–∞–∫ "—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ"
         # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å—Å—è —ç—Ç–æ–π –ª–æ–≥–∏–∫–æ–π.
         user_data_for_msg_handling['user_command_message_to_keep'] = {'message_id': message_id_to_process, 'timestamp': timestamp_now_iso}

    await firestore_service.set_user_data(user_id, user_data_for_msg_handling)
    
def auto_delete_message_decorator(is_command_to_keep: bool = False):
    def decorator(func):
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
            if update.effective_user and update.message:
                 await _store_and_try_delete_message(update, update.effective_user.id, is_command_to_keep)
            return await func(update, context)
        return wrapper
    return decorator

async def get_current_model_key(user_id: int, user_data: Optional[Dict[str, Any]] = None) -> str:
    if user_data is None: user_data = await firestore_service.get_user_data(user_id)
    selected_id = user_data.get('selected_model_id', DEFAULT_MODEL_ID)
    selected_api_type = user_data.get('selected_api_type')

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º–æ–¥–µ–ª—å –ø–æ ID –∏ API —Ç–∏–ø—É
    if selected_api_type:
        for key, info in AVAILABLE_TEXT_MODELS.items():
            if info["id"] == selected_id and info.get("api_type") == selected_api_type:
                return key
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–ª–∏ API —Ç–∏–ø –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω, –∏—â–µ–º —Ç–æ–ª—å–∫–æ –ø–æ ID
    # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ API —Ç–∏–ø –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    for key, info in AVAILABLE_TEXT_MODELS.items():
        if info["id"] == selected_id:
            # –ï—Å–ª–∏ API —Ç–∏–ø –≤ –±–∞–∑–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            if user_data.get('selected_api_type') != info.get("api_type"):
                await firestore_service.set_user_data(user_id, {'selected_api_type': info.get("api_type")})
            return key
            
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –º–æ–¥–µ–ª—å
    logger.warning(f"User {user_id} had an invalid model selection (id: {selected_id}, api_type: {selected_api_type}). Resetting to default.")
    default_cfg = AVAILABLE_TEXT_MODELS[CONFIG.DEFAULT_MODEL_KEY]
    await firestore_service.set_user_data(user_id, {
        'selected_model_id': default_cfg["id"], 
        'selected_api_type': default_cfg.get("api_type")
    })
    return CONFIG.DEFAULT_MODEL_KEY

async def get_current_mode_details(user_id: int, user_data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    if user_data is None: user_data = await firestore_service.get_user_data(user_id)
    active_agent_key = user_data.get('current_ai_mode', CONFIG.DEFAULT_AI_MODE_KEY)
    agent_config = AI_MODES.get(active_agent_key)

    if not agent_config: # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–ª—é—á –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
        logger.warning(f"User {user_id} had an invalid AI mode '{active_agent_key}'. Resetting to default.")
        active_agent_key = CONFIG.DEFAULT_AI_MODE_KEY
        await firestore_service.set_user_data(user_id, {'current_ai_mode': active_agent_key})
        agent_config = AI_MODES[active_agent_key]
        
    return agent_config

def smart_truncate(text: str, max_length: int) -> Tuple[str, bool]:
    if not isinstance(text, str): text = str(text)
    if len(text) <= max_length: return text, False
    
    suffix = "\n\n(...–æ—Ç–≤–µ—Ç –±—ã–ª —Å–æ–∫—Ä–∞—â–µ–Ω)"
    adjusted_max_length = max_length - len(suffix)
    
    if adjusted_max_length <= 0: # –ï—Å–ª–∏ —Å—É—Ñ—Ñ–∏–∫—Å —É–∂–µ –¥–ª–∏–Ω–Ω–µ–µ –º–∞–∫—Å–∏–º—É–º–∞
        return text[:max_length - 3] + "...", True 
        
    truncated_text = text[:adjusted_max_length]
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–µ–∑–∞—Ç—å –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é –∏–ª–∏ –∞–±–∑–∞—Ü—É
    # –ò—â–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–µ–∑–∞–Ω–∏—è
    for separator in ['.\n', '!\n', '?\n', '\n\n', '. ', '! ', '? ', '\n', ' ']: 
        position = truncated_text.rfind(separator)
        if position != -1:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º—ã –Ω–µ –æ–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞
            if position > adjusted_max_length * 0.5: # –û–±—Ä–µ–∑–∞–µ–º, –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
                actual_cut_position = position + (len(separator) if separator.strip() else 0) # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
                return text[:actual_cut_position].strip() + suffix, True
                
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –¥–ª–∏–Ω–µ
    return text[:adjusted_max_length].strip() + suffix, True

def is_menu_button_text(text: str) -> bool:
    if text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]: return True
    for menu_data in MENU_STRUCTURE.values():
        for item in menu_data.get("items", []):
            if item["text"] == text: return True
    return False

def generate_menu_keyboard(menu_key: str) -> ReplyKeyboardMarkup:
    menu_config = MENU_STRUCTURE.get(menu_key, MENU_STRUCTURE[BotConstants.MENU_MAIN])
    keyboard_rows: List[List[KeyboardButton]] = []
    items = menu_config.get("items", []) 
    
    group_by_two_keys = [
        BotConstants.MENU_MAIN, 
        BotConstants.MENU_MODELS_SUBMENU, 
        BotConstants.MENU_GEMS_SUBMENU,
        BotConstants.MENU_AI_MODES_SUBMENU
    ]
    if menu_key in group_by_two_keys:
        for i in range(0, len(items), 2):
            row = [KeyboardButton(items[j]["text"]) for j in range(i, min(i + 2, len(items)))]
            keyboard_rows.append(row)
    else:
        for item in items: keyboard_rows.append([KeyboardButton(item["text"])])
        
    if menu_config.get("is_submenu", False):
        navigation_row = []
        if menu_config.get("parent"): # –î–æ–±–∞–≤–ª—è–µ–º "–ù–∞–∑–∞–¥" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å
            navigation_row.append(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
        navigation_row.append(KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")) # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –µ—Å—Ç—å –≤—Å–µ–≥–¥–∞ –≤ –ø–æ–¥–º–µ–Ω—é
        keyboard_rows.append(navigation_row)
        
    return ReplyKeyboardMarkup(keyboard_rows, resize_keyboard=True, one_time_keyboard=False)

async def show_menu(update: Update, user_id: int, menu_key: str, context_param: Optional[ContextTypes.DEFAULT_TYPE] = None):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –ï—Å–ª–∏ update –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ (–µ—Å–ª–∏ callback).
    –ï—Å–ª–∏ context_param –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏ update –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    bot = None
    if update and hasattr(update, 'effective_message') and update.effective_message:
        bot = update.effective_message.get_bot()
    elif context_param and hasattr(context_param, 'bot'):
        bot = context_param.bot
    
    if not bot:
        logger.error("Bot instance not available in show_menu.")
        return

    menu_cfg = MENU_STRUCTURE.get(menu_key)
    if not menu_cfg:
        logger.error(f"Menu key '{menu_key}' not found. Defaulting to main menu for user {user_id}.")
        await firestore_service.set_user_data(user_id, {'current_menu': BotConstants.MENU_MAIN})
        menu_key = BotConstants.MENU_MAIN
        menu_cfg = MENU_STRUCTURE[BotConstants.MENU_MAIN]

    await firestore_service.set_user_data(user_id, {'current_menu': menu_key})
    keyboard = generate_menu_keyboard(menu_key)
    
    message_text = menu_cfg["title"]

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç –Ω–∞ callback_query
        # –∏–ª–∏ –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –¥–∞–Ω–∞ –≤ —á–∞—Ç–µ (–∏ –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤ –õ–°)
        if update and update.message and update.message.chat_id != user_id:
             await bot.send_message(
                chat_id=user_id, 
                text=message_text, 
                reply_markup=keyboard, 
                disable_web_page_preview=True
            )
             await update.message.reply_text(f"–û—Ç–∫—Ä—ã–ª ¬´{message_text}¬ª —É –≤–∞—Å –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.", disable_web_page_preview=True)
        elif update and update.callback_query: # –ï—Å–ª–∏ —ç—Ç–æ callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
            await update.callback_query.edit_message_text(
                text=message_text, 
                reply_markup=keyboard, # InlineKeyboardMarkup –∏–ª–∏ ReplyKeyboardMarkup? –î–ª—è edit - –æ–±—ã—á–Ω–æ Inline, –Ω–æ —Ç—É—Ç context...
                                         # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –ø–æ–∫–∞–∑–∞—Ç—å ReplyKeyboard, –Ω—É–∂–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
                disable_web_page_preview=True
            )
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ ReplyKeyboard, —Ç–æ –ø–æ—Å–ª–µ edit_message_text –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ.
            # –ù–æ —Ç–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞ show_menu –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ ReplyKeyboard, –∞ –Ω–µ Inline.
            # –ü–æ—ç—Ç–æ–º—É, –µ—Å–ª–∏ —ç—Ç–æ callback_query, —ç—Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ —Ç–æ—Ç show_menu.
            # –≠—Ç–æ—Ç show_menu –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è ReplyKeyboard.
        elif update and update.message: # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
             await update.message.reply_text(
                message_text, 
                reply_markup=keyboard, 
                disable_web_page_preview=True
            )
        elif not update and context_param: # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ—Ç update
            await bot.send_message(
                chat_id=user_id,
                text=message_text,
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
        else:
            logger.warning(f"show_menu called for user {user_id} with menu {menu_key} but no way to send message.")


    except telegram.error.BadRequest as e:
        if "chat not found" in str(e).lower() or "bot was blocked by the user" in str(e).lower():
            logger.warning(f"Cannot send message to user {user_id} (chat not found or bot blocked). Menu: {menu_key}")
        elif update and update.message : # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –õ–° –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
             await update.message.reply_text(
                message_text, 
                reply_markup=keyboard, 
                disable_web_page_preview=True
            )
        else:
            logger.error(f"Error sending menu '{menu_key}' to user {user_id}: {e}", exc_info=True)
    except Exception as e:
        logger.error(f"Unexpected error in show_menu for user {user_id}, menu '{menu_key}': {e}", exc_info=True)

    logger.info(f"User {user_id} was shown menu '{menu_key}'.")
