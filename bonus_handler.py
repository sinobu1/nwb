import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.error import BadRequest
from .bot import get_user_data, set_user_data, NEWS_CHANNEL_USERNAME, NEWS_CHANNEL_LINK, NEWS_CHANNEL_BONUS_MODEL_KEY, NEWS_CHANNEL_BONUS_GENERATIONS, AVAILABLE_TEXT_MODELS, MENU_STRUCTURE

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

async def claim_news_bonus_logic(update: Update, user_id: int, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω.
    """
    user = update.effective_user
    user_data = await get_user_data(user_id)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if update.message:
        user_data['user_command_message'] = {
            'message_id': update.message.message_id,
            'timestamp': datetime.now().isoformat()
        }
        await set_user_data(user_id, user_data)
        await try_delete_user_message(update, user_id)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    parent_menu_key = user_data.get('current_menu', 'bonus_submenu')
    if parent_menu_key not in MENU_STRUCTURE:
        parent_menu_key = 'main_menu'

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞
    if not NEWS_CHANNEL_USERNAME or NEWS_CHANNEL_USERNAME == "@YourNewsChannelHandle":
        await update.message.reply_text(
            "–§—É–Ω–∫—Ü–∏—è –±–æ–Ω—É—Å–∞ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.",
            reply_markup=generate_menu_keyboard(parent_menu_key),
            parse_mode=None,
            disable_web_page_preview=True
        )
        logger.info(f"Bonus feature not configured for user {user_id}.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ–Ω—É—Å–Ω–æ–π –º–æ–¥–µ–ª–∏
    bonus_model_config = AVAILABLE_TEXT_MODELS.get(NEWS_CHANNEL_BONUS_MODEL_KEY)
    if not bonus_model_config:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –ë–æ–Ω—É—Å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=generate_menu_keyboard(parent_menu_key),
            parse_mode=None,
            disable_web_page_preview=True
        )
        logger.error(f"Bonus model '{NEWS_CHANNEL_BONUS_MODEL_KEY}' not found.")
        return

    bonus_model_name = bonus_model_config['name']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ–Ω—É—Å–∞
    if user_data.get('claimed_news_bonus', False):
        uses_left = user_data.get('news_bonus_uses_left', 0)
        reply_text = (
            f"–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ <a href='{NEWS_CHANNEL_LINK}'>–∫–∞–Ω–∞–ª</a>. "
            f"–û—Å—Ç–∞–ª–æ—Å—å <b>{uses_left}</b> –±–æ–Ω—É—Å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏ {bonus_model_name}."
        ) if uses_left > 0 else (
            f"–ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ <a href='{NEWS_CHANNEL_LINK}'>–∫–∞–Ω–∞–ª</a> –¥–ª—è –º–æ–¥–µ–ª–∏ {bonus_model_name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω."
        )
        await update.message.reply_text(
            reply_text,
            parse_mode=ParseMode.HTML,
            reply_markup=generate_menu_keyboard(parent_menu_key),
            disable_web_page_preview=True
        )
        logger.info(f"User {user_id} checked bonus status: {uses_left} uses left.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    try:
        channel = NEWS_CHANNEL_USERNAME if NEWS_CHANNEL_USERNAME.startswith('@') else f"@{NEWS_CHANNEL_USERNAME}"
        member_status = await context.bot.get_chat_member(chat_id=channel, user_id=user.id)

        if member_status.status in ['member', 'administrator', 'creator']:
            user_data['claimed_news_bonus'] = True
            user_data['news_bonus_uses_left'] = NEWS_CHANNEL_BONUS_GENERATIONS
            await set_user_data(user_id, user_data)
            await update.message.reply_text(
                f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ <a href='{NEWS_CHANNEL_LINK}'>–∫–∞–Ω–∞–ª {channel}</a>! "
                f"–ù–∞—á–∏—Å–ª–µ–Ω–æ <b>{NEWS_CHANNEL_BONUS_GENERATIONS}</b> –±–æ–Ω—É—Å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏ {bonus_model_name}.",
                parse_mode=ParseMode.HTML,
                reply_markup=generate_menu_keyboard('main_menu'),
                disable_web_page_preview=True
            )
            logger.info(f"User {user_id} claimed bonus for {bonus_model_name}.")
        else:
            await update.message.reply_text(
                f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ <a href='{NEWS_CHANNEL_LINK}'>–∫–∞–Ω–∞–ª {channel}</a> –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üéÅ –ü–æ–ª—É—á–∏—Ç—å¬ª –≤ –º–µ–Ω—é ¬´–ë–æ–Ω—É—Å¬ª.",
                parse_mode=ParseMode.HTML,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton(f"üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª {channel}", url=NEWS_CHANNEL_LINK)
                ]]),
                disable_web_page_preview=True
            )
            logger.info(f"User {user_id} not subscribed to {channel}.")
    except BadRequest as e:
        logger.error(f"Error checking channel membership for {NEWS_CHANNEL_USERNAME}: {e}")
        await update.message.reply_text(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ <a href='{NEWS_CHANNEL_LINK}'>–∫–∞–Ω–∞–ª {NEWS_CHANNEL_USERNAME}</a>. "
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(f"üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ {NEWS_CHANNEL_USERNAME}", url=NEWS_CHANNEL_LINK)
            ]]),
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error(f"Unexpected error in bonus claim for user {user_id}: {e}", exc_info=True)
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=generate_menu_keyboard(parent_menu_key),
            parse_mode=None,
            disable_web_page_preview=True
        )

async def try_delete_user_message(update: Update, user_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Å—Ç–∞—Ä—à–µ 48 —á–∞—Å–æ–≤."""
    if not update.message:
        return

    user_data = await get_user_data(user_id)
    message_data = user_data.get('user_command_message', {})
    message_id = message_data.get('message_id')
    timestamp = message_data.get('timestamp')

    if not message_id or not timestamp:
        return

    try:
        from datetime import datetime, timedelta
        msg_time = datetime.fromisoformat(timestamp)
        if datetime.now(msg_time.tzinfo) - msg_time > timedelta(hours=48):
            logger.info(f"Message {message_id} is too old, clearing record.")
            user_data.pop('user_command_message', None)
            await set_user_data(user_id, user_data)
            return
        await update.get_bot().delete_message(chat_id=update.effective_chat.id, message_id=message_id)
        logger.info(f"Deleted message {message_id} for user {user_id}.")
    except BadRequest as e:
        logger.warning(f"Failed to delete message {message_id}: {e}")
    finally:
        user_data.pop('user_command_message', None)
        await set_user_data(user_id, user_data)
