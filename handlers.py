# –í –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ handlers.py
import telegram
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode, ChatAction
from telegram.ext import ContextTypes
from datetime import datetime, timezone

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from main import (
    firestore_service,
    CONFIG,
    BotConstants,
    AVAILABLE_TEXT_MODELS,
    AI_MODES,
    MENU_STRUCTURE,
    auto_delete_message_decorator,
    get_current_model_key,
    get_current_mode_details,
    get_user_actual_limit_for_model,
    show_limits,
    claim_news_bonus_logic,
    show_subscription,
    show_help,
    is_menu_button_text,
    generate_menu_keyboard,
    _store_and_try_delete_message, # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, —Ö–æ—Ç—è –æ–Ω –≤–Ω—É—Ç—Ä–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
    check_and_log_request_attempt,
    get_ai_service,
    smart_truncate,
    increment_request_count,
    is_user_profi_subscriber,
    logger # –í–∞–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–≥–µ—Ä
)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î TELEGRAM ---

@auto_delete_message_decorator(is_command_to_keep=True) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_first_name = update.effective_user.first_name
    
    user_data_loc = await firestore_service.get_user_data(user_id)
    updates_to_user_data = {}

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if 'current_ai_mode' not in user_data_loc:
        updates_to_user_data['current_ai_mode'] = CONFIG.DEFAULT_AI_MODE_KEY
    if 'current_menu' not in user_data_loc: # current_menu –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ show_menu
        updates_to_user_data['current_menu'] = BotConstants.MENU_MAIN
        
    default_model_config = AVAILABLE_TEXT_MODELS[CONFIG.DEFAULT_MODEL_KEY]
    if 'selected_model_id' not in user_data_loc:
        updates_to_user_data['selected_model_id'] = default_model_config["id"]
    if 'selected_api_type' not in user_data_loc: # –í–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã get_current_model_key
        updates_to_user_data['selected_api_type'] = default_model_config.get("api_type")

    if updates_to_user_data:
        await firestore_service.set_user_data(user_id, updates_to_user_data)
        user_data_loc.update(updates_to_user_data) # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é

    current_model_key_val = await get_current_model_key(user_id, user_data_loc)
    mode_details_res = await get_current_mode_details(user_id, user_data_loc)
    model_details_res = AVAILABLE_TEXT_MODELS.get(current_model_key_val)

    mode_name = mode_details_res['name'] if mode_details_res else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º"
    model_name = model_details_res['name'] if model_details_res else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"

    greeting_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_first_name}!\n\n"
        f"ü§ñ –¢–µ–∫—É—â–∏–π –∞–≥–µ–Ω—Ç: <b>{mode_name}</b>\n"
        f"‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: <b>{model_name}</b>\n\n"
        "–Ø –≥–æ—Ç–æ–≤ –∫ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–∞–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò "
        "–∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."
    )
    await update.message.reply_text(
        greeting_message,
        parse_mode=ParseMode.HTML,
        reply_markup=generate_menu_keyboard(BotConstants.MENU_MAIN), # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        disable_web_page_preview=True
    )
    # –û–±–Ω–æ–≤–ª—è–µ–º current_menu –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ
    await firestore_service.set_user_data(user_id, {'current_menu': BotConstants.MENU_MAIN})
    logger.info(f"User {user_id} ({user_first_name}) started or restarted the bot.")

@auto_delete_message_decorator() # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /menu
async def open_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # user_data_loc = await firestore_service.get_user_data(user_id) # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å, show_menu –ø–æ–ª—É—á–∏—Ç —Å–∞–º
    await show_menu(update, user_id, BotConstants.MENU_MAIN)

@auto_delete_message_decorator() # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /usage
async def usage_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_limits(update, update.effective_user.id) # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É

@auto_delete_message_decorator() # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /subscribe
async def subscribe_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_subscription(update, update.effective_user.id) # –î–µ–ª–µ–≥–∏—Ä—É–µ–º

@auto_delete_message_decorator() # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /bonus
async def get_news_bonus_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await claim_news_bonus_logic(update, update.effective_user.id) # –î–µ–ª–µ–≥–∏—Ä—É–µ–º

@auto_delete_message_decorator() # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_help(update, update.effective_user.id) # –î–µ–ª–µ–≥–∏—Ä—É–µ–º

# --- –õ–û–ì–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò (–ª–∏–º–∏—Ç—ã, –ø–æ–¥–ø–∏—Å–∫–∞, –ø–æ–º–æ—â—å) ---

async def show_limits(update: Update, user_id: int):
    user_data_loc = await firestore_service.get_user_data(user_id)
    bot_data_loc = await firestore_service.get_bot_data()
    
    user_subscriptions = bot_data_loc.get(BotConstants.FS_USER_SUBSCRIPTIONS_KEY, {}).get(str(user_id), {})
    is_profi = is_user_profi_subscriber(user_subscriptions)
    
    subscription_status_display = "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π"
    if is_profi:
        try:
            valid_until_dt = datetime.fromisoformat(user_subscriptions['valid_until'])
            if valid_until_dt.tzinfo is None: valid_until_dt = valid_until_dt.replace(tzinfo=timezone.utc)
            subscription_status_display = f"–ü—Ä–æ—Ñ–∏ (–∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {valid_until_dt.strftime('%d.%m.%Y')})"
        except (ValueError, KeyError):
            subscription_status_display = "–ü—Ä–æ—Ñ–∏ (–æ—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ)"
    elif user_subscriptions.get('level') == CONFIG.PRO_SUBSCRIPTION_LEVEL_KEY: # –ü–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞, –Ω–æ –∏—Å—Ç–µ–∫–ª–∞
        try:
            expired_dt = datetime.fromisoformat(user_subscriptions['valid_until'])
            if expired_dt.tzinfo is None: expired_dt = expired_dt.replace(tzinfo=timezone.utc)
            subscription_status_display = f"–ü—Ä–æ—Ñ–∏ (–∏—Å—Ç–µ–∫–ª–∞ {expired_dt.strftime('%d.%m.%Y')})"
        except (ValueError, KeyError):
             subscription_status_display = "–ü—Ä–æ—Ñ–∏ (–∏—Å—Ç–µ–∫–ª–∞, –æ—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ)"

    parts = [f"<b>üìä –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã</b> (–°—Ç–∞—Ç—É—Å: <b>{subscription_status_display}</b>)\n"]
    today_str = datetime.now(timezone.utc).strftime("%Y-%m-%d")
    all_user_daily_counts = bot_data_loc.get(BotConstants.FS_ALL_USER_DAILY_COUNTS_KEY, {})
    user_counts_today = all_user_daily_counts.get(str(user_id), {})

    for model_key, model_config in AVAILABLE_TEXT_MODELS.items():
        if model_config.get("is_limited"):
            usage_info = user_counts_today.get(model_key, {'date': '', 'count': 0})
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π, –∑–Ω–∞—á–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ
            current_day_usage = usage_info['count'] if usage_info['date'] == today_str else 0
            
            actual_limit = await get_user_actual_limit_for_model(user_id, model_key, user_data_loc, bot_data_loc)
            
            bonus_notification = ""
            if model_key == CONFIG.NEWS_CHANNEL_BONUS_MODEL_KEY and \
               not is_profi and \
               user_data_loc.get('claimed_news_bonus', False):
                bonus_left = user_data_loc.get('news_bonus_uses_left', 0)
                if bonus_left > 0:
                    bonus_notification = f" (–≤–∫–ª—é—á–∞—è <b>{bonus_left}</b> –±–æ–Ω—É—Å–Ω—ã—Ö)"
            
            limit_display = '‚àû' if actual_limit == float('inf') else str(actual_limit)
            parts.append(f"‚ñ´Ô∏è {model_config['name']}: <b>{current_day_usage} / {limit_display}</b>{bonus_notification}")

    parts.append("") # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    
    bonus_model_cfg = AVAILABLE_TEXT_MODELS.get(CONFIG.NEWS_CHANNEL_BONUS_MODEL_KEY)
    bonus_model_name_display = bonus_model_cfg['name'] if bonus_model_cfg else "–±–æ–Ω—É—Å–Ω–æ–π –º–æ–¥–µ–ª–∏"

    if not user_data_loc.get('claimed_news_bonus', False):
        parts.append(f'üéÅ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ <a href="{CONFIG.NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π</a>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ({CONFIG.NEWS_CHANNEL_BONUS_GENERATIONS} –¥–ª—è {bonus_model_name_display})! –ù–∞–∂–º–∏—Ç–µ ¬´üéÅ –ë–æ–Ω—É—Å¬ª –≤ –º–µ–Ω—é –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.')
    elif (bonus_left_val := user_data_loc.get('news_bonus_uses_left', 0)) > 0:
        parts.append(f"‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å <b>{bonus_left_val}</b> –±–æ–Ω—É—Å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π —Å –∫–∞–Ω–∞–ª–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –º–æ–¥–µ–ª–∏ {bonus_model_name_display}.")
    else: # –ë–æ–Ω—É—Å –±—ã–ª –ø–æ–ª—É—á–µ–Ω, –Ω–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        parts.append(f"‚ÑπÔ∏è –ë–æ–Ω—É—Å —Å –∫–∞–Ω–∞–ª–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –º–æ–¥–µ–ª–∏ {bonus_model_name_display} –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        
    if not is_profi:
        parts.append("\nüíé –•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–æ–≤ –∏ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–æ–¥–µ–ª—è–º? –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É Profi —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /subscribe –∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.")
        
    current_menu_for_reply = user_data_loc.get('current_menu', BotConstants.MENU_LIMITS_SUBMENU)
    await update.message.reply_text(
        "\n".join(parts), 
        parse_mode=ParseMode.HTML, 
        reply_markup=generate_menu_keyboard(current_menu_for_reply),
        disable_web_page_preview=True
    )

async def claim_news_bonus_logic(update: Update, user_id: int):
    user_data_loc = await firestore_service.get_user_data(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏–∑ –∫–∞–∫–æ–≥–æ –º–µ–Ω—é –±—ã–ª –≤—ã–∑–≤–∞–Ω –±–æ–Ω—É—Å, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è —Ç—É–¥–∞ –∂–µ
    parent_menu_key = user_data_loc.get('current_menu', BotConstants.MENU_BONUS_SUBMENU)
    current_menu_config = MENU_STRUCTURE.get(parent_menu_key, MENU_STRUCTURE[BotConstants.MENU_MAIN])
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–º–µ–Ω—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–º–∞–Ω–¥—É /bonus –∏–∑ –Ω–∏–æ—Ç–∫—É–¥–∞), 
    # —Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –±—É–¥–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    if not current_menu_config.get("is_submenu"):
        reply_menu_key = BotConstants.MENU_MAIN 
    else: # –ò–Ω–∞—á–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–º–µ–Ω—é –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        reply_menu_key = current_menu_config.get("parent", BotConstants.MENU_MAIN)


    bonus_model_config = AVAILABLE_TEXT_MODELS.get(CONFIG.NEWS_CHANNEL_BONUS_MODEL_KEY)
    if not bonus_model_config:
        await update.message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–Ω—É—Å–Ω–æ–π –º–æ–¥–µ–ª–∏ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=generate_menu_keyboard(reply_menu_key)
        )
        return
        
    bonus_model_name_display = bonus_model_config['name']

    if user_data_loc.get('claimed_news_bonus', False):
        uses_left = user_data_loc.get('news_bonus_uses_left', 0)
        reply_text = f"–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª. "
        if uses_left > 0:
            reply_text += f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å: <b>{uses_left}</b> –±–æ–Ω—É—Å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏ {bonus_model_name_display}."
        else:
            reply_text += f"–ë–æ–Ω—É—Å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ {bonus_model_name_display} —É–∂–µ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã."
        await update.message.reply_text(
            reply_text, 
            parse_mode=ParseMode.HTML, 
            reply_markup=generate_menu_keyboard(reply_menu_key), # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
            disable_web_page_preview=True
        )
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
        member_status = await update.get_bot().get_chat_member(chat_id=CONFIG.NEWS_CHANNEL_USERNAME, user_id=user_id)
        if member_status.status in ['member', 'administrator', 'creator']:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –Ω–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
            await firestore_service.set_user_data(user_id, {
                'claimed_news_bonus': True, 
                'news_bonus_uses_left': CONFIG.NEWS_CHANNEL_BONUS_GENERATIONS
            })
            success_text = (
                f'üéâ –û—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ <a href="{CONFIG.NEWS_CHANNEL_LINK}">{CONFIG.NEWS_CHANNEL_USERNAME}</a>! '
                f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: <b>{CONFIG.NEWS_CHANNEL_BONUS_GENERATIONS}</b> "
                f"–≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏ {bonus_model_name_display}."
            )
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞, –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await update.message.reply_text(
                success_text, 
                parse_mode=ParseMode.HTML, 
                reply_markup=generate_menu_keyboard(BotConstants.MENU_MAIN), 
                disable_web_page_preview=True
            )
            await firestore_service.set_user_data(user_id, {'current_menu': BotConstants.MENU_MAIN}) # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            fail_text = (
                f'–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª '
                f'<a href="{CONFIG.NEWS_CHANNEL_LINK}">{CONFIG.NEWS_CHANNEL_USERNAME}</a>. '
                f'–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üéÅ –ü–æ–ª—É—á–∏—Ç—å¬ª –≤ –º–µ–Ω—é ¬´–ë–æ–Ω—É—Å¬ª.'
            )
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∫–∞–Ω–∞–ª
            inline_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(f"üì¢ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª {CONFIG.NEWS_CHANNEL_USERNAME}", url=CONFIG.NEWS_CHANNEL_LINK)]
            ])
            await update.message.reply_text(
                fail_text, 
                parse_mode=ParseMode.HTML, 
                reply_markup=inline_keyboard, 
                disable_web_page_preview=True # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Å—ã–ª–∫–∏, —Ç–∞–∫ –∫–∞–∫ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞
            )
    except telegram.error.TelegramError as e: # –ë–æ–ª–µ–µ –æ–±—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ Telegram
        logger.error(f"Telegram API error during news bonus claim for user {user_id}: {e}", exc_info=True)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.",
            reply_markup=generate_menu_keyboard(reply_menu_key) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
        )
    except Exception as e: # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
        logger.error(f"Unexpected error during news bonus claim for user {user_id}: {e}", exc_info=True)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è.",
            reply_markup=generate_menu_keyboard(reply_menu_key)
        )

async def show_subscription(update: Update, user_id: int):
    user_data_loc = await firestore_service.get_user_data(user_id)
    bot_data_loc = await firestore_service.get_bot_data()
    user_subscriptions = bot_data_loc.get(BotConstants.FS_USER_SUBSCRIPTIONS_KEY, {}).get(str(user_id), {})
    is_active_profi = is_user_profi_subscriber(user_subscriptions)

    parts = ["<b>üíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ Profi</b>"]

    if is_active_profi:
        try:
            valid_until_dt = datetime.fromisoformat(user_subscriptions['valid_until'])
            if valid_until_dt.tzinfo is None: valid_until_dt = valid_until_dt.replace(tzinfo=timezone.utc)
            parts.append(f"\n‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Profi <b>–∞–∫—Ç–∏–≤–Ω–∞</b> –¥–æ <b>{valid_until_dt.strftime('%d.%m.%Y')}</b>.")
            parts.append("–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ –ò–ò.")
        except (ValueError, KeyError):
            parts.append("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Profi, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    else:
        if user_subscriptions.get('level') == CONFIG.PRO_SUBSCRIPTION_LEVEL_KEY: # –ë—ã–ª–∞, –Ω–æ –∏—Å—Ç–µ–∫–ª–∞
            try:
                expired_dt = datetime.fromisoformat(user_subscriptions['valid_until'])
                if expired_dt.tzinfo is None: expired_dt = expired_dt.replace(tzinfo=timezone.utc)
                parts.append(f"\n‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Profi –∏—Å—Ç–µ–∫–ª–∞ <b>{expired_dt.strftime('%d.%m.%Y')}</b>.")
            except (ValueError, KeyError):
                parts.append("\n‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Profi –∏—Å—Ç–µ–∫–ª–∞ (–æ—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ).")

        parts.append("\n–ü–æ–¥–ø–∏—Å–∫–∞ <b>Profi</b> –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:")
        parts.append("‚ñ´Ô∏è –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –ò–ò.")
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
        pro_models = [m_cfg["name"] for m_key, m_cfg in AVAILABLE_TEXT_MODELS.items() 
                      if m_cfg.get("limit_type") == "subscription_custom_pro" and m_cfg.get("limit_if_no_subscription", -1) == 0]
        if pro_models:
            parts.append(f"‚ñ´Ô∏è –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –º–æ–¥–µ–ª—è–º: {', '.join(pro_models)}.")
        else: # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç–∞–∫–∏—Ö –º–æ–¥–µ–ª–µ–π –Ω–µ—Ç, –Ω–æ –ª–æ–≥–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å—Ç—å
             parts.append(f"‚ñ´Ô∏è –î–æ—Å—Ç—É–ø –∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –º–æ–¥–µ–ª—è–º, —Ç—Ä–µ–±—É—é—â–∏–º –ø–æ–¥–ø–∏—Å–∫—É.")

        parts.append("\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ Profi, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe "
                     "–∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É ¬´üíé –ö—É–ø–∏—Ç—å¬ª –≤ –º–µ–Ω—é ¬´–ü–æ–¥–ø–∏—Å–∫–∞¬ª.") # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É/–∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏ –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç /subscribe

    current_menu_for_reply = user_data_loc.get('current_menu', BotConstants.MENU_SUBSCRIPTION_SUBMENU)
    await update.message.reply_text(
        "\n".join(parts), 
        parse_mode=ParseMode.HTML, 
        reply_markup=generate_menu_keyboard(current_menu_for_reply),
        disable_web_page_preview=True
    )
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /subscribe –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—á–µ—Ç
    # if update.message.text == "/subscribe" and not is_active_profi:
    #     await _send_profi_invoice(update, context) # –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞


async def show_help(update: Update, user_id: int):
    user_data_loc = await firestore_service.get_user_data(user_id)
    help_text = (
        "<b>‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "–Ø –≤–∞—à –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í–æ—Ç –∫–∞–∫ —Å–æ –º–Ω–æ–π —Ä–∞–±–æ—Ç–∞—Ç—å:\n\n"
        "1.  <b>–ó–∞–ø—Ä–æ—Å—ã –∫ –ò–ò</b>: –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—á—É –≤ —á–∞—Ç. –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞ –∏ –º–æ–¥–µ–ª–∏.\n\n"
        "2.  <b>–ú–µ–Ω—é</b>: –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:\n"
        "    ‚ñ´Ô∏è ¬´<b>ü§ñ –ê–≥–µ–Ω—Ç—ã –ò–ò</b>¬ª: –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –ò–ò (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π', '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π'). –≠—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–∏–ª—å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤.\n"
        "    ‚ñ´Ô∏è ¬´<b>‚öôÔ∏è –ú–æ–¥–µ–ª–∏ –ò–ò</b>¬ª: –ü–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –º–µ–∂–¥—É –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —è–∑—ã–∫–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏. –†–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Ä–∞–∑–Ω—ã–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –ª–∏–º–∏—Ç—ã.\n"
        "    ‚ñ´Ô∏è ¬´<b>üìä –õ–∏–º–∏—Ç—ã</b>¬ª: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏.\n"
        "    ‚ñ´Ô∏è ¬´<b>üéÅ –ë–æ–Ω—É—Å</b>¬ª: –ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª.\n"
        "    ‚ñ´Ô∏è ¬´<b>üíé –ü–æ–¥–ø–∏—Å–∫–∞</b>¬ª: –£–∑–Ω–∞–π—Ç–µ –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö Profi –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∫–∞–∫ –µ–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.\n"
        "    ‚ñ´Ô∏è ¬´<b>‚ùì –ü–æ–º–æ—â—å</b>¬ª: –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏.\n\n"
        "3.  <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b> (–¥—É–±–ª–∏—Ä—É—é—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é):\n"
        "    ‚ñ´Ô∏è /start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "    ‚ñ´Ô∏è /menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
        "    ‚ñ´Ô∏è /usage - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã.\n"
        "    ‚ñ´Ô∏è /subscribe - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Profi –ø–æ–¥–ø–∏—Å–∫–µ.\n"
        "    ‚ñ´Ô∏è /bonus - –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.\n"
        "    ‚ñ´Ô∏è /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ) –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start."
    )
    current_menu_for_reply = user_data_loc.get('current_menu', BotConstants.MENU_HELP_SUBMENU)
    await update.message.reply_text(
        help_text, 
        parse_mode=ParseMode.HTML, 
        reply_markup=generate_menu_keyboard(current_menu_for_reply),
        disable_web_page_preview=True
    )

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö –ú–ï–ù–Æ ---
async def menu_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return  # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    user_id = update.effective_user.id
    button_text = update.message.text.strip()

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ handle_text)
    # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω–∞, —á—Ç–æ–±—ã menu_button_handler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∫–Ω–æ–ø–∫–∏.
    if not is_menu_button_text(button_text):
        return 

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä @auto_delete_message_decorator –∑–¥–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, 
    # —Ç–∞–∫ –∫–∞–∫ –Ω–∞–º –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ *–ø–æ—Å–ª–µ* —Ç–æ–≥–æ, –∫–∞–∫ –º—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏, —á—Ç–æ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞.
    # –ï—Å–ª–∏ –±—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –±—ã–ª –∑–¥–µ—Å—å, –æ–Ω –±—ã —É–¥–∞–ª—è–ª –∏ –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, 
    # –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –≤ handle_text.
    try:
        await update.message.delete()
        logger.info(f"Deleted menu button message '{button_text}' from user {user_id}.")
    except telegram.error.TelegramError as e:
        logger.warning(f"Failed to delete menu button message '{button_text}' from user {user_id}: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –¥–∞–∂–µ –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å


    user_data_loc = await firestore_service.get_user_data(user_id)
    current_menu_key = user_data_loc.get('current_menu', BotConstants.MENU_MAIN)
    logger.info(f"User {user_id} pressed menu button '{button_text}' while in menu '{current_menu_key}'.")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    if button_text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        parent_key = MENU_STRUCTURE.get(current_menu_key, {}).get("parent", BotConstants.MENU_MAIN)
        await show_menu(update, user_id, parent_key, user_data_loc) # –ü–µ—Ä–µ–¥–∞–µ–º user_data_loc –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ show_menu
        return 
    elif button_text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await show_menu(update, user_id, BotConstants.MENU_MAIN, user_data_loc)
        return

    # –ü–æ–∏—Å–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    action_item_found = None
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ —Ç–µ–∫—É—â–µ–º –º–µ–Ω—é, –∑–∞—Ç–µ–º –≤–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ current_menu —É—Å—Ç–∞—Ä–µ–ª)
    # –≠—Ç–æ –Ω–µ–º–Ω–æ–≥–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ, –µ—Å–ª–∏ current_menu –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª–µ–Ω, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
    search_menus_order = [current_menu_key] + [key for key in MENU_STRUCTURE if key != current_menu_key]

    for menu_key_to_search in search_menus_order:
        menu_config_to_search = MENU_STRUCTURE.get(menu_key_to_search, {})
        for item in menu_config_to_search.get("items", []):
            if item["text"] == button_text:
                action_item_found = item
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–Ω—é, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–µ–∞–ª—å–Ω–æ –ø—Ä–∏—à–ª–æ –¥–µ–π—Å—Ç–≤–∏–µ, –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
                # –≠—Ç–æ –≤–∞–∂–Ω–æ, –µ—Å–ª–∏ current_menu –≤ user_data –Ω–µ —Å–æ–≤–ø–∞–ª —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∫–Ω–æ–ø–∫–∏.
                # –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ action_origin_menu_key –±—É–¥–µ—Ç —Ä–∞–≤–µ–Ω current_menu_key.
                action_origin_menu_key = menu_key_to_search 
                break
        if action_item_found:
            break
    
    if not action_item_found:
        logger.warning(f"Menu button '{button_text}' pressed by user {user_id} was not matched to any action "
                       f"despite is_menu_button_text() returning True. Current menu was '{current_menu_key}'.")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=generate_menu_keyboard(current_menu_key) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é (–∏–ª–∏ —Ç–æ, —á—Ç–æ —Å—á–∏—Ç–∞–ª–æ—Å—å —Ç–µ–∫—É—â–∏–º)
        )
        return

    action_type = action_item_found["action"]
    action_target = action_item_found["target"]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–µ –º–µ–Ω—é –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è (–æ–±—ã—á–Ω–æ —ç—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º action_origin_menu_key, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é, –≥–¥–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞.
    return_menu_key_after_action = MENU_STRUCTURE.get(action_origin_menu_key, {}).get("parent", BotConstants.MENU_MAIN)
    if action_origin_menu_key == BotConstants.MENU_MAIN: # –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, —Ç–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–µ–≥–æ
        return_menu_key_after_action = BotConstants.MENU_MAIN


    # --- –î–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ —Ç–∏–ø—É ---
    if action_type == BotConstants.CALLBACK_ACTION_SUBMENU:
        await show_menu(update, user_id, action_target, user_data_loc)
    
    elif action_type == BotConstants.CALLBACK_ACTION_SET_AGENT:
        response_message_text = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω."
        if action_target in AI_MODES and action_target != "gemini_pro_custom_mode": # gemini_pro_custom_mode —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            await firestore_service.set_user_data(user_id, {'current_ai_mode': action_target})
            agent_details = AI_MODES[action_target]
            response_message_text = (f"ü§ñ –ê–≥–µ–Ω—Ç –ò–ò –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{agent_details['name']}</b>.\n"
                                     f"{agent_details.get('welcome', '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!')}")
        # –ü–æ—Å–ª–µ —Å–º–µ–Ω—ã –∞–≥–µ–Ω—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é (–æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ –≤ –≤—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤)
        await update.message.reply_text(
            response_message_text, 
            parse_mode=ParseMode.HTML, 
            reply_markup=generate_menu_keyboard(return_menu_key_after_action), 
            disable_web_page_preview=True
        )
        await firestore_service.set_user_data(user_id, {'current_menu': return_menu_key_after_action})

    elif action_type == BotConstants.CALLBACK_ACTION_SET_MODEL:
        response_message_text = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞."
        if action_target in AVAILABLE_TEXT_MODELS:
            model_info = AVAILABLE_TEXT_MODELS[action_target]
            update_payload = {
                'selected_model_id': model_info["id"], 
                'selected_api_type': model_info["api_type"]
            }
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç Grok –∏–ª–∏ GPT-4o mini, –∞ —Ç–µ–∫—É—â–∏–π –∞–≥–µ–Ω—Ç "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π" (–¥–ª—è Gemini Pro),
            # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ, —Ç–∞–∫ –∫–∞–∫ "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π" –∞–≥–µ–Ω—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ–Ω –¥–ª—è Gemini Pro.
            if action_target in ["custom_api_grok_3", "custom_api_gpt_4o_mini"] and \
               user_data_loc.get('current_ai_mode') == "gemini_pro_custom_mode":
                update_payload['current_ai_mode'] = CONFIG.DEFAULT_AI_MODE_KEY
                logger.info(f"User {user_id} selected model {action_target}, AI mode reset from gemini_pro_custom_mode to default.")

            await firestore_service.set_user_data(user_id, update_payload)
            user_data_loc.update(update_payload) # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è get_user_actual_limit_for_model

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            bot_data_cache = await firestore_service.get_bot_data() # –ö–µ—à–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –¥–≤–∞ –∑–∞–ø—Ä–æ—Å–∞
            today_string_val = datetime.now(timezone.utc).strftime("%Y-%m-%d")
            user_model_counts = bot_data_cache.get(BotConstants.FS_ALL_USER_DAILY_COUNTS_KEY, {}).get(str(user_id), {})
            model_daily_usage = user_model_counts.get(action_target, {'date': '', 'count': 0})
            current_usage_string = str(model_daily_usage['count']) if model_daily_usage['date'] == today_string_val else "0"
            
            actual_limit_string = await get_user_actual_limit_for_model(user_id, action_target, user_data_loc, bot_data_cache)
            limit_display_string = '‚àû' if actual_limit_string == float('inf') else str(actual_limit_string)
            
            response_message_text = (f"‚öôÔ∏è –ú–æ–¥–µ–ª—å –ò–ò –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: <b>{model_info['name']}</b>.\n"
                                     f"–í–∞—à —Ç–µ–∫—É—â–∏–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏: {current_usage_string} / {limit_display_string}.")
        
        await update.message.reply_text(
            response_message_text, 
            parse_mode=ParseMode.HTML, 
            reply_markup=generate_menu_keyboard(return_menu_key_after_action), 
            disable_web_page_preview=True
        )
        await firestore_service.set_user_data(user_id, {'current_menu': return_menu_key_after_action})

    elif action_type == BotConstants.CALLBACK_ACTION_SHOW_LIMITS:
        await show_limits(update, user_id)
    elif action_type == BotConstants.CALLBACK_ACTION_CHECK_BONUS:
        await claim_news_bonus_logic(update, user_id)
    elif action_type == BotConstants.CALLBACK_ACTION_SHOW_SUBSCRIPTION:
        await show_subscription(update, user_id) # –¢–∞–∫–∂–µ –º–æ–∂–µ—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫—É, –µ—Å–ª–∏ /subscribe
    elif action_type == BotConstants.CALLBACK_ACTION_SHOW_HELP:
        await show_help(update, user_id)
    else:
        logger.warning(f"Unknown action type '{action_type}' for button '{button_text}' (target: '{action_target}') by user {user_id}.")
        await update.message.reply_text(
            "–í—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=generate_menu_keyboard(current_menu_key) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
        )
    return # –Ø–≤–Ω—ã–π return –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ü–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô (–ó–ê–ü–†–û–°–´ –ö AI) ---
# @auto_delete_message_decorator() # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ _store_and_try_delete_message –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ handle_text
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not update.message or not update.message.text:
        return # –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

    user_message_text = update.message.text.strip()

    # –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ–º –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    # –ö–æ–º–∞–Ω–¥—ã (/start –∏ —Ç.–¥.) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º —É —Å–≤–æ–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤.
    # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ menu_button_handler (—Ç–∞–º —Å–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ).
    # –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç –∫ –ò–ò.
    # is_command_to_keep=False –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –∏ –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–¥–∞–ª–∏—Ç—å.
    await _store_and_try_delete_message(update, user_id, is_command_to_keep=False)


    # –ï—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä—ã–π –º–æ–≥ "–ø—Ä–æ—Å–∫–æ—á–∏—Ç—å"
    # –≠—Ç–æ –≤–∞–∂–Ω–æ, –µ—Å–ª–∏ menu_button_handler –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏–ª–∏ –Ω–µ –±—ã–ª –ø–µ—Ä–≤—ã–º –≤ –æ—á–µ—Ä–µ–¥–∏.
    if is_menu_button_text(user_message_text): 
        logger.debug(f"User {user_id} sent menu button text '{user_message_text}' that reached handle_text. Explicitly ignoring.")
        # –ï—Å–ª–∏ —ç—Ç–æ –≤—Å–µ-—Ç–∞–∫–∏ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, menu_button_handler –¥–æ–ª–∂–µ–Ω –±—ã–ª –µ–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ª–∏–±–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å, –ª–∏–±–æ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É menu_button_handler,
        # –Ω–æ –ª—É—á—à–µ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ menu_button_handler –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (—á–µ—Ä–µ–∑ –≥—Ä—É–ø–ø—ã —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤).
        # –î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–µ –≤ –ò–ò.
        return

    if len(user_message_text) < CONFIG.MIN_AI_REQUEST_LENGTH:
        user_data_cache = await firestore_service.get_user_data(user_id) # –ù—É–∂–µ–Ω –¥–ª—è generate_menu_keyboard
        await update.message.reply_text(
            "–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –µ–≥–æ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ.",
            reply_markup=generate_menu_keyboard(user_data_cache.get('current_menu', BotConstants.MENU_MAIN))
        )
        return

    logger.info(f"User {user_id} sent AI request (first 100 chars): '{user_message_text[:100]}...'")
    
    user_data_cache = await firestore_service.get_user_data(user_id) 
    current_model_key_val = await get_current_model_key(user_id, user_data_cache)
    
    can_proceed, limit_message, _ = await check_and_log_request_attempt(user_id, current_model_key_val)
    if not can_proceed:
        await update.message.reply_text(
            limit_message, 
            parse_mode=ParseMode.HTML, 
            reply_markup=generate_menu_keyboard(user_data_cache.get('current_menu', BotConstants.MENU_MAIN)), 
            disable_web_page_preview=True
        )
        # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω, check_and_log_request_attempt —É–∂–µ –º–æ–≥ —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
        # –û–±–Ω–æ–≤–∏–º user_data_cache, —á—Ç–æ–±—ã –º–µ–Ω—é –±—ã–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
        user_data_cache = await firestore_service.get_user_data(user_id) 
        await update.message.reply_text( # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏
             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
             reply_markup=generate_menu_keyboard(user_data_cache.get('current_menu', BotConstants.MENU_MAIN))
        )
        return

    # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –±—ã–ª –∏—Å—á–µ—Ä–ø–∞–Ω –∏ –º–æ–¥–µ–ª—å —Å–º–µ–Ω–∏–ª–∞—Å—å, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π current_model_key_val
    # –≠—Ç–æ –≤–∞–∂–Ω–æ, –µ—Å–ª–∏ check_and_log_request_attempt –∏–∑–º–µ–Ω–∏–ª –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    current_model_key_val = await get_current_model_key(user_id, user_data_cache) # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ —Å–ª—É—á–∞–π —Å–º–µ–Ω—ã
    ai_service = get_ai_service(current_model_key_val)

    if not ai_service:
        logger.critical(f"Could not get AI service for model key '{current_model_key_val}' for user {user_id}.")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ AI –º–æ–¥–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start.",
            reply_markup=generate_menu_keyboard(user_data_cache.get('current_menu', BotConstants.MENU_MAIN))
        )
        return

    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    
    mode_details_val = await get_current_mode_details(user_id, user_data_cache)
    system_prompt_val = mode_details_val["prompt"]
    
    ai_response_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç." # –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    try:
        ai_response_text = await ai_service.generate_response(system_prompt_val, user_message_text)
    except Exception as e: # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö
        logger.error(f"Unhandled exception in AI service {type(ai_service).__name__} for model {current_model_key_val}: {e}", exc_info=True)
        ai_response_text = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–¥–µ–ª—å—é {ai_service.model_config['name']}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    final_reply_text, _ = smart_truncate(ai_response_text, CONFIG.MAX_MESSAGE_LENGTH_TELEGRAM)
    await increment_request_count(user_id, current_model_key_val)
    
    await update.message.reply_text(
        final_reply_text, 
        reply_markup=generate_menu_keyboard(user_data_cache.get('current_menu', BotConstants.MENU_MAIN)), 
        disable_web_page_preview=True # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫ –≤ –æ—Ç–≤–µ—Ç–∞—Ö –ò–ò
    )
    logger.info(f"Successfully sent AI response (model: {current_model_key_val}) to user {user_id}.")


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô ---
async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ payload —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    # –ù–∞–ø—Ä–∏–º–µ—Ä, "subscription_profi_access_v1_user_12345"
    # –ó–¥–µ—Å—å —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∂–µ
    expected_payload_part = f"subscription_{CONFIG.PRO_SUBSCRIPTION_LEVEL_KEY}" 
    if query.invoice_payload and expected_payload_part in query.invoice_payload:
        await query.answer(ok=True)
        logger.info(f"PreCheckoutQuery OK for payload: {query.invoice_payload}")
    else:
        await query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç –∑–∞–Ω–æ–≤–æ.")
        logger.warning(f"PreCheckoutQuery FAILED. Expected '{expected_payload_part}' in payload, got: {query.invoice_payload}")

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    payment_info = update.message.successful_payment
    invoice_payload = payment_info.invoice_payload # –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    logger.info(f"Successful payment received from user {user_id}. Amount: {payment_info.total_amount} {payment_info.currency}. Payload: {invoice_payload}")

    # TODO: –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é payload, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ –æ–ø–ª–∞—Ç–∞ –∑–∞ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É.
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–≤–ª–µ—á—å user_id –∏–∑ payload –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å —Å update.effective_user.id.

    subscription_days = 30 # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
    
    bot_data = await firestore_service.get_bot_data()
    user_subscriptions_map = bot_data.get(BotConstants.FS_USER_SUBSCRIPTIONS_KEY, {})
    current_user_subscription = user_subscriptions_map.get(str(user_id), {})
    
    now_utc = datetime.now(timezone.utc)
    subscription_start_date = now_utc

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Profi, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –µ–µ
    if is_user_profi_subscriber(current_user_subscription):
        try:
            previous_valid_until = datetime.fromisoformat(current_user_subscription['valid_until'])
            if previous_valid_until.tzinfo is None: 
                previous_valid_until = previous_valid_until.replace(tzinfo=timezone.utc)
            
            # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫–ª–∞, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–π
            if previous_valid_until > now_utc:
                subscription_start_date = previous_valid_until
        except (ValueError, KeyError):
            logger.warning(f"Could not parse previous 'valid_until' for user {user_id}. Starting new subscription from now.")
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ —Å—Ç–∞—Ä–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞

    new_valid_until_date = subscription_start_date + timedelta(days=subscription_days)

    user_subscriptions_map[str(user_id)] = {
        'level': CONFIG.PRO_SUBSCRIPTION_LEVEL_KEY,
        'valid_until': new_valid_until_date.isoformat(),
        'last_payment_amount': payment_info.total_amount, # –°—É–º–º–∞ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –≤–∞–ª—é—Ç—ã (–∫–æ–ø–µ–π–∫–∏, —Ü–µ–Ω—Ç—ã)
        'currency': payment_info.currency,
        'purchase_date': now_utc.isoformat(),
        'telegram_payment_charge_id': payment_info.telegram_payment_charge_id, # –í–∞–∂–Ω–æ –¥–ª—è —Å–≤–µ—Ä–∫–∏
        'provider_payment_charge_id': payment_info.provider_payment_charge_id # –í–∞–∂–Ω–æ –¥–ª—è —Å–≤–µ—Ä–∫–∏
    }
    
    await firestore_service.set_bot_data({BotConstants.FS_USER_SUBSCRIPTIONS_KEY: user_subscriptions_map})

    confirmation_message = (
        f"üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ <b>Profi</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ "
        f"–¥–æ <b>{new_valid_until_date.strftime('%d.%m.%Y')}</b>.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Profi."
    )
    
    user_data_for_reply_menu = await firestore_service.get_user_data(user_id)
    await update.message.reply_text(
        confirmation_message, 
        parse_mode=ParseMode.HTML, 
        reply_markup=generate_menu_keyboard(user_data_for_reply_menu.get('current_menu', BotConstants.MENU_MAIN))
    )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–π –æ–ø–ª–∞—Ç–µ
    if CONFIG.ADMIN_ID:
        try:
            admin_message = (
                f"üîî –ù–æ–≤–∞—è —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞!\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({update.effective_user.full_name})\n"
                f"–°—É–º–º–∞: {payment_info.total_amount / 100} {payment_info.currency}\n" # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –æ–±—ã—á–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
                f"–ü–æ–¥–ø–∏—Å–∫–∞ Profi –¥–æ: {new_valid_until_date.strftime('%d.%m.%Y')}\n"
                f"Payload: {invoice_payload}"
            )
            await context.bot.send_message(CONFIG.ADMIN_ID, admin_message)
        except Exception as e:
            logger.error(f"Failed to send payment notification to admin: {e}")


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ---
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    
    # –°–æ–±–∏—Ä–∞–µ–º traceback –¥–ª—è –ª–æ–≥–æ–≤ –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É
    tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
    tb_string = "".join(tb_list)

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    if isinstance(update, Update) and update.effective_chat:
        user_data_for_error_reply = {} # –ü—É—Å—Ç–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if update.effective_user: # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–µ–Ω—é
             user_data_for_error_reply = await firestore_service.get_user_data(update.effective_user.id)
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. "
                     "–Ø —É–∂–µ —É–≤–µ–¥–æ–º–∏–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
                reply_markup=generate_menu_keyboard(user_data_for_error_reply.get('current_menu', BotConstants.MENU_MAIN))
            )
        except Exception as e:
            logger.error(f"Failed to send error message to user {update.effective_chat.id}: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if CONFIG.ADMIN_ID and isinstance(update, Update) and update.effective_user: # –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ effective_user
        error_details = (
            f"ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n"
            f"–¢–∏–ø –æ—à–∏–±–∫–∏: {context.error.__class__.__name__}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {context.error}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {update.effective_user.id} (@{update.effective_user.username})\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.message.text if update.message else 'N/A'}\n\n"
            f"Traceback (–ø–µ—Ä–≤—ã–µ 3500 —Å–∏–º–≤–æ–ª–æ–≤):\n```\n{tb_string[:3500]}\n```"
        )
        try:
            await context.bot.send_message(CONFIG.ADMIN_ID, error_details, parse_mode=ParseMode.MARKDOWN_V2)
        except Exception as e:
            logger.error(f"Failed to send detailed error report to admin: {e}. Fallback to plain text.")
            try: # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ø—Ä–æ—Å—Ç–æ–º —Ç–µ–∫—Å—Ç–µ, –µ—Å–ª–∏ Markdown –Ω–µ —É–¥–∞–ª—Å—è
                 await context.bot.send_message(CONFIG.ADMIN_ID, error_details.replace("```", ""))
            except Exception as e_plain:
                 logger.error(f"Failed to send plain text detailed error report to admin: {e_plain}")
