# handlers.py
import traceback
import asyncio # –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ Google AI SDK
import io # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–π—Ç–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
from datetime import datetime, timezone, timedelta
import telegram
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from telegram.constants import ParseMode, ChatAction
from telegram.ext import ContextTypes

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∏–∑ –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞ config.py
from config import (
    firestore_service, CONFIG, BotConstants, AVAILABLE_TEXT_MODELS,
    AI_MODES, MENU_STRUCTURE, auto_delete_message_decorator,
    get_current_model_key, get_current_mode_details,
    is_menu_button_text, generate_menu_keyboard, _store_and_try_delete_message,
    check_and_log_request_attempt, get_ai_service, smart_truncate,
    increment_request_count, logger, show_menu,
    get_user_gem_balance, update_user_gem_balance, get_daily_usage_for_model,
    genai # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º genai –∏–∑ config, –≥–¥–µ –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î TELEGRAM ---

@auto_delete_message_decorator(is_command_to_keep=True)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_first_name = update.effective_user.first_name
    
    user_data_loc = await firestore_service.get_user_data(user_id)
    updates_to_user_data = {} 

    if 'current_ai_mode' not in user_data_loc:
        updates_to_user_data['current_ai_mode'] = CONFIG.DEFAULT_AI_MODE_KEY
    if 'current_menu' not in user_data_loc:
        updates_to_user_data['current_menu'] = BotConstants.MENU_MAIN
        
    default_model_config = AVAILABLE_TEXT_MODELS[CONFIG.DEFAULT_MODEL_KEY]
    if 'selected_model_id' not in user_data_loc:
        updates_to_user_data['selected_model_id'] = default_model_config["id"]
    if 'selected_api_type' not in user_data_loc:
        updates_to_user_data['selected_api_type'] = default_model_config.get("api_type")

    if 'gem_balance' not in user_data_loc:
        updates_to_user_data['gem_balance'] = CONFIG.GEMS_FOR_NEW_USER 

    if updates_to_user_data:
        await firestore_service.set_user_data(user_id, updates_to_user_data)
        user_data_loc.update(updates_to_user_data)

    current_model_key_val = await get_current_model_key(user_id, user_data_loc)
    mode_details_res = await get_current_mode_details(user_id, user_data_loc)
    model_details_res = AVAILABLE_TEXT_MODELS.get(current_model_key_val)

    mode_name = mode_details_res.get('name', 'N/A')
    model_name = model_details_res.get('name', 'N/A')

    greeting_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_first_name}!\n\n"
        f"ü§ñ –¢–µ–∫—É—â–∏–π –∞–≥–µ–Ω—Ç: <b>{mode_name}</b>\n"
        f"‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: <b>{model_name}</b>\n\n"
        "–Ø –≥–æ—Ç–æ–≤ –∫ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–∞–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò "
        "–∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."
    )
    await update.message.reply_text(
        greeting_message,
        parse_mode=ParseMode.HTML,
        reply_markup=generate_menu_keyboard(BotConstants.MENU_MAIN),
        disable_web_page_preview=True
    )
    
    if user_data_loc.get('current_menu') != BotConstants.MENU_MAIN:
         await firestore_service.set_user_data(user_id, {'current_menu': BotConstants.MENU_MAIN})
    
    logger.info(f"User {user_id} ({user_first_name}) started or restarted the bot.")

@auto_delete_message_decorator()
async def open_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_menu(update, update.effective_user.id, BotConstants.MENU_MAIN)

@auto_delete_message_decorator()
async def usage_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_limits(update, update.effective_user.id)

@auto_delete_message_decorator()
async def gems_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –≥–µ–º–æ–≤."""
    await show_menu(update, update.effective_user.id, BotConstants.MENU_GEMS_SUBMENU)

@auto_delete_message_decorator()
async def get_news_bonus_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await claim_news_bonus_logic(update, update.effective_user.id)

@auto_delete_message_decorator()
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_help(update, update.effective_user.id)

# --- –õ–û–ì–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò ---

async def show_limits(update: Update, user_id: int):
    user_data_loc = await firestore_service.get_user_data(user_id)
    bot_data_loc = await firestore_service.get_bot_data()
    
    user_gem_balance = await get_user_gem_balance(user_id, user_data_loc)

    parts = [f"<b>üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {user_gem_balance:.1f} –≥–µ–º–æ–≤</b>\n"]
    parts.append("<b>üìä –í–∞—à–∏ –¥–Ω–µ–≤–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b>\n")

    for model_key, model_config in AVAILABLE_TEXT_MODELS.items():
        if model_config.get("is_limited", True):
            current_free_usage = await get_daily_usage_for_model(user_id, model_key, bot_data_loc)
            free_daily_limit = model_config.get('free_daily_limit', 0)
            gem_cost = model_config.get('gem_cost', 0.0)

            usage_display = f"–ë–µ—Å–ø–ª–∞—Ç–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {current_free_usage}/{free_daily_limit}"
            cost_display = f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {gem_cost:.1f} –≥–µ–º–æ–≤" if gem_cost > 0 else "–¢–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ"
            
            bonus_notification = ""
            if model_key == CONFIG.NEWS_CHANNEL_BONUS_MODEL_KEY and \
               user_data_loc.get('claimed_news_bonus', False) and \
               (bonus_left := user_data_loc.get('news_bonus_uses_left', 0)) > 0:
                bonus_notification = f" (–µ—â–µ <b>{bonus_left}</b> –±–æ–Ω—É—Å–Ω—ã—Ö)"
            
            parts.append(f"‚ñ´Ô∏è {model_config['name']}: {usage_display}{bonus_notification}. {cost_display}")

    parts.append("")
    bonus_model_cfg = AVAILABLE_TEXT_MODELS.get(CONFIG.NEWS_CHANNEL_BONUS_MODEL_KEY)
    if bonus_model_cfg:
        bonus_model_name_display = bonus_model_cfg['name']
        if not user_data_loc.get('claimed_news_bonus', False):
            parts.append(f'üéÅ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ <a href="{CONFIG.NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π</a>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å {CONFIG.NEWS_CHANNEL_BONUS_GENERATIONS} –±–æ–Ω—É—Å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è {bonus_model_name_display}! –ù–∞–∂–º–∏—Ç–µ ¬´üéÅ –ë–æ–Ω—É—Å¬ª –≤ –º–µ–Ω—é.')
        elif (bonus_left_val := user_data_loc.get('news_bonus_uses_left', 0)) > 0:
            parts.append(f"‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å <b>{bonus_left_val}</b> –±–æ–Ω—É—Å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è {bonus_model_name_display}.")
        else:
            parts.append(f"‚ÑπÔ∏è –ë–æ–Ω—É—Å —Å –∫–∞–Ω–∞–ª–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è {bonus_model_name_display} –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
    
    parts.append("\nüíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≥–µ–º–æ–≤ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é ¬´üíé –ì–µ–º—ã¬ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /gems.")
        
    current_menu_for_reply = user_data_loc.get('current_menu', BotConstants.MENU_LIMITS_SUBMENU)
    await update.message.reply_text(
        "\n".join(parts), 
        parse_mode=ParseMode.HTML, 
        reply_markup=generate_menu_keyboard(current_menu_for_reply),
        disable_web_page_preview=True
    )

async def claim_news_bonus_logic(update: Update, user_id: int):
    user_data_loc = await firestore_service.get_user_data(user_id)
    parent_menu_key = user_data_loc.get('current_menu', BotConstants.MENU_BONUS_SUBMENU)
    current_menu_config = MENU_STRUCTURE.get(parent_menu_key, MENU_STRUCTURE[BotConstants.MENU_MAIN])
    reply_menu_key = current_menu_config.get("parent", BotConstants.MENU_MAIN) if current_menu_config.get("is_submenu") else parent_menu_key

    bonus_model_config = AVAILABLE_TEXT_MODELS.get(CONFIG.NEWS_CHANNEL_BONUS_MODEL_KEY)
    if not bonus_model_config:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ë–æ–Ω—É—Å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.", reply_markup=generate_menu_keyboard(reply_menu_key))
        return
        
    bonus_model_name = bonus_model_config['name']

    if user_data_loc.get('claimed_news_bonus', False):
        uses_left = user_data_loc.get('news_bonus_uses_left', 0)
        reply_text = f"–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å. " + (f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å: <b>{uses_left}</b> –±–æ–Ω—É—Å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è {bonus_model_name}." if uses_left > 0 else f"–ë–æ–Ω—É—Å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {bonus_model_name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã.")
        await update.message.reply_text(reply_text, parse_mode=ParseMode.HTML, reply_markup=generate_menu_keyboard(reply_menu_key))
        return

    try:
        member_status = await update.get_bot().get_chat_member(chat_id=CONFIG.NEWS_CHANNEL_USERNAME, user_id=user_id)
        if member_status.status in ['member', 'administrator', 'creator']:
            await firestore_service.set_user_data(user_id, {
                'claimed_news_bonus': True, 
                'news_bonus_uses_left': CONFIG.NEWS_CHANNEL_BONUS_GENERATIONS
            })
            success_text = (f'üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ <a href="{CONFIG.NEWS_CHANNEL_LINK}">{CONFIG.NEWS_CHANNEL_USERNAME}</a>! '
                            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: <b>{CONFIG.NEWS_CHANNEL_BONUS_GENERATIONS}</b> –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏ {bonus_model_name}.")
            await update.message.reply_text(success_text, parse_mode=ParseMode.HTML, reply_markup=generate_menu_keyboard(reply_menu_key), disable_web_page_preview=True)
            await firestore_service.set_user_data(user_id, {'current_menu': reply_menu_key}) 
        else:
            fail_text = (f'–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ <a href="{CONFIG.NEWS_CHANNEL_LINK}">{CONFIG.NEWS_CHANNEL_USERNAME}</a>, '
                         f'–∞ –∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üéÅ –ü–æ–ª—É—á–∏—Ç—å¬ª –µ—â–µ —Ä–∞–∑.')
            inline_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(f"üì¢ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ {CONFIG.NEWS_CHANNEL_USERNAME}", url=CONFIG.NEWS_CHANNEL_LINK)]])
            await update.message.reply_text(fail_text, parse_mode=ParseMode.HTML, reply_markup=inline_keyboard, disable_web_page_preview=True)
    except telegram.error.TelegramError as e:
        logger.error(f"Bonus claim TelegramError for user {user_id}: {e}", exc_info=True)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=generate_menu_keyboard(reply_menu_key))
    except Exception as e:
        logger.error(f"Unexpected error during news bonus claim for user {user_id}: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.", reply_markup=generate_menu_keyboard(reply_menu_key))

async def show_help(update: Update, user_id: int):
    user_data_loc = await firestore_service.get_user_data(user_id)
    help_text = (
        "<b>‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "1.  <b>–ó–∞–ø—Ä–æ—Å—ã –∫ –ò–ò</b>: –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—á—É –≤ —á–∞—Ç.\n"
        "2.  <b>–ú–µ–Ω—é</b>: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º:\n"
        "    ‚ñ´Ô∏è ¬´ü§ñ –ê–≥–µ–Ω—Ç—ã –ò–ò¬ª: –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ò–ò.\n"
        "    ‚ñ´Ô∏è ¬´‚öôÔ∏è –ú–æ–¥–µ–ª–∏ –ò–ò¬ª: –ü–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏.\n"
        "    ‚ñ´Ô∏è ¬´üìä –õ–∏–º–∏—Ç—ã¬ª: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–Ω–µ–≤–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã, –±–∞–ª–∞–Ω—Å –≥–µ–º–æ–≤ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π.\n"
        "    ‚ñ´Ô∏è ¬´üéÅ –ë–æ–Ω—É—Å¬ª: –ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª.\n"
        "    ‚ñ´Ô∏è ¬´üíé –ì–µ–º—ã¬ª: –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –ø–æ–∫—É–ø–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –≥–µ–º–æ–≤.\n"
        "    ‚ñ´Ô∏è ¬´‚ùì –ü–æ–º–æ—â—å¬ª: –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏.\n\n"
        "3.  <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b> (–¥—É–±–ª–∏—Ä—É—é—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é):\n"
        "    ‚ñ´Ô∏è /start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "    ‚ñ´Ô∏è /menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
        "    ‚ñ´Ô∏è /usage - –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç—ã –∏ –±–∞–ª–∞–Ω—Å –≥–µ–º–æ–≤.\n"
        "    ‚ñ´Ô∏è /gems - –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω –≥–µ–º–æ–≤.\n"
        "    ‚ñ´Ô∏è /bonus - –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.\n"
        "    ‚ñ´Ô∏è /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É."
    )
    current_menu_for_reply = user_data_loc.get('current_menu', BotConstants.MENU_HELP_SUBMENU)
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML, reply_markup=generate_menu_keyboard(current_menu_for_reply), disable_web_page_preview=True)

async def send_gem_purchase_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE, package_key: str):
    user_id = update.effective_user.id
    package_info = CONFIG.GEM_PACKAGES.get(package_key)

    if not package_info:
        logger.error(f"User {user_id} tried to buy non-existent gem package: {package_key}")
        await update.message.reply_text("–û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –≥–µ–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                        reply_markup=generate_menu_keyboard(BotConstants.MENU_GEMS_SUBMENU))
        return

    title = package_info["title"]
    description = package_info["description"]
    payload = f"gems_{package_key}_user_{user_id}_{int(datetime.now().timestamp())}"
    currency = package_info["currency"]
    price_units = package_info["price_units"]

    prices = [LabeledPrice(label=f"{package_info['gems']} –ì–µ–º–æ–≤", amount=price_units)]

    if not CONFIG.PAYMENT_PROVIDER_TOKEN or "YOUR_" in CONFIG.PAYMENT_PROVIDER_TOKEN: # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        logger.error("Payment provider token is not configured for sending invoice.")
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                                        reply_markup=generate_menu_keyboard(BotConstants.MENU_GEMS_SUBMENU))
        return
        
    try:
        current_menu = (await firestore_service.get_user_data(user_id)).get('current_menu', BotConstants.MENU_GEMS_SUBMENU)
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞–∫–µ—Ç ¬´{title}¬ª. –°–µ–π—á–∞—Å —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã.",
            reply_markup=generate_menu_keyboard(current_menu) 
        )
        await context.bot.send_invoice(
            chat_id=user_id, title=title, description=description, payload=payload,
            provider_token=CONFIG.PAYMENT_PROVIDER_TOKEN, currency=currency, prices=prices
        )
        logger.info(f"Invoice for package '{package_key}' sent to user {user_id}.")
    except Exception as e:
        logger.error(f"Failed to send invoice to user {user_id} for package {package_key}: {e}", exc_info=True)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                        reply_markup=generate_menu_keyboard(BotConstants.MENU_GEMS_SUBMENU))

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö –ú–ï–ù–Æ ---
async def menu_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    button_text = update.message.text.strip()
    if not is_menu_button_text(button_text):
        return

    user_id = update.effective_user.id
    logger.info(f"User {user_id} pressed menu button: '{button_text}'")
    
    try:
        await update.message.delete()
    except telegram.error.TelegramError as e:
        logger.warning(f"Failed to delete menu button message '{button_text}': {e}")

    user_data_loc = await firestore_service.get_user_data(user_id)
    current_menu_key = user_data_loc.get('current_menu', BotConstants.MENU_MAIN)

    if button_text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        parent_key = MENU_STRUCTURE.get(current_menu_key, {}).get("parent", BotConstants.MENU_MAIN)
        await show_menu(update, user_id, parent_key)
        return
    elif button_text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await show_menu(update, user_id, BotConstants.MENU_MAIN)
        return

    action_item_found = None
    search_order = [current_menu_key] + [key for key in MENU_STRUCTURE if key != current_menu_key]
    
    effective_menu_key_of_action = current_menu_key # –ú–µ–Ω—é, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞
    for menu_key_search_loop in search_order:
        for item in MENU_STRUCTURE.get(menu_key_search_loop, {}).get("items", []):
            if item["text"] == button_text:
                action_item_found = item
                effective_menu_key_of_action = menu_key_search_loop
                break
        if action_item_found:
            break
    
    if not action_item_found:
        logger.error(f"Button '{button_text}' was identified as menu button, but no action found. User's current_menu in DB: '{user_data_loc.get('current_menu', 'N/A')}'")
        await show_menu(update, user_id, BotConstants.MENU_MAIN) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return

    action_type = action_item_found["action"]
    action_target = action_item_found["target"]

    if action_type == BotConstants.CALLBACK_ACTION_SUBMENU:
        await show_menu(update, user_id, action_target)
    
    elif action_type == BotConstants.CALLBACK_ACTION_SET_AGENT:
        await firestore_service.set_user_data(user_id, {'current_ai_mode': action_target})
        agent_name = AI_MODES.get(action_target, {}).get('name', 'N/A')
        response_text = f"ü§ñ –ê–≥–µ–Ω—Ç –ò–ò –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{agent_name}</b>."
        # –û—Å—Ç–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤ (effective_menu_key_of_action –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å MENU_AI_MODES_SUBMENU)
        await update.message.reply_text(response_text, parse_mode=ParseMode.HTML, reply_markup=generate_menu_keyboard(effective_menu_key_of_action))
        await firestore_service.set_user_data(user_id, {'current_menu': effective_menu_key_of_action})

    elif action_type == BotConstants.CALLBACK_ACTION_SET_MODEL:
        model_info = AVAILABLE_TEXT_MODELS.get(action_target, {})
        update_payload = {
            'selected_model_id': model_info.get("id"), 
            'selected_api_type': model_info.get("api_type")
        }
        if action_target in ["custom_api_grok_3", "custom_api_gpt_4o_mini"] and \
           user_data_loc.get('current_ai_mode') == "gemini_pro_custom_mode":
            update_payload['current_ai_mode'] = CONFIG.DEFAULT_AI_MODE_KEY
            logger.info(f"User {user_id} selected model {action_target}, AI mode reset from gemini_pro_custom_mode to default.")
        
        await firestore_service.set_user_data(user_id, update_payload)
        user_data_loc.update(update_payload) 
        
        bot_data_cache = await firestore_service.get_bot_data()
        current_free_usage_for_selected = await get_daily_usage_for_model(user_id, action_target, bot_data_cache)
        free_daily_limit_for_selected = model_info.get('free_daily_limit',0)
        gem_cost_for_selected = model_info.get('gem_cost',0.0)

        response_text = (f"‚öôÔ∏è –ú–æ–¥–µ–ª—å –ò–ò –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: <b>{model_info.get('name', 'N/A')}</b>.\n"
                         f"–ë–µ—Å–ø–ª–∞—Ç–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {current_free_usage_for_selected}/{free_daily_limit_for_selected}.\n"
                         f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {gem_cost_for_selected:.1f} –≥–µ–º–æ–≤.")
        
        # –û—Å—Ç–∞–µ–º—Å—è –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π (effective_menu_key_of_action –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å MENU_MODELS_SUBMENU)
        await update.message.reply_text(response_text, parse_mode=ParseMode.HTML, reply_markup=generate_menu_keyboard(effective_menu_key_of_action))
        await firestore_service.set_user_data(user_id, {'current_menu': effective_menu_key_of_action})

    elif action_type == BotConstants.CALLBACK_ACTION_SHOW_LIMITS:
        await show_limits(update, user_id)
    elif action_type == BotConstants.CALLBACK_ACTION_CHECK_BONUS:
        await claim_news_bonus_logic(update, user_id)
    elif action_type == BotConstants.CALLBACK_ACTION_SHOW_GEMS_STORE: # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ú–∞–≥–∞–∑–∏–Ω –ì–µ–º–æ–≤", –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –≤–µ–¥–µ—Ç –≤ SUBMENU
        await show_menu(update, user_id, BotConstants.MENU_GEMS_SUBMENU)
    elif action_type == BotConstants.CALLBACK_ACTION_BUY_GEM_PACKAGE:
        package_key_to_buy = action_target
        await send_gem_purchase_invoice(update, context, package_key_to_buy)
    elif action_type == BotConstants.CALLBACK_ACTION_SHOW_HELP:
        await show_help(update, user_id)
    else:
        logger.warning(f"Unknown action type '{action_type}' for button '{button_text}'")
        await show_menu(update, user_id, BotConstants.MENU_MAIN)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–û–¢–û ---
async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = await firestore_service.get_user_data(user_id)
    current_ai_mode_key = user_data.get('current_ai_mode')
    active_agent_config = AI_MODES.get(current_ai_mode_key)

    if active_agent_config and active_agent_config.get("multimodal_capable"):
        model_to_use_for_billing = active_agent_config.get("forced_model_key")
        if not model_to_use_for_billing or model_to_use_for_billing not in AVAILABLE_TEXT_MODELS:
            logger.error(f"Agent {current_ai_mode_key} has invalid forced_model_key: {model_to_use_for_billing} for billing.")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.")
            return

        bot_data_cache = await firestore_service.get_bot_data()
        can_proceed, check_message, _, _ = await check_and_log_request_attempt( # usage_type –∏ gem_cost –Ω–µ –Ω—É–∂–Ω—ã –∑–¥–µ—Å—å
            user_id, model_to_use_for_billing, user_data, bot_data_cache
        )

        if not can_proceed:
            await update.message.reply_text(check_message, parse_mode=ParseMode.HTML)
            return
        
        photo_file = update.message.photo[-1]
        context.user_data['dietitian_pending_photo_id'] = photo_file.file_id
        context.user_data['dietitian_state'] = 'awaiting_weight'
        
        logger.info(f"User {user_id} (agent {current_ai_mode_key}) sent photo {photo_file.file_id}. Awaiting weight. Billing model: {model_to_use_for_billing}. Usage check passed.")
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ! –ß—Ç–æ–±—ã —è –º–æ–≥ —Ç–æ—á–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å —ç—Ç–æ–π –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö."
        )
    else:
        if update.message:
             await update.message.reply_text(
                "–ß—Ç–æ–±—ã –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –µ–¥—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞ 'ü•ë –î–∏–µ—Ç–æ–ª–æ–≥ (–∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ)' –≤ –º–µ–Ω—é 'ü§ñ –ê–≥–µ–Ω—Ç—ã –ò–ò'."
            )

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–ê (–ó–ê–ü–†–û–°–´ –ö AI) ---
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text or is_menu_button_text(update.message.text.strip()):
        return
        
    user_id = update.effective_user.id
    user_message_text = update.message.text.strip()
    user_data_cache = await firestore_service.get_user_data(user_id)
    current_ai_mode_key = user_data_cache.get('current_ai_mode', CONFIG.DEFAULT_AI_MODE_KEY)
    active_agent_config = AI_MODES.get(current_ai_mode_key)

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –î–∏–µ—Ç–æ–ª–æ–≥–∞ (–∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ), –æ–∂–∏–¥–∞—é—â–µ–≥–æ –≤–µ—Å
    if active_agent_config and \
       active_agent_config.get("multimodal_capable") and \
       context.user_data.get('dietitian_state') == 'awaiting_weight' and \
       'dietitian_pending_photo_id' in context.user_data:

        photo_file_id = context.user_data['dietitian_pending_photo_id']
        billing_model_key = active_agent_config.get("forced_model_key") # –î–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –≥–µ–º–æ–≤/–ª–∏–º–∏—Ç–æ–≤
        native_vision_model_id = active_agent_config.get("native_vision_model_id", "gemini-1.5-flash-latest")

        if not billing_model_key or billing_model_key not in AVAILABLE_TEXT_MODELS:
            logger.error(f"Photo Dietitian agent '{current_ai_mode_key}' has invalid 'forced_model_key': {billing_model_key}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∏–ª–ª–∏–Ω–≥-–º–æ–¥–µ–ª–∏ –¥–ª—è –î–∏–µ—Ç–æ–ª–æ–≥–∞. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            context.user_data.pop('dietitian_state', None); context.user_data.pop('dietitian_pending_photo_id', None)
            return

        bot_data_cache = await firestore_service.get_bot_data()
        can_proceed, limit_or_gem_message, usage_type, gem_cost_for_request = await check_and_log_request_attempt(
            user_id, billing_model_key, user_data_cache, bot_data_cache
        )

        if not can_proceed:
            await update.message.reply_text(limit_or_gem_message, parse_mode=ParseMode.HTML)
            return
        
        logger.info(f"User {user_id} (agent {current_ai_mode_key}) provided weight: '{user_message_text}' for photo {photo_file_id}. Billing Model: {billing_model_key}. Usage: {usage_type}. Vision Model: {native_vision_model_id}")
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
        
        ai_response_text = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        try:
            if not CONFIG.GOOGLE_GEMINI_API_KEY or "YOUR_" in CONFIG.GOOGLE_GEMINI_API_KEY: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ Google
                raise ValueError("API –∫–ª—é—á –¥–ª—è Google Gemini (Vision) –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞.")

            actual_photo_file = await context.bot.get_file(photo_file_id)
            file_bytes = await actual_photo_file.download_as_bytearray()
            
            image_part = {"mime_type": actual_photo_file.mime_type or "image/jpeg", "data": bytes(file_bytes)}
            
            # –ü—Ä–æ–º–ø—Ç –¥–ª—è Vision –º–æ–¥–µ–ª–∏ (–º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∞–≥–µ–Ω—Ç–∞)
            # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç –∞–≥–µ–Ω—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–∏–∞–ª–æ–≥—É, –∫–æ—Ç–æ—Ä—ã–µ –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω—ã
            vision_system_prompt = (
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã –∏ —Ç–µ–∫—Å—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–µ—Å–∞. "
                "–û–ø—Ä–µ–¥–µ–ª–∏ –±–ª—é–¥–æ/–ø—Ä–æ–¥—É–∫—Ç—ã. –†–∞—Å—Å—á–∏—Ç–∞–π –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ö–ë–ñ–£ (–∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã) –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–µ—Å–∞. "
                "–ü—Ä–µ–¥—Å—Ç–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ, –Ω–∞—á–∏–Ω–∞—è —Å –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞, –∑–∞—Ç–µ–º –≤–µ—Å, –∑–∞—Ç–µ–º –ö–ë–ñ–£."
            )
            text_prompt_with_weight = f"–í–µ—Å —ç—Ç–æ–π –ø–æ—Ä—Ü–∏–∏: {user_message_text}. {vision_system_prompt}"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º genai, –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–∑ config, –≥–¥–µ –æ–Ω —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω
            model_vision = genai.GenerativeModel(native_vision_model_id)
            logger.debug(f"Sending to Google Vision API. Model: {native_vision_model_id}. Text prompt part: {text_prompt_with_weight[:100]}")
            response_vision = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: model_vision.generate_content([image_part, text_prompt_with_weight])
            )
            ai_response_text = response_vision.text
            logger.info(f"Successfully received response from Google Vision API for user {user_id}")

        except ValueError as ve:
            logger.error(f"Configuration error for Google Gemini Vision: {ve}")
            ai_response_text = str(ve)
        except Exception as e:
            logger.error(f"Error with Google Gemini Vision API for user {user_id}: {e}", exc_info=True)
            ai_response_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        await increment_request_count(user_id, billing_model_key, usage_type, gem_cost_for_request)
        
        final_reply_text, _ = smart_truncate(ai_response_text, CONFIG.MAX_MESSAGE_LENGTH_TELEGRAM)
        current_menu = user_data_cache.get('current_menu', BotConstants.MENU_AI_MODES_SUBMENU) 
        await update.message.reply_text(final_reply_text, reply_markup=generate_menu_keyboard(current_menu))
        
        context.user_data.pop('dietitian_state', None)
        context.user_data.pop('dietitian_pending_photo_id', None)
        return 
    
    # --- –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ---
    final_model_key_for_request = ""
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∞–≥–µ–Ω—Ç "photo_dietitian_analyzer", –Ω–æ –æ–Ω –Ω–µ –∂–¥–µ—Ç –≤–µ—Å (—Ç.–µ. —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ –Ω–µ–º—É)
    if active_agent_config and active_agent_config.get("multimodal_capable") and not context.user_data.get('dietitian_state') == 'awaiting_weight':
        final_model_key_for_request = active_agent_config.get("forced_model_key")
        logger.info(f"Agent '{current_ai_mode_key}' (multimodal in text mode) forcing model to '{final_model_key_for_request}'.")
    elif active_agent_config and active_agent_config.get("forced_model_key") and not active_agent_config.get("multimodal_capable"):
        final_model_key_for_request = active_agent_config.get("forced_model_key")
        logger.info(f"Agent '{current_ai_mode_key}' forcing model to '{final_model_key_for_request}' for text request.")
    else:
        final_model_key_for_request = await get_current_model_key(user_id, user_data_cache)

    bot_data_cache_for_check = await firestore_service.get_bot_data()
    can_proceed, limit_or_gem_message, usage_type, gem_cost_for_request = await check_and_log_request_attempt(
        user_id, final_model_key_for_request, user_data_cache, bot_data_cache_for_check
    )
        
    if not can_proceed:
        await update.message.reply_text(limit_or_gem_message, parse_mode=ParseMode.HTML, 
                                        reply_markup=generate_menu_keyboard(user_data_cache.get('current_menu', BotConstants.MENU_MAIN)), 
                                        disable_web_page_preview=True)
        return

    if len(user_message_text) < CONFIG.MIN_AI_REQUEST_LENGTH:
        current_menu = user_data_cache.get('current_menu', BotConstants.MENU_MAIN)
        await update.message.reply_text("–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.", reply_markup=generate_menu_keyboard(current_menu))
        return

    logger.info(f"User {user_id} (agent: {current_ai_mode_key}, model: {final_model_key_for_request}) sent AI request: '{user_message_text[:100]}...'")

    ai_service = get_ai_service(final_model_key_for_request)
    if not ai_service:
        logger.critical(f"Could not get AI service for model key '{final_model_key_for_request}'.")
        current_menu = user_data_cache.get('current_menu', BotConstants.MENU_MAIN)
        await update.message.reply_text("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ AI –º–æ–¥–µ–ª–∏.", reply_markup=generate_menu_keyboard(current_menu))
        return

    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    
    system_prompt_to_use = active_agent_config["prompt"] if active_agent_config else AI_MODES[CONFIG.DEFAULT_AI_MODE_KEY]["prompt"]
    
    ai_response_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò."
    try:
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ image_data –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è (–∏–ª–∏ None)
        ai_response_text = await ai_service.generate_response(system_prompt_to_use, user_message_text) 
    except Exception as e:
        model_name_for_error = AVAILABLE_TEXT_MODELS.get(final_model_key_for_request, {}).get('name', final_model_key_for_request)
        logger.error(f"Unhandled exception in AI service for model {model_name_for_error}: {e}", exc_info=True)
        ai_response_text = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –º–æ–¥–µ–ª—å—é {model_name_for_error}."
    
    await increment_request_count(user_id, final_model_key_for_request, usage_type, gem_cost_for_request)

    final_reply_text, was_truncated = smart_truncate(ai_response_text, CONFIG.MAX_MESSAGE_LENGTH_TELEGRAM)
    if was_truncated:
        logger.info(f"AI response for user {user_id} was truncated.")
    
    current_menu = user_data_cache.get('current_menu', BotConstants.MENU_MAIN)
    await update.message.reply_text(
        final_reply_text, 
        reply_markup=generate_menu_keyboard(current_menu), 
        disable_web_page_preview=True
    )
    logger.info(f"Successfully sent AI response (model: {final_model_key_for_request}, usage: {usage_type}) to user {user_id}.")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô ---
async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    if query.invoice_payload and query.invoice_payload.startswith("gems_"):
        payload_parts = query.invoice_payload.split('_')
        user_part_index = -1
        for i, part in enumerate(payload_parts):
            if part == "user": user_part_index = i; break
        
        if user_part_index > 1 and len(payload_parts) > user_part_index + 1 :
            package_key_from_payload = "_".join(payload_parts[1:user_part_index])
            if package_key_from_payload in CONFIG.GEM_PACKAGES:
                try:
                    user_id_in_payload = int(payload_parts[user_part_index + 1])
                    if query.from_user.id == user_id_in_payload:
                        await query.answer(ok=True)
                        logger.info(f"PreCheckoutQuery OK for gems payload: {query.invoice_payload}")
                        return
                    else:
                        logger.error(f"PreCheckoutQuery FAILED. User ID mismatch. Payload User: {user_id_in_payload}, Query User: {query.from_user.id}")
                        await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                        return
                except (ValueError, IndexError):
                    logger.error(f"PreCheckoutQuery FAILED. Error parsing user_id from payload: {query.invoice_payload}")
                    await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞.")
                    return    
            else:
                logger.warning(f"PreCheckoutQuery FAILED. Unknown gem package: {query.invoice_payload}")
                await query.answer(ok=False, error_message="–ü–∞–∫–µ—Ç –≥–µ–º–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")    
                return
        
    logger.warning(f"PreCheckoutQuery FAILED. Invalid payload format/type: {query.invoice_payload}")
    await query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É.")

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    payment_info = update.message.successful_payment
    invoice_payload = payment_info.invoice_payload

    logger.info(f"Successful payment from {user_id}. Amount: {payment_info.total_amount} {payment_info.currency}. Payload: {invoice_payload}")

    if invoice_payload and invoice_payload.startswith("gems_"):
        try:
            payload_parts = invoice_payload.split('_')
            user_part_index = -1
            for i, part in enumerate(payload_parts):
                if part == "user": user_part_index = i; break
            
            if user_part_index == -1 or user_part_index <= 1 or len(payload_parts) <= user_part_index + 1:
                raise ValueError("Invalid payload: missing user or package info")

            package_key = "_".join(payload_parts[1:user_part_index])
            user_id_from_payload = int(payload_parts[user_part_index + 1])

            if user_id != user_id_from_payload:
                logger.error(f"Security: Payload user ID {user_id_from_payload} != message user ID {user_id}")
                await update.message.reply_text("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
                if CONFIG.ADMIN_ID: await context.bot.send_message(CONFIG.ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ User ID –≤ –ø–ª–∞—Ç–µ–∂–µ! Payload: {invoice_payload}, User: {user_id}")
                return

            package_info = CONFIG.GEM_PACKAGES.get(package_key)
            if not package_info:
                logger.error(f"Successful payment for UNKNOWN gem package '{package_key}' by user {user_id}")
                await update.message.reply_text("–û—à–∏–±–∫–∞: –∫—É–ø–ª–µ–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
                return

            gems_to_add = float(package_info["gems"])
            current_gem_balance = await get_user_gem_balance(user_id)
            new_gem_balance = current_gem_balance + gems_to_add
            await update_user_gem_balance(user_id, new_gem_balance)

            confirmation_message = (
                f"üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{gems_to_add:.1f} –≥–µ–º–æ–≤</b>.\n"
                f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_gem_balance:.1f} –≥–µ–º–æ–≤</b>.\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!"
            )
            user_data_for_reply_menu = await firestore_service.get_user_data(user_id)
            await update.message.reply_text(
                confirmation_message, parse_mode=ParseMode.HTML, 
                reply_markup=generate_menu_keyboard(user_data_for_reply_menu.get('current_menu', BotConstants.MENU_GEMS_SUBMENU))
            )

            if CONFIG.ADMIN_ID:
                admin_message = (
                    f"üíé –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –≥–µ–º–æ–≤!\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} ({update.effective_user.full_name if update.effective_user else 'N/A'})\n"
                    f"–ü–∞–∫–µ—Ç: {package_info['title']} ({gems_to_add:.1f} –≥–µ–º–æ–≤)\n"
                    f"–°—É–º–º–∞: {payment_info.total_amount / 100.0:.2f} {payment_info.currency}\n"
                    f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_gem_balance:.1f} –≥–µ–º–æ–≤\nPayload: {invoice_payload}"
                )
                await context.bot.send_message(CONFIG.ADMIN_ID, admin_message)
        except Exception as e:
            logger.error(f"Error processing successful gem payment for user {user_id}, payload {invoice_payload}: {e}", exc_info=True)
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –≥–µ–º–æ–≤. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
    else:
        logger.warning(f"Successful payment with unknown payload type from user {user_id}: {invoice_payload}")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ---
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    tb_string = "".join(traceback.format_exception(None, context.error, context.error.__traceback__))
    if isinstance(update, Update) and update.effective_chat:
        user_data = {}
        if update.effective_user:
             user_data = await firestore_service.get_user_data(update.effective_user.id)
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.",
                reply_markup=generate_menu_keyboard(user_data.get('current_menu', BotConstants.MENU_MAIN))
            )
        except Exception as e:
            logger.error(f"Failed to send error message to user {update.effective_chat.id}: {e}")

    if CONFIG.ADMIN_ID and isinstance(update, Update) and update.effective_user:
        error_details = (
            f"ü§ñ –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n"
            f"User: {update.effective_user.id} (@{update.effective_user.username if update.effective_user.username else 'N/A'})\n"
            f"Msg: {update.message.text if update.message and update.message.text else 'N/A'}\n"
            f"Error: {context.error}\n\n"
            f"Traceback (short):\n```\n{tb_string[-1500:]}\n```" # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1500 —Å–∏–º–≤–æ–ª–æ–≤ —Ç—Ä–µ–π—Å–±–µ–∫–∞
        )
        try:
            await context.bot.send_message(CONFIG.ADMIN_ID, error_details, parse_mode=ParseMode.MARKDOWN_V2)
        except telegram.error.TelegramError as e_md:
            logger.error(f"Failed to send detailed error to admin with MarkdownV2: {e_md}. Plain text fallback.")
            try:
                 plain_error_details = f"PLAIN TEXT FALLBACK:\n{error_details.replace('```', '')}"
                 await context.bot.send_message(CONFIG.ADMIN_ID, plain_error_details)
            except Exception as e_plain:
                 logger.error(f"Failed to send plain text error report to admin: {e_plain}")
