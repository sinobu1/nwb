# main.py
import asyncio
from telegram import BotCommand, Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, PreCheckoutQueryHandler
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –ª–æ–≥–≥–µ—Ä, —Å–µ—Ä–≤–∏—Å—ã –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ config.py
from config import CONFIG, logger, firestore_service, genai # genai –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ main

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ handlers.py
from handlers import (
    start, open_menu_command, usage_command,
    gems_info_command, get_news_bonus_info_command, help_command, # –ò—Å–ø–æ–ª—å–∑—É–µ–º gems_info_command
    menu_button_handler, handle_text, precheckout_callback,
    successful_payment_callback, error_handler,
    photo_handler # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Gemini API (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è Vision –∞–≥–µ–Ω—Ç–∞)
    if CONFIG.GOOGLE_GEMINI_API_KEY and \
       "YOUR_" not in CONFIG.GOOGLE_GEMINI_API_KEY and \
       CONFIG.GOOGLE_GEMINI_API_KEY.startswith("AIzaSy"): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
        try:
            genai.configure(api_key=CONFIG.GOOGLE_GEMINI_API_KEY)
            logger.info("Google Gemini API (for Vision) successfully configured.")
        except Exception as e:
            logger.error(f"Failed to configure Google Gemini API (for Vision): {e}", exc_info=True)
    else:
        logger.warning("Google Gemini API key (for Vision) is not configured or is missing. Photo dietitian may not work.")

    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π –∏ Firestore –∫–∞–∫ –±—ã–ª–∏) ...
    if not firestore_service._db:
        logger.critical("Firestore (db) was NOT initialized successfully! Bot will not work correctly.")
        return

    app_builder = Application.builder().token(CONFIG.TELEGRAM_TOKEN)
    app_builder.read_timeout(30).connect_timeout(30)
    app = app_builder.build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start), group=0)
    app.add_handler(CommandHandler("menu", open_menu_command), group=0)
    app.add_handler(CommandHandler("usage", usage_command), group=0)
    app.add_handler(CommandHandler("gems", gems_info_command), group=0) # –ò–∑–º–µ–Ω–µ–Ω–æ —Å subscribe –Ω–∞ gems
    app.add_handler(CommandHandler("bonus", get_news_bonus_info_command), group=0)
    app.add_handler(CommandHandler("help", help_command), group=0)
    
    app.add_handler(MessageHandler(filters.PHOTO, photo_handler), group=1) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_button_handler), group=1)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text), group=2)
    
    app.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    
    app.add_error_handler(error_handler)

    bot_commands = [
        BotCommand("menu", "üìã –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("usage", "üìä –õ–∏–º–∏—Ç—ã –∏ –±–∞–ª–∞–Ω—Å –≥–µ–º–æ–≤"),
        BotCommand("gems", "üíé –ú–∞–≥–∞–∑–∏–Ω –ì–µ–º–æ–≤"),
        BotCommand("bonus", "üéÅ –ë–æ–Ω—É—Å –∫–∞–Ω–∞–ª–∞"),
        BotCommand("help", "‚ùì –ü–æ–º–æ—â—å")
    ]
    try:
        await app.bot.set_my_commands(bot_commands)
        logger.info("Bot commands have been successfully set.")
    except Exception as e:
        logger.error(f"Failed to set bot commands: {e}", exc_info=True)

    logger.info("Bot polling is starting...")
    await app.run_polling(allowed_updates=Update.ALL_TYPES, timeout=30)

if __name__ == '__main__':
    asyncio.run(main())
