import telegram
from telegram import (
    InlineKeyboardButton, InlineKeyboardMarkup, Update,
    ReplyKeyboardMarkup, KeyboardButton, BotCommand
)
from telegram.constants import ParseMode, ChatAction
from telegram.helpers import escape_markdown
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, CallbackQueryHandler, PicklePersistence
)
import google.generativeai as genai
import google.api_core.exceptions
import requests
import logging
import traceback
import os
import asyncio
import nest_asyncio
import json
from datetime import datetime, timedelta
from telegram import LabeledPrice
from telegram.ext import PreCheckoutQueryHandler
from typing import Optional # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è Optional Type Hinting

nest_asyncio.apply()
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–õ–Æ–ß–ò API –ò –¢–û–ö–ï–ù–´ ---
TOKEN = os.getenv("TELEGRAM_TOKEN", "8185454402:AAEgJLaBSaUSyP9Z_zv76Fn0PtEwltAqga0")
GOOGLE_GEMINI_API_KEY = os.getenv("GOOGLE_GEMINI_API_KEY", "AIzaSyCdDMpgLJyz6aYdwT9q4sbBk7sHVID4BTI")
CUSTOM_GEMINI_PRO_API_KEY = os.getenv("CUSTOM_GEMINI_PRO_API_KEY", "sk-MHulnEHU3bRxsnDjr0nq68lTcRYa5IpQATY1pUG4NaxpWSMJzvzsJ4KCVu0P")
CUSTOM_GEMINI_PRO_ENDPOINT = os.getenv("CUSTOM_GEMINI_PRO_ENDPOINT", "https://api.gen-api.ru/api/v1/networks/gemini-2-5-pro")
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN", "YOUR_REAL_PAYMENT_PROVIDER_TOKEN_HERE")
YOUR_ADMIN_ID = 489230152

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
MAX_OUTPUT_TOKENS_GEMINI_LIB = 2048
MAX_MESSAGE_LENGTH_TELEGRAM = 4000

# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –õ–ò–ú–ò–¢–´ ---
DEFAULT_FREE_REQUESTS_GOOGLE_FLASH_DAILY = 72
DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY = 48
DEFAULT_SUBSCRIPTION_REQUESTS_GOOGLE_FLASH_PREVIEW_DAILY = 75
DEFAULT_FREE_REQUESTS_CUSTOM_PRO_DAILY = 0
DEFAULT_SUBSCRIPTION_REQUESTS_CUSTOM_PRO_DAILY = 25
PRO_SUBSCRIPTION_LEVEL_KEY = "profi_access_v1"

# --- –ö–ê–ù–ê–õ –ù–û–í–û–°–¢–ï–ô –ò –ë–û–ù–£–° ---
NEWS_CHANNEL_USERNAME = "@timextech"
NEWS_CHANNEL_LINK = "https://t.me/timextech"
NEWS_CHANNEL_BONUS_MODEL_KEY = "custom_api_gemini_2_5_pro"
NEWS_CHANNEL_BONUS_GENERATIONS = 1

# --- –†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´ –ò–ò ---
AI_MODES = {
    "universal_ai_basic": {
        "name": "ü§ñ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò (–ë–∞–∑–æ–≤—ã–π)",
        "prompt": (
            "–¢—ã ‚Äî –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Gemini –æ—Ç Google. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏: –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, "
            "–¥–∞–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —à–∏—Ä–æ–∫–æ–º—É –∫—Ä—É–≥—É —Ç–µ–º. "
            "–ë—É–¥—å –≤–µ–∂–ª–∏–≤, –æ–±—ä–µ–∫—Ç–∏–≤–µ–Ω, —Ç–æ—á–µ–Ω –∏ –ø–æ–ª–µ–∑–µ–Ω. "
            "–ï—Å–ª–∏ —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π –æ–± —ç—Ç–æ–º.\n\n"
            "**–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç):**\n"
            "1.  **–ê–±–∑–∞—Ü—ã:** –ß–µ—Ç–∫–æ —Ä–∞–∑–¥–µ–ª—è–π —Å–º—ã—Å–ª–æ–≤—ã–µ –±–ª–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∞–±–∑–∞—Ü–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω—É –∏–ª–∏ –¥–≤–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.\n"
            "2.  **–°–ø–∏—Å–∫–∏:** –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1. –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç`, `2. –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç`) –∏–ª–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `- –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞` –∏–ª–∏ `* –î—Ä—É–≥–æ–π —ç–ª–µ–º–µ–Ω—Ç`). –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ø–∏—Å–∫–æ–≤.\n"
            "3.  **–°–µ–∫—Ü–∏–∏/–ó–∞–≥–æ–ª–æ–≤–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ):** –î–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫—Ä—É–ø–Ω—ã—Ö —Å–º—ã—Å–ª–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ—è—Å–Ω—è—é—â—É—é —Ñ—Ä–∞–∑—É –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã–¥–µ–ª–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –ó–ê–ì–õ–ê–í–ù–´–ú–ò –ë–£–ö–í–ê–ú–ò. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "    –û–°–ù–û–í–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:\n"
            "    - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –æ–¥–∏–Ω...\n"
            "    - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–≤–∞...\n"
            "4.  **–ë–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π Markdown-—Ä–∞–∑–º–µ—Ç–∫—É (–∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫—É—Ä—Å–∏–≤–∞, –æ–±—Ä–∞—Ç–Ω—ã–µ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –¥–ª—è –∫–æ–¥–∞, —Å–∏–º–≤–æ–ª—ã —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ç.–¥.). –ì–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —è—Å–Ω—ã–π, —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç.\n"
            "5.  **–õ–æ–≥–∏—á–µ—Å–∫–∞—è –ó–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å:** –°—Ç–∞—Ä–∞–π—Å—è, —á—Ç–æ–±—ã —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ –ø–æ–ª–Ω—ã–º–∏. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–∫–∏, —É–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É–Ω–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –õ—É—á—à–µ –Ω–µ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç, –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —É—Å–ø–µ–µ—à—å –µ–≥–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤ —Ä–∞–º–∫–∞—Ö —Ä–∞–∑—É–º–Ω–æ–π –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞.\n"
            "6.  **–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å:** –ì–ª–∞–≤–Ω–æ–µ ‚Äî —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç –±—ã–ª –ø–æ–Ω—è—Ç–Ω—ã–º, —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ª–µ–≥–∫–∏–º –¥–ª—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.\n"
            "7. **–ë–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤:** –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤ —Ç–µ–∫—Å—Ç–µ –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ —Å–∫–æ–±–∫–∏, –¥–µ—Ñ–∏—Å—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–µ—Å—É—Ç —Å–º—ã—Å–ª–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏."
        ),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò (–ë–∞–∑–æ–≤—ã–π)'. –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?"
    },
     "gemini_pro_custom_mode": {
        "name": "ü§ñ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç (–¥–ª—è Gemini 2.5 Pro)",
        "prompt": (
            "–¢—ã ‚Äî Gemini 2.5 Pro, –º–æ—â–Ω—ã–π –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—ã–µ, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
            "–°–æ–±–ª—é–¥–∞–π –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. "
            "–§–æ—Ä–º—É–ª–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —è—Å–Ω–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∞–±–∑–∞—Ü—ã –∏ —Å–ø–∏—Å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. "
            "–ò–∑–±–µ–≥–∞–π –∏–∑–ª–∏—à–Ω–µ–≥–æ Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —É–ª—É—á—à–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞). "
            "–ï—Å–ª–∏ —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —É–∫–∞–∑—ã–≤–∞–π —ç—Ç–æ."
        ),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'. –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?"
    },
    "creative_helper": {
        "name": "‚úçÔ∏è –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ü–æ–º–æ—â–Ω–∏–∫",
        "prompt": (
            "–¢—ã ‚Äî Gemini, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ò–ò-–ø–∞—Ä—Ç–Ω—ë—Ä –∏ –ø–∏—Å–∞—Ç–µ–ª—å. "
            "–¢–≤–æ—è –º–∏—Å—Å–∏—è ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å, –ø–æ–º–æ–≥–∞—Ç—å –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–µ–∫—Å—Ç—ã, –∏–¥–µ–∏, —Å—Ü–µ–Ω–∞—Ä–∏–∏, —Å—Ç–∏—Ö–∏ –∏ —Ç.–¥.) –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–º—ã—Å–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
            "–ë—É–¥—å —Å–º–µ–ª—ã–º –≤ –∏–¥–µ—è—Ö, –ø—Ä–µ–¥–ª–∞–≥–∞–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –Ω–æ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞–π—Å—è –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–∏–∫–∏ –∏ –∑–¥—Ä–∞–≤–æ–≥–æ —Å–º—ã—Å–ª–∞. "
            "**–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ –∫ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–º—É —Ç–µ–∫—Å—Ç—É):**\n"
            "1.  **–ê–±–∑–∞—Ü—ã:** –î–ª—è –ø—Ä–æ–∑—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–π ‚Äî —á–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∞–±–∑–∞—Ü—ã.\n"
            "2.  **–°—Ç–∏—Ö–∏:** –°–æ–±–ª—é–¥–∞–π —Å—Ç—Ä–æ—Ñ—ã –∏ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –∑–∞–¥–∞–Ω–∏–µ–º.\n"
            "3.  **–î–∏–∞–ª–æ–≥–∏:** –û—Ñ–æ—Ä–º–ª—è–π –¥–∏–∞–ª–æ–≥–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –æ–±—Ä–∞–∑–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, `- –ü—Ä–∏–≤–µ—Ç! - —Å–∫–∞–∑–∞–ª –æ–Ω.` –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞).\n"
            "4.  **–ë–µ–∑ Markdown:** –ì–µ–Ω–µ—Ä–∏—Ä—É–π —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ Markdown-—Ä–∞–∑–º–µ—Ç–∫–∏ (–∑–≤–µ–∑–¥–æ—á–µ–∫, —Ä–µ—à–µ—Ç–æ–∫ –∏ —Ç.–ø.), –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —ç—Ç–æ –Ω–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–º–æ–≥–æ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã, –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏).\n"
            "5.  **–Ø–∑—ã–∫:** –ò—Å–ø–æ–ª—å–∑—É–π –±–æ–≥–∞—Ç—ã–π –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ.\n"
            "6.  **–ó–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å:** –°—Ç–∞—Ä–∞–π—Å—è –¥–æ–≤–æ–¥–∏—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ü–∞ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –∑–∞–¥–∞—á–µ–π."
        ),
        "welcome": "–†–µ–∂–∏–º '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ü–æ–º–æ—â–Ω–∏–∫' –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º! –ù–∞–¥ –∫–∞–∫–æ–π —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ–π –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º?"
    },
}
DEFAULT_AI_MODE_KEY = "universal_ai_basic"

AVAILABLE_TEXT_MODELS = {
    "google_gemini_2_0_flash": {"name": "‚ö°Ô∏è Gemini 2.0 Flash", "id": "gemini-2.0-flash", "api_type": "google_genai", "is_limited": True, "limit_type": "daily_free", "limit": DEFAULT_FREE_REQUESTS_GOOGLE_FLASH_DAILY, "cost_category": "google_flash_free"},
    "google_gemini_2_5_flash_preview": {"name": "üí® Gemini 2.5 Flash Preview", "id": "gemini-2.5-flash-preview-04-17", "api_type": "google_genai", "is_limited": True, "limit_type": "subscription_or_daily_free", "limit_if_no_subscription": DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY, "subscription_daily_limit": DEFAULT_SUBSCRIPTION_REQUESTS_GOOGLE_FLASH_PREVIEW_DAILY, "cost_category": "google_flash_preview_flex"},
    "custom_api_gemini_2_5_pro": {"name": "üåü Gemini 2.5 Pro (–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)", "id": "gemini-2.5-pro-preview-03-25", "api_type": "custom_http_api", "endpoint": CUSTOM_GEMINI_PRO_ENDPOINT, "api_key_var_name": "CUSTOM_GEMINI_PRO_API_KEY", "is_limited": True, "limit_type": "subscription_custom_pro", "limit_if_no_subscription": DEFAULT_FREE_REQUESTS_CUSTOM_PRO_DAILY, "subscription_daily_limit": DEFAULT_SUBSCRIPTION_REQUESTS_CUSTOM_PRO_DAILY, "cost_category": "custom_api_pro_paid", "pricing_info": {}}
}
DEFAULT_MODEL_KEY = "google_gemini_2_0_flash"
DEFAULT_MODEL_ID = AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]["id"]

if not GOOGLE_GEMINI_API_KEY or "YOUR_GOOGLE_GEMINI_API_KEY" in GOOGLE_GEMINI_API_KEY or "AIzaSy" not in GOOGLE_GEMINI_API_KEY: logger.warning("Google Gemini API key is not set correctly.")
else:
    try: genai.configure(api_key=GOOGLE_GEMINI_API_KEY); logger.info("Google Gemini API configured.")
    except Exception as e: logger.error(f"Failed to configure Google Gemini API: {e}")
if not CUSTOM_GEMINI_PRO_API_KEY or "YOUR_CUSTOM_KEY" in CUSTOM_GEMINI_PRO_API_KEY or "sk-" not in CUSTOM_GEMINI_PRO_API_KEY: logger.warning("Custom Gemini Pro API key is not set correctly.")

def get_current_mode_details(context: ContextTypes.DEFAULT_TYPE) -> dict:
    key = get_current_model_key(context)
    return AI_MODES.get("gemini_pro_custom_mode" if key == "custom_api_gemini_2_5_pro" else context.user_data.get('current_ai_mode', DEFAULT_AI_MODE_KEY), AI_MODES[DEFAULT_AI_MODE_KEY])

def get_current_model_key(context: ContextTypes.DEFAULT_TYPE) -> str:
    sel_id, sel_api = context.user_data.get('selected_model_id', DEFAULT_MODEL_ID), context.user_data.get('selected_api_type')
    for k, v in AVAILABLE_TEXT_MODELS.items():
        if v["id"] == sel_id and v.get("api_type") == sel_api: return k
    logger.warning(f"Model key not found for id '{sel_id}' type '{sel_api}'. Defaulting.")
    def_cfg = AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]
    context.user_data.update({'selected_model_id': def_cfg["id"], 'selected_api_type': def_cfg["api_type"]})
    return DEFAULT_MODEL_KEY

def get_selected_model_details(context: ContextTypes.DEFAULT_TYPE) -> dict:
    return AVAILABLE_TEXT_MODELS.get(get_current_model_key(context), AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY])

def smart_truncate(text: str, max_length: int) -> tuple[str, bool]:
    if not isinstance(text, str): return str(text), False
    if len(text) <= max_length: return text, False
    suffix = "\n\n(...–æ—Ç–≤–µ—Ç –±—ã–ª —Å–æ–∫—Ä–∞—â–µ–Ω)"
    adj_max = max_length - len(suffix)
    if adj_max <= 0: return text[:max_length-len("...")] + "...", True
    trunc = text[:adj_max]
    cuts = [pos + (len(s)-1 if s.endswith(' ') and len(s)>1 else len(s)) for s in ['\n\n','. ','! ','? ','\n'] if (pos := trunc.rfind(s)) != -1 and pos > 0]
    if cuts and (cut_at := max(cuts)) > adj_max * 0.5: return text[:cut_at].strip() + suffix, True
    if (last_space := trunc.rfind(' ')) != -1 and last_space > adj_max * 0.5: return text[:last_space].strip() + suffix, True
    return text[:adj_max].strip() + suffix, True

def get_main_reply_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([[KeyboardButton(s) for s in r] for r in [["ü§ñ –†–µ–∂–∏–º –ò–ò", "‚öôÔ∏è –ú–æ–¥–µ–ª—å –ò–ò"], ["üìä –õ–∏–º–∏—Ç—ã", "üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏"], ["‚ùì –ü–æ–º–æ—â—å"]]], resize_keyboard=True)

def get_user_actual_limit_for_model(user_id: int, model_key: str, context: ContextTypes.DEFAULT_TYPE) -> int:
    cfg = AVAILABLE_TEXT_MODELS.get(model_key)
    if not cfg: return 0
    sub_details = context.bot_data.setdefault('user_subscriptions', {}).get(user_id, {})
    is_profi = False
    if sub_details.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY and sub_details.get('valid_until'):
        try: is_profi = datetime.now(datetime.fromisoformat(sub_details['valid_until']).tzinfo).date() <= datetime.fromisoformat(sub_details['valid_until']).date()
        except: pass
    lt = cfg.get("limit_type")
    if lt == "daily_free": return cfg.get("limit", 0)
    if lt in ["subscription_or_daily_free", "subscription_custom_pro"]: return cfg.get("subscription_daily_limit" if is_profi else "limit_if_no_subscription", 0)
    return cfg.get("limit", float('inf')) if not cfg.get("is_limited", False) else 0

def check_and_log_request_attempt(user_id: int, model_key: str, context: ContextTypes.DEFAULT_TYPE) -> tuple[bool, str, int]:
    today = datetime.now().strftime("%Y-%m-%d")
    cfg = AVAILABLE_TEXT_MODELS.get(model_key)
    if not cfg or not cfg.get("is_limited"): return True, "", 0
    is_profi = False
    if cfg.get("limit_type") in ["subscription_or_daily_free", "subscription_custom_pro", NEWS_CHANNEL_BONUS_MODEL_KEY]: # Check if Profi for bonus model too
        sub_details = context.bot_data.get('user_subscriptions', {}).get(user_id, {})
        if sub_details.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY and sub_details.get('valid_until'):
            try: is_profi = datetime.now(datetime.fromisoformat(sub_details['valid_until']).tzinfo).date() <= datetime.fromisoformat(sub_details['valid_until']).date()
            except: pass
    if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY and not is_profi and context.user_data.get('news_bonus_uses_left', 0) > 0:
        return True, "bonus_available", 0
    counts = context.bot_data.setdefault('all_user_daily_counts', {}).setdefault(user_id, {})
    usage = counts.setdefault(model_key, {'date': '', 'count': 0})
    if usage['date'] != today: usage.update({'date': today, 'count': 0})
    daily_count, daily_limit = usage['count'], get_user_actual_limit_for_model(user_id, model_key, context)
    if daily_count >= daily_limit:
        msg = [f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ ({daily_count}/{daily_limit}) –¥–ª—è '{cfg['name']}'."]
        if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY and not is_profi:
            if not context.user_data.get('claimed_news_bonus', False): msg.append(f"üí° –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ [–∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK}) –∏ `/get_news_bonus` –¥–ª—è –±–æ–Ω—É—Å–∞!")
            elif context.user_data.get('news_bonus_uses_left', 0) == 0: msg.append("‚ÑπÔ∏è –ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        msg.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ `/subscribe` –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤.")
        return False, "\n".join(msg), daily_count
    return True, "", daily_count

def increment_request_count(user_id: int, model_key: str, context: ContextTypes.DEFAULT_TYPE):
    cfg = AVAILABLE_TEXT_MODELS.get(model_key)
    if not cfg or not cfg.get("is_limited"): return
    if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY:
        is_profi = False
        sub_details = context.bot_data.get('user_subscriptions', {}).get(user_id, {})
        if sub_details.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY and sub_details.get('valid_until'):
            try: is_profi = datetime.now(datetime.fromisoformat(sub_details['valid_until']).tzinfo).date() <= datetime.fromisoformat(sub_details['valid_until']).date()
            except: pass
        if not is_profi and (bonus := context.user_data.get('news_bonus_uses_left', 0)) > 0:
            context.user_data['news_bonus_uses_left'] = bonus - 1
            logger.info(f"User {user_id} consumed news bonus for {model_key}. Left: {bonus-1}")
            return
    today = datetime.now().strftime("%Y-%m-%d")
    usage = context.bot_data.setdefault('all_user_daily_counts', {}).setdefault(user_id, {}).setdefault(model_key, {'date': today, 'count': 0})
    if usage['date'] != today: usage.update({'date': today, 'count': 0})
    usage['count'] += 1
    logger.info(f"User {user_id} daily count for {model_key} to {usage['count']}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    context.user_data.setdefault('current_ai_mode', DEFAULT_AI_MODE_KEY)
    if 'selected_model_id' not in context.user_data or 'selected_api_type' not in context.user_data:
        def_cfg = AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]
        context.user_data.update({'selected_model_id': def_cfg["id"], 'selected_api_type': def_cfg["api_type"]})
    
    key, mode_name, model_name = get_current_model_key(context), get_current_mode_details(context)['name'], AVAILABLE_TEXT_MODELS[get_current_model_key(context)]['name']
    greeting, mode_l, model_l = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ò–ò-–±–æ—Ç –Ω–∞ Gemini.", f"üß† –†–µ–∂–∏–º: *{escape_markdown(mode_name,version=2)}*", f"‚öôÔ∏è –ú–æ–¥–µ–ª—å: *{escape_markdown(model_name,version=2)}*"
    _, lim_msg, count = check_and_log_request_attempt(user_id, key, context)
    lim_t = f"–õ–∏–º–∏—Ç: {count}/{get_user_actual_limit_for_model(user_id, key, context)} –≤ –¥–µ–Ω—å."
    if "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏" in lim_msg: lim_t = lim_msg.splitlines()[0]
    lim_l = f"üìä {escape_markdown(lim_t,version=2)}"
    
    parts = [escape_markdown(greeting,version=2), mode_l, model_l, lim_l]
    if NEWS_CHANNEL_USERNAME and NEWS_CHANNEL_USERNAME != "@YourNewsChannelHandle": # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –∫–∞–Ω–∞–ª–∞ –∑–∞–¥–∞–Ω–æ
        bonus_info = ""
        if not context.user_data.get('claimed_news_bonus', False):
            bonus_info = (f"\nüéÅ –ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ [–Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK})\! "
                          f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/get_news_bonus` –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π\.")
        elif (bal := context.user_data.get('news_bonus_uses_left', 0)) > 0:
            bonus_info = f"\n‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å *{bal}* –±–æ–Ω—É—Å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É\."
        else: bonus_info = f"\n‚ÑπÔ∏è –ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ [–∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK}) —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\."
        parts.append(bonus_info)
        
    parts.extend([f"\n{escape_markdown('–í—ã –º–æ–∂–µ—Ç–µ:',version=2)}", "üí¨ –ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã", "ü§ñ `/mode` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞", "‚öôÔ∏è `/model` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞", "üìä `/usage` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞", "üíé `/subscribe` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞", f"üéÅ `/get_news_bonus`", "‚ùì `/help` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞", f"\n{escape_markdown('–í–∞—à –∑–∞–ø—Ä–æ—Å?',version=2)}"])
    final_md = "\n".join(parts)
    try:
        await update.message.reply_text(final_md, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=get_main_reply_keyboard(), disable_web_page_preview=True)
    except telegram.error.BadRequest: # Fallback
        # ... (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π plain text fallback –¥–ª—è /start)
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.", reply_markup=get_main_reply_keyboard(), disable_web_page_preview=True)
    logger.info(f"Start command for user {user_id}")

async def get_news_bonus_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user: return

    if not NEWS_CHANNEL_USERNAME or NEWS_CHANNEL_USERNAME == "@YourNewsChannelHandle":
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –±–æ–Ω—É—Å–∞ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.", disable_web_page_preview=True)
        return

    if context.user_data.get('claimed_news_bonus', False) and context.user_data.get('news_bonus_uses_left', 0) == 0:
        await update.message.reply_text(f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ [–∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK})\.", parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)
        return
    elif context.user_data.get('claimed_news_bonus', False) and (uses_left := context.user_data.get('news_bonus_uses_left', 0)) > 0:
        bonus_model_name = AVAILABLE_TEXT_MODELS.get(NEWS_CHANNEL_BONUS_MODEL_KEY, {}).get('name', "–±–æ–Ω—É—Å–Ω–æ–π –º–æ–¥–µ–ª–∏")
        await update.message.reply_text(f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å *{uses_left}* –±–æ–Ω—É—Å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏ '{escape_markdown(bonus_model_name, version=2)}' –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É\.", parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)
        return

    text = (
        f"–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å *{NEWS_CHANNEL_BONUS_GENERATIONS}* –±–æ–Ω—É—Å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:\n"
        f"1\\. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à [–Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK})\n"
        f"2\\. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å\n"
        f"3\\. –í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\."
    )
    keyboard = [
        [InlineKeyboardButton(f"üì¢ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª {NEWS_CHANNEL_USERNAME}", url=NEWS_CHANNEL_LINK)],
        [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å!", callback_data="check_news_subscription")]
    ]
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)

async def claim_news_bonus_logic(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                 called_from_button: bool = False, message_to_edit: Optional[telegram.Message] = None):
    user = update.effective_user
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –æ—Ç–≤–µ—á–∞—Ç—å –∏–ª–∏ —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    if called_from_button and update.callback_query:
        target_chat_id = update.callback_query.message.chat_id
        # message_to_edit –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∏–∑ button_callback
    elif update.message:
        target_chat_id = update.message.chat_id
        message_to_edit = None # –ö–æ–º–∞–Ω–¥–∞ /claim_news_bonus –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    else:
        logger.warning("claim_news_bonus_logic: Could not determine user or reply target.")
        return

    if not NEWS_CHANNEL_USERNAME or NEWS_CHANNEL_USERNAME == "@YourNewsChannelHandle":
        err_msg = "–§—É–Ω–∫—Ü–∏—è –±–æ–Ω—É—Å–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞."
        if message_to_edit: await message_to_edit.edit_text(err_msg, reply_markup=None, disable_web_page_preview=True)
        else: await context.bot.send_message(chat_id=target_chat_id, text=err_msg, disable_web_page_preview=True)
        return

    bonus_model_cfg = AVAILABLE_TEXT_MODELS.get(NEWS_CHANNEL_BONUS_MODEL_KEY)
    if not bonus_model_cfg:
        err_msg = "–û—à–∏–±–∫–∞: –ë–æ–Ω—É—Å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        if message_to_edit: await message_to_edit.edit_text(err_msg, reply_markup=None, disable_web_page_preview=True)
        else: await context.bot.send_message(chat_id=target_chat_id, text=err_msg, disable_web_page_preview=True)
        return
    bonus_model_name_md = escape_markdown(bonus_model_cfg['name'], version=2)

    if context.user_data.get('claimed_news_bonus', False):
        uses_left = context.user_data.get('news_bonus_uses_left', 0)
        reply_text = ""
        if uses_left > 0:
            reply_text = (f"–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å\. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å *{uses_left}* –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏ '{bonus_model_name_md}'\.\n"
                          f"–ù–∞—à [–∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK})\.")
        else:
            reply_text = (f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –º–æ–¥–µ–ª–∏ '{bonus_model_name_md}'\.\n"
                          f"–ù–∞—à [–∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK})\.")
        
        if message_to_edit: await message_to_edit.edit_text(reply_text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=None, disable_web_page_preview=True)
        else: await context.bot.send_message(chat_id=target_chat_id, text=reply_text, parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)
        return

    try:
        member = await context.bot.get_chat_member(chat_id=NEWS_CHANNEL_USERNAME, user_id=user.id)
        if member.status in ['member', 'administrator', 'creator']:
            context.user_data['claimed_news_bonus'] = True
            context.user_data['news_bonus_uses_left'] = NEWS_CHANNEL_BONUS_GENERATIONS
            success_text = (
                f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ [–∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK})\!\n"
                f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ *{NEWS_CHANNEL_BONUS_GENERATIONS}* –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ '{bonus_model_name_md}'\."
            )
            if message_to_edit: await message_to_edit.edit_text(success_text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=None, disable_web_page_preview=True)
            else: await context.bot.send_message(chat_id=target_chat_id, text=success_text, parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)
        else:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏ —ç—Ç–æ –±—ã–ª–æ —Å –∫–Ω–æ–ø–∫–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ (–Ω–µ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏)
            fail_text = (f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ [–∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã, –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—â–µ —Ä–∞–∑\.")
            keyboard_after_fail = None
            if message_to_edit: # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∑–Ω–∞—á–∏—Ç, —ç—Ç–æ —Å –∫–Ω–æ–ø–∫–∏)
                 keyboard_after_fail = InlineKeyboardMarkup([
                    [InlineKeyboardButton(f"üì¢ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª {NEWS_CHANNEL_USERNAME}", url=NEWS_CHANNEL_LINK)],
                    [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞!", callback_data="check_news_subscription")]
                ])
                 await message_to_edit.edit_text(fail_text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=keyboard_after_fail, disable_web_page_preview=True)
            else: # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∫–æ–º–∞–Ω–¥–∞ /claim_news_bonus
                await context.bot.send_message(chat_id=target_chat_id, text=fail_text, parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)

    except telegram.error.BadRequest as e:
        # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ get_chat_member –∫–∞–∫ —Ä–∞–Ω—å—à–µ)
        err_msg_on_check = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if message_to_edit: await message_to_edit.edit_text(err_msg_on_check, reply_markup=None, disable_web_page_preview=True) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        else: await context.bot.send_message(chat_id=target_chat_id, text=err_msg_on_check, disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"claim_news_bonus_logic general error: {e}\n{traceback.format_exc()}")
        err_msg_general = "–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞."
        if message_to_edit: await message_to_edit.edit_text(err_msg_general, reply_markup=None, disable_web_page_preview=True)
        else: await context.bot.send_message(chat_id=target_chat_id, text=err_msg_general, disable_web_page_preview=True)

async def claim_news_bonus_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await claim_news_bonus_logic(update, context, called_from_button=False, message_to_edit=None)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ button_callback –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ claim_news_bonus) ...
    if data.startswith("set_mode_"):
        # ... (–∫–æ–¥ –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)
        # –í –∫–æ–Ω—Ü–µ:
        if new_text:
            try: await query.message.edit_text(text=new_text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=None, disable_web_page_preview=True)
            except telegram.error.BadRequest: await query.message.edit_text(text=plain_fallback, reply_markup=None, disable_web_page_preview=True)
            except Exception as e: logger.error(f"Edit error in set_mode: {e}")
        return

    elif data.startswith("set_model_"):
        # ... (–∫–æ–¥ –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)
        # –í –∫–æ–Ω—Ü–µ:
        if new_text:
            try: await query.message.edit_text(text=new_text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=None, disable_web_page_preview=True)
            except telegram.error.BadRequest: await query.message.edit_text(text=plain_fallback, reply_markup=None, disable_web_page_preview=True)
            except Exception as e: logger.error(f"Edit error in set_model: {e}")
        return
        
    elif data == "check_news_subscription":
        await claim_news_bonus_logic(update, context, called_from_button=True, message_to_edit=query.message)
        return # –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ claim_news_bonus_logic

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø–æ–∫—É–ø–∫–∏) –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–¥–µ—Å—å –∏–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö CallbackQueryHandler
    elif data == "buy_profi_2days": # –ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª —Å—é–¥–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –≤ –æ–±—â–µ–º button_callback
        await buy_button_handler(update, context) # buy_button_handler –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å async –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å (update, context)
        return

async def select_mode_command(update: Update, context: ContextTypes.DEFAULT_TYPE): # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    keyboard = [[InlineKeyboardButton(details["name"], callback_data=f"set_mode_{key}")]
                for key, details in AI_MODES.items() if key != "gemini_pro_custom_mode"]
    if not keyboard:
        await update.message.reply_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤.', reply_markup=get_main_reply_keyboard())
        return
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ò–ò (–¥–ª—è Gemini 2.5 Pro —Ä–µ–∂–∏–º –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏):',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def select_model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id # –ü–æ–ª—É—á–∞–µ–º user_id –¥–ª—è get_user_actual_limit_for_model
    keyboard = []
    for key, details in AVAILABLE_TEXT_MODELS.items():
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏, –≤–∫–ª—é—á–∞—è –ª–∏–º–∏—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π
        limit_info = ""
        if details.get("is_limited"):
            # _, _, current_c = check_and_log_request_attempt(user_id, key, context) # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º check_and_log –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫
            # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç
            actual_l = get_user_actual_limit_for_model(user_id, key, context)
            if actual_l != float('inf'): # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π
                 # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏
                today_str = datetime.now().strftime("%Y-%m-%d")
                user_model_counts = context.bot_data.get('all_user_daily_counts', {}).get(user_id, {})
                model_daily_usage = user_model_counts.get(key, {'date': '', 'count': 0})
                current_c_display = model_daily_usage['count'] if model_daily_usage['date'] == today_str else 0
                limit_info = f" ({current_c_display}/{actual_l})"


        button_text = f"{details['name']}{limit_info}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"set_model_{key}")])

    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò:', reply_markup=InlineKeyboardMarkup(keyboard))

async def usage_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_sub_details = context.bot_data.setdefault('user_subscriptions', {}).get(user_id, {})
    display_sub_level = "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø"
    subscription_active = False
    if user_sub_details.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY and user_sub_details.get('valid_until'):
        try:
            valid_until_dt = datetime.fromisoformat(user_sub_details['valid_until'])
            if datetime.now(valid_until_dt.tzinfo).date() <= valid_until_dt.date():
                display_sub_level = f"üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ (–¥–æ {valid_until_dt.strftime('%Y-%m-%d')})"
                subscription_active = True
            else: display_sub_level = "üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ (–∏—Å—Ç–µ–∫–ª–∞)"
        except Exception: display_sub_level = "üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ (–æ—à–∏–±–∫–∞ –¥–∞—Ç—ã)"

    usage_text_parts = [f"üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –ª–∏–º–∏—Ç–∞—Ö*", f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: *{escape_markdown(display_sub_level,version=2)}*", "\n–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –º–æ–¥–µ–ª—è–º:"]
    for mk, mc in AVAILABLE_TEXT_MODELS.items():
        if mc.get("is_limited"):
            # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º check_and_log_request_attempt –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ª–∏–º–∏—Ç–æ–≤.
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è.
            today_str = datetime.now().strftime("%Y-%m-%d")
            all_daily_counts = context.bot_data.get('all_user_daily_counts', {})
            user_model_counts = all_daily_counts.get(user_id, {})
            model_daily_usage = user_model_counts.get(mk, {'date': '', 'count': 0})
            current_c_display = model_daily_usage['count'] if model_daily_usage['date'] == today_str else 0
            
            actual_l = get_user_actual_limit_for_model(user_id, mk, context)
            usage_text_parts.append(f"‚ñ´Ô∏è {escape_markdown(mc['name'],version=2)}: *{current_c_display}/{actual_l}*")

    if NEWS_CHANNEL_USERNAME and NEWS_CHANNEL_USERNAME != "@YourNewsChannelHandle":
        bonus_model_name = AVAILABLE_TEXT_MODELS.get(NEWS_CHANNEL_BONUS_MODEL_KEY,{}).get('name', "–±–æ–Ω—É—Å–Ω–æ–π –º–æ–¥–µ–ª–∏")
        bonus_model_name_md = escape_markdown(bonus_model_name,version=2)
        bonus_info_usage = ""
        if not context.user_data.get('claimed_news_bonus', False):
            bonus_info_usage = (f"\nüéÅ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ [–∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK}) –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/get_news_bonus` "
                                f"–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è *{NEWS_CHANNEL_BONUS_GENERATIONS}* –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ({bonus_model_name_md})\!")
        elif (bonus_left := context.user_data.get('news_bonus_uses_left', 0)) > 0:
            bonus_info_usage = f"\nüéÅ –£ –≤–∞—Å *{bonus_left}* –±–æ–Ω—É—Å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è {bonus_model_name_md} ([–∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK}))\."
        else:
            bonus_info_usage = f"\n‚ÑπÔ∏è –ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ [–∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK}) ({bonus_model_name_md}) —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\."
        usage_text_parts.append(bonus_info_usage)

    if not subscription_active:
        usage_text_parts.append(f"\n–•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–æ–≤? –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ü–æ–¥–ø–∏—Å–∫–æ–π –ü—Ä–æ—Ñ–∏: `/subscribe`")

    final_usage_text_md = "\n".join(usage_text_parts)
    try:
        await update.message.reply_text(final_usage_text_md, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=get_main_reply_keyboard(), disable_web_page_preview=True)
    except telegram.error.BadRequest:
        # ... (plain text fallback –¥–ª—è /usage)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ª–∏–º–∏—Ç—ã.", reply_markup=get_main_reply_keyboard(), disable_web_page_preview=True)

async def subscribe_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE): # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    text_parts = ["üåü *–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ ‚Äì –ú–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Gemini\!* üåü",
                  "\n–ü–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —Å–∞–º—ã—Ö –º–æ—â–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:"]
    for key, model_char in [("google_gemini_2_5_flash_preview", "üí®"), ("custom_api_gemini_2_5_pro", "üåü")]:
        m_conf = AVAILABLE_TEXT_MODELS[key]
        text_parts.append(f"{model_char} {escape_markdown(m_conf['name'], version=2)}: *{m_conf['subscription_daily_limit']}* –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å "
                          f"(–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {m_conf['limit_if_no_subscription']} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å)")
    text_parts.append(f"\n–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å —â–µ–¥—Ä—ã–º –ª–∏–º–∏—Ç–æ–º:\n"
                      f"‚ö°Ô∏è {escape_markdown(AVAILABLE_TEXT_MODELS['google_gemini_2_0_flash']['name'], version=2)}: "
                      f"*{DEFAULT_FREE_REQUESTS_GOOGLE_FLASH_DAILY}* –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å (–±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è –≤—Å–µ—Ö)")
    text_parts.extend(["\n‚ú® *–î–æ—Å—Ç—É–ø–Ω—ã–π —Ç–∞—Ä–∏—Ñ –ü—Ä–æ—Ñ–∏ –¥–ª—è —Ç–µ—Å—Ç–∞:*", f"‚ñ´Ô∏è –¢–µ—Å—Ç-–¥—Ä–∞–π–≤ (2 –¥–Ω—è): `{escape_markdown('99 —Ä—É–±–ª–µ–π', version=2)}`"])
    
    keyboard = [[InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ü—Ä–æ—Ñ–∏ (2 –¥–Ω—è - 99 RUB)", callback_data="buy_profi_2days")]]
    reply_markup_subscribe = InlineKeyboardMarkup(keyboard)
    final_text_subscribe = "\n".join(text_parts)

    target_message = update.callback_query.message if update.callback_query else update.message
    edit_func = target_message.edit_text if update.callback_query else target_message.reply_text

    try:
        await edit_func(final_text_subscribe, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=reply_markup_subscribe, disable_web_page_preview=True)
    except telegram.error.BadRequest:
         await edit_func("–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏: ... (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)", reply_markup=reply_markup_subscribe, disable_web_page_preview=True)


async def buy_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE): # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫—Ä–æ–º–µ await query.message.reply_text
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if query.data == "buy_profi_2days":
        if not PAYMENT_PROVIDER_TOKEN or "YOUR_REAL_PAYMENT_PROVIDER_TOKEN_HERE" in PAYMENT_PROVIDER_TOKEN:
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ –±—ã–ª–∞ –∫–Ω–æ–ø–∫–∞, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ —Ç–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
            await query.message.reply_text("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",reply_markup=get_main_reply_keyboard())
            return
        prices = [LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ (2 –¥–Ω—è)", amount=99 * 100)]
        try:
            await context.bot.send_invoice(
                chat_id=user_id, title="–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ (2 –¥–Ω—è)",
                description="–î–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–∏–º–∏—Ç–∞–º Gemini –Ω–∞ 2 –¥–Ω—è.",
                payload=f"profi_2days_uid{user_id}_t{int(datetime.now().timestamp())}",
                provider_token=PAYMENT_PROVIDER_TOKEN, currency="RUB", prices=prices
            )
            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å" –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–¥–µ –æ–Ω–∞ –±—ã–ª–∞
            await query.edit_message_reply_markup(reply_markup=None)
        except Exception as e:
            logger.error(f"Error sending invoice to user {user_id}: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE): # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    query = update.pre_checkout_query
    if query.invoice_payload.startswith("profi_2days_uid"): await query.answer(ok=True)
    else: await query.answer(ok=False, error_message="–ü–ª–∞—Ç–µ–∂ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE): # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    user_id = update.effective_user.id
    payment = update.message.successful_payment
    if payment.invoice_payload.startswith("profi_2days_uid"):
        valid_until = (datetime.now() + timedelta(days=2)).isoformat()
        context.bot_data.setdefault('user_subscriptions', {})[user_id] = {
            'level': PRO_SUBSCRIPTION_LEVEL_KEY, 'valid_until': valid_until,
            'purchase_date': datetime.now().isoformat(), 'payload': payment.invoice_payload,
            'amount': payment.total_amount, 'currency': payment.currency
        }
        await update.message.reply_text(
            f"üéâ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {datetime.fromisoformat(valid_until).strftime('%Y-%m-%d %H:%M')}.",
            reply_markup=get_main_reply_keyboard()
        )
    else: await update.message.reply_text("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.",reply_markup=get_main_reply_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE): # –û–±–Ω–æ–≤–ª–µ–Ω–æ
    help_text_parts = [
        f"üëã –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–±–æ—Ç –Ω–∞ –±–∞–∑–µ –º–æ–¥–µ–ª–µ–π Gemini –æ—Ç Google\.",
        "\n*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏:*",
        "`/start` \- –ù–∞—á–∞–ª–æ / –ò–Ω—Ñ–æ",
        "`/mode` \- –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –ò–ò",
        "`/model` \- –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ò–ò",
        "`/usage` \- –ú–æ–∏ –ª–∏–º–∏—Ç—ã",
        "`/subscribe` \- –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏",
        f"`/get_news_bonus` \- üéÅ –ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ [–∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK})", # –ö–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∞
        "`/help` \- –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "\nüí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –±–æ—Ç—É\!"
    ]
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç, —Ç–æ–ª—å–∫–æ `/command` –∏ —Å—Å—ã–ª–∫–∏ –Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è MarkdownV2
    final_help_text_md = ""
    for part in help_text_parts:
        if part.startswith("`/") or NEWS_CHANNEL_LINK in part : # –ù–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —á–∞—Å—Ç–∏ —Å–æ —Å—Å—ã–ª–∫–æ–π
            final_help_text_md += part + "\n"
        else:
            final_help_text_md += escape_markdown(part, version=2) + "\n"

    try:
        await update.message.reply_text(final_help_text_md, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=get_main_reply_keyboard(), disable_web_page_preview=True)
    except telegram.error.BadRequest as e:
        logger.error(f"Error sending help_command with MarkdownV2: {e}. Text: {final_help_text_md}")
        plain_help = ["–Ø –ò–ò-–±–æ—Ç Gemini. –ö–æ–º–∞–Ω–¥—ã: /start, /mode, /model, /usage, /subscribe, /get_news_bonus, /help.", # –ö–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∞
                      f"–ö–∞–Ω–∞–ª –¥–ª—è –±–æ–Ω—É—Å–∞: {NEWS_CHANNEL_LINK}", "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."]
        await update.message.reply_text("\n".join(plain_help), reply_markup=get_main_reply_keyboard(), disable_web_page_preview=True)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE): # –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ª–æ–≥–∏–∫–µ, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–ª return
    user_message = update.message.text
    user_id = update.effective_user.id
    if not user_message or not user_message.strip():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.", reply_markup=get_main_reply_keyboard())
        return

    current_model_key = get_current_model_key(context)
    selected_model_details = AVAILABLE_TEXT_MODELS[current_model_key]
    system_prompt = get_current_mode_details(context)["prompt"]

    can_request, limit_message, _ = check_and_log_request_attempt(user_id, current_model_key, context)
    if not can_request:
        # limit_message —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç MarkdownV2 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–∏–∑ check_and_log_request_attempt)
        await update.message.reply_text(limit_message, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=get_main_reply_keyboard(), disable_web_page_preview=True)
        return

    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    reply_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
    request_successful = False
    api_type = selected_model_details.get("api_type")

    if api_type == "google_genai":
        if not GOOGLE_GEMINI_API_KEY or "YOUR_GOOGLE_GEMINI_API_KEY" in GOOGLE_GEMINI_API_KEY or "AIzaSy" not in GOOGLE_GEMINI_API_KEY:
            reply_text = "–ö–ª—é—á API –¥–ª—è Google Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
        else:
            try:
                model_id = selected_model_details["id"]
                model = genai.GenerativeModel(model_id)
                gen_config_params = {"temperature": 0.75}
                if MAX_OUTPUT_TOKENS_GEMINI_LIB > 0 and not any(s in model_id for s in ["1.5", "2.0"]):
                     gen_config_params["max_output_tokens"] = MAX_OUTPUT_TOKENS_GEMINI_LIB
                
                chat = model.start_chat(history=[{"role": "user", "parts": [system_prompt]}, {"role": "model", "parts": ["–ü–æ–Ω—è–ª. –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å."]}])
                response = await chat.send_message_async(user_message, generation_config=genai.types.GenerationConfig(**gen_config_params))
                
                if response.text and response.text.strip():
                    reply_text = response.text
                    request_successful = True
                else: 
                    block_reason_msg = ""
                    if hasattr(response, 'prompt_feedback') and response.prompt_feedback and response.prompt_feedback.block_reason:
                        block_reason_msg = f" –ü—Ä–∏—á–∏–Ω–∞: {response.prompt_feedback.block_reason}."
                    if response.candidates and not response.text: 
                         candidate = response.candidates[0]
                         if candidate.finish_reason != 1: # FINISH_REASON_UNSPECIFIED = 0, FINISH_REASON_STOP = 1, FINISH_REASON_MAX_TOKENS = 2, FINISH_REASON_SAFETY = 3, FINISH_REASON_RECITATION = 4, FINISH_REASON_OTHER = 5
                              block_reason_msg += f" –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {candidate.finish_reason.name if hasattr(candidate.finish_reason, 'name') else candidate.finish_reason}."
                         if candidate.safety_ratings:
                             block_reason_msg += f" –†–µ–π—Ç–∏–Ω–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {[(sr.category.name, sr.probability.name) for sr in candidate.safety_ratings]}."
                    reply_text = f"–ò–ò (Google) –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ–Ω –±—ã–ª –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω.{block_reason_msg} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."


            except google.api_core.exceptions.GoogleAPIError as e:
                err_msg_lower = str(e).lower()
                if "api key not valid" in err_msg_lower: reply_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞: API –∫–ª—é—á Google –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω."
                elif "billing" in err_msg_lower: reply_text = "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∏–ª–ª–∏–Ω–≥–æ–º Google API."
                elif "quota" in err_msg_lower or "resource has been exhausted" in err_msg_lower : reply_text = "‚ö†Ô∏è –ò—Å—á–µ—Ä–ø–∞–Ω–∞ –∫–≤–æ—Ç–∞ Google API."
                elif "user location" in err_msg_lower: reply_text = "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ (Google API)."
                elif "model not found" in err_msg_lower: reply_text = f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å '{selected_model_details['id']}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Google API."
                else: reply_text = f"–û—à–∏–±–∫–∞ Google API: {type(e).__name__}"
                logger.error(f"GoogleAPIError for {selected_model_details['id']}: {e}")
            except Exception as e:
                logger.error(f"General Google error for {selected_model_details['id']}: {e}\n{traceback.format_exc()}")
                reply_text = "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (Google Gemini)."

    elif api_type == "custom_http_api":
        api_key = globals().get(selected_model_details.get("api_key_var_name"))
        if not api_key or ("sk-" not in api_key and "pk-" not in api_key) :
            reply_text = f"‚ö†Ô∏è –ö–ª—é—á API –¥–ª—è '{selected_model_details['name']}' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
        else:
            payload = {"model": selected_model_details["id"], "messages": [{"role": "user", "content": system_prompt}, {"role": "user", "content": user_message}],
                       "is_sync": True, "temperature": 0.75, "stream": False}
            headers = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Authorization': f'Bearer {api_key}'}
            try:
                api_response = requests.post(selected_model_details["endpoint"], json=payload, headers=headers, timeout=90)
                api_response.raise_for_status()
                response_data = api_response.json()
                if (res_list := response_data.get("response")) and isinstance(res_list, list) and res_list:
                    if (msg_content := res_list[0].get("message", {}).get("content")):
                        reply_text = msg_content
                        request_successful = True
                    else: reply_text = f"‚ö†Ô∏è –ò–ò ({selected_model_details['name']}) –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."
                elif (err_detail := response_data.get("detail")):
                     reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Custom API: {str(err_detail)[:200]}"
                else: reply_text = f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Custom API ({selected_model_details['name']})."
            except requests.exceptions.HTTPError as e_http:
                status = e_http.response.status_code
                if status == 401: reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á (Custom API)."
                elif status == 402: reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 402: –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π (Custom API)."
                elif status == 429: reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 429: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (Custom API)."
                else: reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ ({status}) –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ '{selected_model_details['name']}'."
                logger.error(f"HTTPError Custom API {selected_model_details['name']}: {e_http}")
            except Exception as e_custom:
                logger.error(f"Custom API error {selected_model_details['name']}: {e_custom}\n{traceback.format_exc()}")
                reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç '{selected_model_details['name']}'."
    else:
        reply_text = f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø API: {api_type}"

    if request_successful and selected_model_details.get("is_limited"):
        increment_request_count(user_id, current_model_key, context)

    reply_text_final, _ = smart_truncate(reply_text, MAX_MESSAGE_LENGTH_TELEGRAM)
    await update.message.reply_text(reply_text_final, reply_markup=get_main_reply_keyboard())


async def set_bot_commands(application: Application):
    commands = [
        BotCommand("start", "üöÄ –ù–∞—á–∞–ª–æ / –ò–Ω—Ñ–æ"),
        BotCommand("mode", "üß† –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –ò–ò"),
        BotCommand("model", "‚öôÔ∏è –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ò–ò"),
        BotCommand("usage", "üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã"),
        BotCommand("subscribe", "üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏"),
        BotCommand("get_news_bonus", "üéÅ –ë–æ–Ω—É—Å –∑–∞ –Ω–æ–≤–æ—Å—Ç–∏"), # –ò–∑–º–µ–Ω–µ–Ω–æ
        BotCommand("claim_news_bonus", "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±–æ–Ω—É—Å (–∞–ª—å—Ç–µ—Ä–Ω.)"), # –û—Å—Ç–∞–≤–∏–º –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
        BotCommand("help", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
    ]
    try: await application.bot.set_my_commands(commands)
    except Exception as e: logger.error(f"Failed to set bot commands: {e}")

async def main():
    if "YOUR_TELEGRAM_TOKEN" in TOKEN or not TOKEN: # Simplified check
        logger.critical("CRITICAL: TELEGRAM_TOKEN is not set correctly.")
        return

    persistence = PicklePersistence(filepath="bot_data.pkl")
    application = Application.builder().token(TOKEN).persistence(persistence).build()
    await set_bot_commands(application)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("mode", select_mode_command))
    application.add_handler(CommandHandler("model", select_model_command))
    application.add_handler(CommandHandler("usage", usage_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("subscribe", subscribe_info_command))
    application.add_handler(CommandHandler("get_news_bonus", get_news_bonus_info_command)) # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    application.add_handler(CommandHandler("claim_news_bonus", claim_news_bonus_command)) # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞

    application.add_handler(MessageHandler(filters.Text(["ü§ñ –†–µ–∂–∏–º –ò–ò"]), select_mode_command))
    application.add_handler(MessageHandler(filters.Text(["‚öôÔ∏è –ú–æ–¥–µ–ª—å –ò–ò"]), select_model_command))
    application.add_handler(MessageHandler(filters.Text(["üìä –õ–∏–º–∏—Ç—ã"]), usage_command))
    application.add_handler(MessageHandler(filters.Text(["üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏"]), subscribe_info_command))
    application.add_handler(MessageHandler(filters.Text(["‚ùì –ü–æ–º–æ—â—å"]), help_command))
    
    # –û–±—â–∏–π CallbackQueryHandler –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∏ –±–æ–Ω—É—Å–∞
    application.add_handler(CallbackQueryHandler(button_callback))
    # –û—Ç–¥–µ–ª—å–Ω—ã–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏, –µ—Å–ª–∏ buy_button_handler –Ω–µ –≤ –æ–±—â–µ–º button_callback
    # application.add_handler(CallbackQueryHandler(buy_button_handler, pattern="^buy_profi_2days$")) # –£–∂–µ –µ—Å—Ç—å –≤ –æ–±—â–µ–º

    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("Starting bot application...")
    try: await application.run_polling()
    except Exception as e: logger.critical(f"Polling error: {e}\n{traceback.format_exc()}")

if __name__ == "__main__":
    try: asyncio.run(main())
    except KeyboardInterrupt: logger.info("Bot stopped by user.")
    except Exception as e: logger.critical(f"main() error: {e}\n{traceback.format_exc()}")
