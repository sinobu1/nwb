import telegram
from telegram import (
    InlineKeyboardButton, InlineKeyboardMarkup, Update,
    ReplyKeyboardMarkup, KeyboardButton, BotCommand
)
from telegram.constants import ParseMode, ChatAction
from telegram.helpers import escape_markdown
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, CallbackQueryHandler, PicklePersistence
)
import google.generativeai as genai
import google.api_core.exceptions
import requests
import logging
import traceback
import os
import asyncio
import nest_asyncio
import json
from datetime import datetime, timedelta
from telegram import LabeledPrice
from telegram.ext import PreCheckoutQueryHandler # MessageHandler –¥–ª—è SUCCESSFUL_PAYMENT —É–∂–µ –µ—Å—Ç—å –≤ filters


nest_asyncio.apply()
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)
logger = logging.getLogger(__name__)

# --- –ö–õ–Æ–ß–ò API –ò –¢–û–ö–ï–ù–´ ---
TOKEN = os.getenv("TELEGRAM_TOKEN", "8185454402:AAEgJLaBSaUSyP9Z_zv76Fn0PtEwltAqga0") # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –∑–¥–µ—Å—å –∏–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
GOOGLE_GEMINI_API_KEY = os.getenv("GOOGLE_GEMINI_API_KEY", "AIzaSyCdDMpgLJyz6aYdwT9q4sbBk7sHVID4BTI") # –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –ö–õ–Æ–ß
CUSTOM_GEMINI_PRO_API_KEY = os.getenv("CUSTOM_GEMINI_PRO_API_KEY", "sk-MHulnEHU3bRxsnDjr0nq68lTcRYa5IpQATY1pUG4NaxpWSMJzvzsJ4KCVu0P") # –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –ö–õ–Æ–ß
CUSTOM_GEMINI_PRO_ENDPOINT = os.getenv("CUSTOM_GEMINI_PRO_ENDPOINT", "https://api.gen-api.ru/api/v1/networks/gemini-2-5-pro")

# –í–ê–ñ–ù–û: –ü–æ–ª—É—á–∏ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –æ—Ç @BotFather –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN", "YOUR_REAL_PAYMENT_PROVIDER_TOKEN_HERE")

YOUR_ADMIN_ID = 489230152 # –≠—Ç–æ—Ç ID –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è /grantsub, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö –Ω—É–∂–¥ –≤ –±—É–¥—É—â–µ–º

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
MAX_OUTPUT_TOKENS_GEMINI_LIB = 2048
MAX_MESSAGE_LENGTH_TELEGRAM = 4000

# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –õ–ò–ú–ò–¢–´ ---
DEFAULT_FREE_REQUESTS_GOOGLE_FLASH_DAILY = 72                    # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è "2.0" (Gemini 2.0 Flash) - –ò–ó–ú–ï–ù–ï–ù–û
DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY = 48        # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è "2.5 —Ñ–ª—ç—à" (Gemini 2.5 Flash Preview) - –ò–ó–ú–ï–ù–ï–ù–û
DEFAULT_SUBSCRIPTION_REQUESTS_GOOGLE_FLASH_PREVIEW_DAILY = 75    # –° –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–ª—è "2.5 —Ñ–ª—ç—à"

DEFAULT_FREE_REQUESTS_CUSTOM_PRO_DAILY = 0                       # –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è "2.5 –ø—Ä–æ" (Custom API Gemini 2.5 Pro) - –ò–ó–ú–ï–ù–ï–ù–û (–±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª)
DEFAULT_SUBSCRIPTION_REQUESTS_CUSTOM_PRO_DAILY = 25              # –° –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–ª—è "2.5 –ø—Ä–æ"

PRO_SUBSCRIPTION_LEVEL_KEY = "profi_access_v1" # –ö–ª—é—á –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏ "–ü—Ä–æ—Ñ–∏"

# --- –ö–ê–ù–ê–õ –ù–û–í–û–°–¢–ï–ô –ò –ë–û–ù–£–° ---
# –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∏–∂–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –∏ —Å—Å—ã–ª–∫—É –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞!
NEWS_CHANNEL_USERNAME = "@timextech"  # –ù–∞–ø—Ä–∏–º–µ—Ä, "@my_cool_news_channel" (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)
NEWS_CHANNEL_LINK = "https://t.me/timextech" # –ù–∞–ø—Ä–∏–º–µ—Ä, "https://t.me/my_cool_news_channel"
NEWS_CHANNEL_BONUS_MODEL_KEY = "custom_api_gemini_2_5_pro" # –ú–æ–¥–µ–ª—å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –¥–∞–µ—Ç—Å—è –±–æ–Ω—É—Å
NEWS_CHANNEL_BONUS_GENERATIONS = 1 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π

# --- –†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´ –ò–ò ---
AI_MODES = {
    "universal_ai_basic": {
        "name": "ü§ñ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò (–ë–∞–∑–æ–≤—ã–π)",
        "prompt": (
            "–¢—ã ‚Äî –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Gemini –æ—Ç Google. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏: –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, "
            "–¥–∞–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —à–∏—Ä–æ–∫–æ–º—É –∫—Ä—É–≥—É —Ç–µ–º. "
            "–ë—É–¥—å –≤–µ–∂–ª–∏–≤, –æ–±—ä–µ–∫—Ç–∏–≤–µ–Ω, —Ç–æ—á–µ–Ω –∏ –ø–æ–ª–µ–∑–µ–Ω. "
            "–ï—Å–ª–∏ —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π –æ–± —ç—Ç–æ–º.\n\n"
            "**–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç):**\n"
            "1.  **–ê–±–∑–∞—Ü—ã:** –ß–µ—Ç–∫–æ —Ä–∞–∑–¥–µ–ª—è–π —Å–º—ã—Å–ª–æ–≤—ã–µ –±–ª–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∞–±–∑–∞—Ü–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω—É –∏–ª–∏ –¥–≤–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.\n"
            "2.  **–°–ø–∏—Å–∫–∏:** –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1. –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç`, `2. –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç`) –∏–ª–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `- –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞` –∏–ª–∏ `* –î—Ä—É–≥–æ–π —ç–ª–µ–º–µ–Ω—Ç`). –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ø–∏—Å–∫–æ–≤.\n"
            "3.  **–°–µ–∫—Ü–∏–∏/–ó–∞–≥–æ–ª–æ–≤–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ):** –î–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫—Ä—É–ø–Ω—ã—Ö —Å–º—ã—Å–ª–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ—è—Å–Ω—è—é—â—É—é —Ñ—Ä–∞–∑—É –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã–¥–µ–ª–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –ó–ê–ì–õ–ê–í–ù–´–ú–ò –ë–£–ö–í–ê–ú–ò. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "    –û–°–ù–û–í–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:\n"
            "    - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –æ–¥–∏–Ω...\n"
            "    - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–≤–∞...\n"
            "4.  **–ë–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π Markdown-—Ä–∞–∑–º–µ—Ç–∫—É (–∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫—É—Ä—Å–∏–≤–∞, –æ–±—Ä–∞—Ç–Ω—ã–µ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –¥–ª—è –∫–æ–¥–∞, —Å–∏–º–≤–æ–ª—ã —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ç.–¥.). –ì–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —è—Å–Ω—ã–π, —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç.\n"
            "5.  **–õ–æ–≥–∏—á–µ—Å–∫–∞—è –ó–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å:** –°—Ç–∞—Ä–∞–π—Å—è, —á—Ç–æ–±—ã —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ –ø–æ–ª–Ω—ã–º–∏. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–∫–∏, —É–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É–Ω–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –õ—É—á—à–µ –Ω–µ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç, –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —É—Å–ø–µ–µ—à—å –µ–≥–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤ —Ä–∞–º–∫–∞—Ö —Ä–∞–∑—É–º–Ω–æ–π –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞.\n"
            "6.  **–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å:** –ì–ª–∞–≤–Ω–æ–µ ‚Äî —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç –±—ã–ª –ø–æ–Ω—è—Ç–Ω—ã–º, —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ª–µ–≥–∫–∏–º –¥–ª—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.\n"
            "7. **–ë–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤:** –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤ —Ç–µ–∫—Å—Ç–µ –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ —Å–∫–æ–±–∫–∏, –¥–µ—Ñ–∏—Å—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–µ—Å—É—Ç —Å–º—ã—Å–ª–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏."
        ),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò (–ë–∞–∑–æ–≤—ã–π)'. –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?"
    },
     "gemini_pro_custom_mode": {
        "name": "ü§ñ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç (–¥–ª—è Gemini 2.5 Pro)",
        "prompt": (
            "–¢—ã ‚Äî Gemini 2.5 Pro, –º–æ—â–Ω—ã–π –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—ã–µ, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
            "–°–æ–±–ª—é–¥–∞–π –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. "
            "–§–æ—Ä–º—É–ª–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —è—Å–Ω–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∞–±–∑–∞—Ü—ã –∏ —Å–ø–∏—Å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. "
            "–ò–∑–±–µ–≥–∞–π –∏–∑–ª–∏—à–Ω–µ–≥–æ Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —É–ª—É—á—à–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞). "
            "–ï—Å–ª–∏ —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —É–∫–∞–∑—ã–≤–∞–π —ç—Ç–æ."
        ),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'. –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?"
    },
    "creative_helper": {
        "name": "‚úçÔ∏è –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ü–æ–º–æ—â–Ω–∏–∫",
        "prompt": (
            "–¢—ã ‚Äî Gemini, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ò–ò-–ø–∞—Ä—Ç–Ω—ë—Ä –∏ –ø–∏—Å–∞—Ç–µ–ª—å. "
            "–¢–≤–æ—è –º–∏—Å—Å–∏—è ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å, –ø–æ–º–æ–≥–∞—Ç—å –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–µ–∫—Å—Ç—ã, –∏–¥–µ–∏, —Å—Ü–µ–Ω–∞—Ä–∏–∏, —Å—Ç–∏—Ö–∏ –∏ —Ç.–¥.) –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–º—ã—Å–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
            "–ë—É–¥—å —Å–º–µ–ª—ã–º –≤ –∏–¥–µ—è—Ö, –ø—Ä–µ–¥–ª–∞–≥–∞–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –Ω–æ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞–π—Å—è –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–∏–∫–∏ –∏ –∑–¥—Ä–∞–≤–æ–≥–æ —Å–º—ã—Å–ª–∞. "
            "**–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ –∫ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–º—É —Ç–µ–∫—Å—Ç—É):**\n"
            "1.  **–ê–±–∑–∞—Ü—ã:** –î–ª—è –ø—Ä–æ–∑—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–π ‚Äî —á–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∞–±–∑–∞—Ü—ã.\n"
            "2.  **–°—Ç–∏—Ö–∏:** –°–æ–±–ª—é–¥–∞–π —Å—Ç—Ä–æ—Ñ—ã –∏ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –∑–∞–¥–∞–Ω–∏–µ–º.\n"
            "3.  **–î–∏–∞–ª–æ–≥–∏:** –û—Ñ–æ—Ä–º–ª—è–π –¥–∏–∞–ª–æ–≥–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –æ–±—Ä–∞–∑–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, `- –ü—Ä–∏–≤–µ—Ç! - —Å–∫–∞–∑–∞–ª –æ–Ω.` –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞).\n"
            "4.  **–ë–µ–∑ Markdown:** –ì–µ–Ω–µ—Ä–∏—Ä—É–π —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ Markdown-—Ä–∞–∑–º–µ—Ç–∫–∏ (–∑–≤–µ–∑–¥–æ—á–µ–∫, —Ä–µ—à–µ—Ç–æ–∫ –∏ —Ç.–ø.), –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —ç—Ç–æ –Ω–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–º–æ–≥–æ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã, –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏).\n"
            "5.  **–Ø–∑—ã–∫:** –ò—Å–ø–æ–ª—å–∑—É–π –±–æ–≥–∞—Ç—ã–π –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ.\n"
            "6.  **–ó–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å:** –°—Ç–∞—Ä–∞–π—Å—è –¥–æ–≤–æ–¥–∏—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ü–∞ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –∑–∞–¥–∞—á–µ–π."
        ),
        "welcome": "–†–µ–∂–∏–º '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ü–æ–º–æ—â–Ω–∏–∫' –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º! –ù–∞–¥ –∫–∞–∫–æ–π —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ–π –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º?"
    },
}
DEFAULT_AI_MODE_KEY = "universal_ai_basic"

# --- –ú–û–î–ï–õ–ò –ò–ò ---
AVAILABLE_TEXT_MODELS = {
    "google_gemini_2_0_flash": { # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑—ã–≤–∞–µ—Ç "2.0"
        "name": "‚ö°Ô∏è Gemini 2.0 Flash (100/–¥–µ–Ω—å)",
        "id": "gemini-2.0-flash", # –ü–†–û–í–ï–†–¨ –ê–ö–¢–£–ê–õ–¨–ù–û–°–¢–¨ –≠–¢–û–ì–û ID –î–õ–Ø GOOGLE GENAI! –ú–æ–∂–µ—Ç –±—ã—Ç—å "gemini-1.5-flash-latest"
        "api_type": "google_genai",
        "is_limited": True,
        "limit_type": "daily_free",
        "limit": DEFAULT_FREE_REQUESTS_GOOGLE_FLASH_DAILY, # 100
        "cost_category": "google_flash_free"
    },
    "google_gemini_2_5_flash_preview": { # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑—ã–≤–∞–µ—Ç "2.5 —Ñ–ª—ç—à"
        "name": "üí® Gemini 2.5 Flash Preview",
        "id": "gemini-2.5-flash-preview-04-17", # –ü–†–û–í–ï–†–¨ –ê–ö–¢–£–ê–õ–¨–ù–û–°–¢–¨ –≠–¢–û–ì–û ID –î–õ–Ø GOOGLE GENAI! –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ–≤–µ–µ, –Ω–∞–ø—Ä. 'gemini-1.5-flash-preview-0514'
        "api_type": "google_genai",
        "is_limited": True,
        "limit_type": "subscription_or_daily_free",
        "limit_if_no_subscription": DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY, # 50
        "subscription_daily_limit": DEFAULT_SUBSCRIPTION_REQUESTS_GOOGLE_FLASH_PREVIEW_DAILY, # 75
        "cost_category": "google_flash_preview_flex"
    },
    "custom_api_gemini_2_5_pro": { # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑—ã–≤–∞–µ—Ç "2.5 –ø—Ä–æ"
        "name": "üåü Gemini 2.5 Pro (–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)",
        "id": "gemini-2.5-pro-preview-03-25", # ID –¥–ª—è Custom API (gen-api.ru), –ø—Ä–æ–≤–µ—Ä—å –µ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        "api_type": "custom_http_api",
        "endpoint": CUSTOM_GEMINI_PRO_ENDPOINT,
        "api_key_var_name": "CUSTOM_GEMINI_PRO_API_KEY",
        "is_limited": True,
        "limit_type": "subscription_custom_pro", 
        "limit_if_no_subscription": DEFAULT_FREE_REQUESTS_CUSTOM_PRO_DAILY, # 2
        "subscription_daily_limit": DEFAULT_SUBSCRIPTION_REQUESTS_CUSTOM_PRO_DAILY, # 25
        "cost_category": "custom_api_pro_paid",
        "pricing_info": {} 
    }
}
DEFAULT_MODEL_KEY = "google_gemini_2_0_flash" 
DEFAULT_MODEL_ID = AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]["id"]


# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API Google Gemini ---
if not GOOGLE_GEMINI_API_KEY or "YOUR_GOOGLE_GEMINI_API_KEY" in GOOGLE_GEMINI_API_KEY or "AIzaSy" not in GOOGLE_GEMINI_API_KEY:
    logger.warning("Google Gemini API key (GOOGLE_GEMINI_API_KEY) is not set correctly or uses a placeholder. Google AI models may not work.")
else:
    try:
        genai.configure(api_key=GOOGLE_GEMINI_API_KEY)
        logger.info("Google Gemini API configured successfully.")
    except Exception as e:
        logger.error(f"Failed to configure Google Gemini API: {str(e)}")

if not CUSTOM_GEMINI_PRO_API_KEY or "YOUR_CUSTOM_KEY" in CUSTOM_GEMINI_PRO_API_KEY or "sk-" not in CUSTOM_GEMINI_PRO_API_KEY:
    logger.warning("Custom Gemini Pro API key (CUSTOM_GEMINI_PRO_API_KEY) is not set correctly or uses a placeholder. Custom API model may not work.")


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_current_mode_details(context: ContextTypes.DEFAULT_TYPE) -> dict:
    current_model_key = get_current_model_key(context)
    if current_model_key == "custom_api_gemini_2_5_pro":
        if "gemini_pro_custom_mode" in AI_MODES:
            return AI_MODES["gemini_pro_custom_mode"]
        else:
            logger.warning("Dedicated mode 'gemini_pro_custom_mode' not found. Falling back to default AI mode.")
            return AI_MODES.get(DEFAULT_AI_MODE_KEY, AI_MODES["universal_ai_basic"])

    mode_key = context.user_data.get('current_ai_mode', DEFAULT_AI_MODE_KEY)
    return AI_MODES.get(mode_key, AI_MODES[DEFAULT_AI_MODE_KEY])

def get_current_model_key(context: ContextTypes.DEFAULT_TYPE) -> str:
    selected_id = context.user_data.get('selected_model_id', DEFAULT_MODEL_ID)
    selected_api_type = context.user_data.get('selected_api_type')

    if not selected_api_type:
        for key_fallback, info_fallback in AVAILABLE_TEXT_MODELS.items():
            if info_fallback["id"] == selected_id:
                selected_api_type = info_fallback.get("api_type")
                context.user_data['selected_api_type'] = selected_api_type
                logger.debug(f"Inferred and saved api_type '{selected_api_type}' for model_id '{selected_id}'")
                break
    
    if not selected_api_type:
         logger.warning(f"API type for selected_model_id '{selected_id}' is not stored and couldn't be inferred. Falling back to default model key: {DEFAULT_MODEL_KEY}.")
         default_model_config = AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]
         context.user_data['selected_model_id'] = default_model_config["id"]
         context.user_data['selected_api_type'] = default_model_config["api_type"]
         return DEFAULT_MODEL_KEY

    for key, info in AVAILABLE_TEXT_MODELS.items():
        if info["id"] == selected_id and info.get("api_type") == selected_api_type:
            return key
            
    logger.warning(f"Could not find key for model_id '{selected_id}' and api_type '{selected_api_type}'. Falling back to default: {DEFAULT_MODEL_KEY}.")
    default_model_config = AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]
    context.user_data['selected_model_id'] = default_model_config["id"]
    context.user_data['selected_api_type'] = default_model_config["api_type"]
    return DEFAULT_MODEL_KEY


def get_selected_model_details(context: ContextTypes.DEFAULT_TYPE) -> dict:
    model_key = get_current_model_key(context)
    if model_key not in AVAILABLE_TEXT_MODELS:
        logger.error(f"Model key '{model_key}' not found in AVAILABLE_TEXT_MODELS. Falling back to default.")
        return AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]
    return AVAILABLE_TEXT_MODELS[model_key]

def get_current_model_display_name(context: ContextTypes.DEFAULT_TYPE) -> str:
    return get_selected_model_details(context)["name"]

def smart_truncate(text: str, max_length: int) -> tuple[str, bool]:
    if not isinstance(text, str):
        logger.warning(f"smart_truncate received non-string input: {type(text)}. Returning as is.")
        return str(text), False
    if len(text) <= max_length:
        return text, False
    suffix = "\n\n(...–æ—Ç–≤–µ—Ç –±—ã–ª —Å–æ–∫—Ä–∞—â–µ–Ω)"
    adjusted_max_length = max_length - len(suffix)
    if adjusted_max_length <= 0:
        return text[:max_length-len("...")] + "...", True
    truncated_text = text[:adjusted_max_length]
    possible_cut_points = []
    for sep in ['\n\n', '. ', '! ', '? ', '\n']:
        pos = truncated_text.rfind(sep)
        if pos != -1:
            actual_pos = pos + (len(sep) -1 if sep.endswith(' ') and len(sep) > 1 else len(sep))
            if actual_pos > 0:
                possible_cut_points.append(actual_pos)
    if possible_cut_points:
        cut_at = max(possible_cut_points)
        if cut_at > adjusted_max_length * 0.5:
             return text[:cut_at].strip() + suffix, True
    last_space = truncated_text.rfind(' ')
    if last_space != -1 and last_space > adjusted_max_length * 0.5:
        return text[:last_space].strip() + suffix, True
    return text[:adjusted_max_length].strip() + suffix, True

def get_main_reply_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton("ü§ñ –†–µ–∂–∏–º –ò–ò"), KeyboardButton("‚öôÔ∏è –ú–æ–¥–µ–ª—å –ò–ò")],
        [KeyboardButton("üìä –õ–∏–º–∏—Ç—ã"), KeyboardButton("üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏")],
        [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ ---
def get_user_actual_limit_for_model(user_id: int, model_key: str, context: ContextTypes.DEFAULT_TYPE) -> int:
    model_config = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_config: return 0

    all_user_subscriptions = context.bot_data.setdefault('user_subscriptions', {})
    user_subscription_details = all_user_subscriptions.get(user_id, {'level': None, 'valid_until': None})
    
    current_sub_level = None
    if user_subscription_details.get('valid_until'):
        try:
            valid_until_dt = datetime.fromisoformat(user_subscription_details['valid_until'])
            now_dt = datetime.now(valid_until_dt.tzinfo) 

            if now_dt.date() <= valid_until_dt.date():
                current_sub_level = user_subscription_details.get('level')
            else:
                logger.info(f"Subscription for user {user_id} (level {user_subscription_details.get('level')}) expired on {user_subscription_details['valid_until']}.")
        except ValueError:
            logger.error(f"Invalid date format for subscription for user {user_id}: {user_subscription_details['valid_until']}")
        except Exception as e_date:
             logger.error(f"Error processing subscription date for user {user_id}: {e_date}")


    limit_type = model_config.get("limit_type")
    actual_limit = 0

    if limit_type == "daily_free":
        actual_limit = model_config.get("limit", 0)
    elif limit_type == "subscription_or_daily_free":
        if current_sub_level == PRO_SUBSCRIPTION_LEVEL_KEY: 
            actual_limit = model_config.get("subscription_daily_limit", 0)
        else:
            actual_limit = model_config.get("limit_if_no_subscription", 0)
    elif limit_type == "subscription_custom_pro":
        if current_sub_level == PRO_SUBSCRIPTION_LEVEL_KEY: 
            actual_limit = model_config.get("subscription_daily_limit", 0)
        else:
            actual_limit = model_config.get("limit_if_no_subscription", 0)
    else: 
        actual_limit = model_config.get("limit", float('inf')) if not model_config.get("is_limited", False) else 0
        if model_config.get("is_limited") and actual_limit == float('inf'): 
            logger.warning(f"Model {model_key} is limited but actual_limit is infinity for user {user_id} (sub: {current_sub_level}). Setting to 0.")
            actual_limit = 0
    return actual_limit

def check_and_log_request_attempt(user_id: int, model_key: str, context: ContextTypes.DEFAULT_TYPE) -> tuple[bool, str, int]:
    today_str = datetime.now().strftime("%Y-%m-%d")
    model_config = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_config or not model_config.get("is_limited"):
        logger.debug(f"Model {model_key} not found or not limited. Allowing request.")
        return True, "", 0

    # --- News Channel Bonus Check ---
    is_profi_subscriber = False # –û–ø—Ä–µ–¥–µ–ª–∏–º –∑–∞—Ä–∞–Ω–µ–µ, –Ω—É–∂–µ–Ω –¥–ª—è –ª–æ–≥–∏–∫–∏ –±–æ–Ω—É—Å–∞ –∏ –ª–∏–º–∏—Ç–æ–≤
    if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY or model_config.get("limit_type") in ["subscription_or_daily_free", "subscription_custom_pro"]:
        all_user_subscriptions = context.bot_data.get('user_subscriptions', {})
        user_subscription_details = all_user_subscriptions.get(user_id, {})
        if user_subscription_details.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY:
            if user_subscription_details.get('valid_until'):
                try:
                    valid_until_dt = datetime.fromisoformat(user_subscription_details['valid_until'])
                    now_dt = datetime.now(valid_until_dt.tzinfo)
                    if now_dt.date() <= valid_until_dt.date():
                        is_profi_subscriber = True
                except ValueError:
                    logger.error(f"Invalid date format for subscription for user {user_id}: {user_subscription_details['valid_until']}")
                except Exception as e_date_check:
                    logger.error(f"Error checking subscription date for user {user_id}: {e_date_check}")


    if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY and not is_profi_subscriber:
        news_bonus_uses_left = context.user_data.get('news_bonus_uses_left', 0)
        if news_bonus_uses_left > 0:
            logger.info(f"User {user_id} has {news_bonus_uses_left} news channel bonus uses for {model_key}. Allowing request via bonus.")
            return True, "bonus_available", 0 # count_used is 0 for this check, as it's a bonus
    # --- End News Channel Bonus Check ---

    all_daily_counts = context.bot_data.setdefault('all_user_daily_counts', {})
    user_model_counts = all_daily_counts.setdefault(user_id, {})
    model_daily_usage = user_model_counts.setdefault(model_key, {'date': '', 'count': 0})

    if model_daily_usage['date'] != today_str:
        logger.info(f"New day for user {user_id}, model {model_key}. Resetting count from {model_daily_usage['count']} (date {model_daily_usage['date']}).")
        model_daily_usage['date'] = today_str
        model_daily_usage['count'] = 0

    current_user_model_count = model_daily_usage['count']
    actual_limit = get_user_actual_limit_for_model(user_id, model_key, context) # actual_limit —É–∂–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç Profi –ø–æ–¥–ø–∏—Å–∫—É
    logger.debug(f"User {user_id}, Model {model_key}: Daily Count={current_user_model_count}, Daily Limit={actual_limit}, IsProfi={is_profi_subscriber}")

    if current_user_model_count >= actual_limit:
        message = (f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ ({current_user_model_count}/{actual_limit}) "
                   f"–¥–ª—è –º–æ–¥–µ–ª–∏ '{model_config['name']}'.\n")

        if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY and not is_profi_subscriber:
            claimed_bonus_flag = context.user_data.get('claimed_news_bonus', False)
            current_bonus_uses = context.user_data.get('news_bonus_uses_left', 0)

            if not claimed_bonus_flag :
                message += (f"üí° –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª {NEWS_CHANNEL_LINK} –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "
                            f"`/claim_news_bonus`, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å {NEWS_CHANNEL_BONUS_GENERATIONS} –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏!\n")
            elif current_bonus_uses == 0 and claimed_bonus_flag:
                 message += "‚ÑπÔ∏è –í–∞—à –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.\n"

        message += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É /subscribe –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤."
        return False, message, current_user_model_count
    return True, "", current_user_model_count

def increment_request_count(user_id: int, model_key: str, context: ContextTypes.DEFAULT_TYPE):
    model_config = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_config or not model_config.get("is_limited"):
        return

    # --- News Channel Bonus Consumption ---
    if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY:
        all_user_subscriptions = context.bot_data.get('user_subscriptions', {})
        user_subscription_details = all_user_subscriptions.get(user_id, {})
        is_profi_subscriber = False
        if user_subscription_details.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY:
            if user_subscription_details.get('valid_until'):
                try:
                    valid_until_dt = datetime.fromisoformat(user_subscription_details['valid_until'])
                    now_dt = datetime.now(valid_until_dt.tzinfo) # Use timezone from valid_until_dt if available
                    if now_dt.date() <= valid_until_dt.date():
                        is_profi_subscriber = True
                except ValueError:
                    pass # Invalid date format
                except Exception:
                    pass # Other date processing errors


        if not is_profi_subscriber:
            news_bonus_uses_left = context.user_data.get('news_bonus_uses_left', 0)
            if news_bonus_uses_left > 0:
                context.user_data['news_bonus_uses_left'] = news_bonus_uses_left - 1
                logger.info(f"User {user_id} consumed a news channel bonus use for {model_key}. Remaining bonus uses: {context.user_data['news_bonus_uses_left']}")
                # This was a bonus use, do not increment the daily model count for regular limits
                return # IMPORTANT: Exit early, daily count not affected
    # --- End News Channel Bonus Consumption ---

    today_str = datetime.now().strftime("%Y-%m-%d")
    all_daily_counts = context.bot_data.setdefault('all_user_daily_counts', {})
    user_model_counts = all_daily_counts.setdefault(user_id, {})
    model_daily_usage = user_model_counts.setdefault(model_key, {'date': today_str, 'count': 0})

    if model_daily_usage['date'] != today_str:
        model_daily_usage['date'] = today_str
        model_daily_usage['count'] = 0

    model_daily_usage['count'] += 1
    logger.info(f"User {user_id} daily request count for {model_key} incremented to {model_daily_usage['count']}")


# --- –ö–æ–º–∞–Ω–¥—ã Telegram ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    context.user_data.setdefault('current_ai_mode', DEFAULT_AI_MODE_KEY)
    if 'selected_model_id' not in context.user_data or 'selected_api_type' not in context.user_data:
        default_model_conf = AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]
        context.user_data['selected_model_id'] = default_model_conf["id"]
        context.user_data['selected_api_type'] = default_model_conf["api_type"]

    context.bot_data.setdefault('user_subscriptions', {}) 
    context.bot_data.setdefault('all_user_daily_counts', {})
    
    current_model_key_for_start = get_current_model_key(context)
    current_mode_name_for_start = get_current_mode_details(context)['name']
    current_model_name_for_start = AVAILABLE_TEXT_MODELS[current_model_key_for_start]['name']
    
    greeting = escape_markdown("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–±–æ—Ç –Ω–∞ –±–∞–∑–µ Gemini.", version=2)
    mode_line = f"üß† {escape_markdown('–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ', version=2)}*{escape_markdown(current_mode_name_for_start, version=2)}*"
    model_line = f"‚öôÔ∏è {escape_markdown('–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: ', version=2)}*{escape_markdown(current_model_name_for_start, version=2)}*"
    
    _, limit_msg_check, current_count_for_start = check_and_log_request_attempt(user_id, current_model_key_for_start, context)
    actual_limit_for_model_start = get_user_actual_limit_for_model(user_id, current_model_key_for_start, context)
    limit_info_line = f"üìä {escape_markdown(f'–õ–∏–º–∏—Ç –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏: {current_count_for_start}/{actual_limit_for_model_start} –≤ –¥–µ–Ω—å.', version=2)}"
    if "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏" in limit_msg_check: 
        limit_info_line = f"üö´ {escape_markdown(limit_msg_check.splitlines()[0], version=2)}"

    you_can = escape_markdown("–í—ã –º–æ–∂–µ—Ç–µ:", version=2)
    action1 = f"üí¨ {escape_markdown('–ó–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.', version=2)}"
    action2 = f"ü§ñ {escape_markdown('–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –ò–ò (`/mode` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞)', version=2)}"
    action3 = f"‚öôÔ∏è {escape_markdown('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –ò–ò (`/model` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞)', version=2)}"
    action4 = f"üìä {escape_markdown('–£–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –ª–∏–º–∏—Ç—ã (`/usage` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞)', version=2)}"
    action5 = f"üíé {escape_markdown('–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ü–æ–¥–ø–∏—Å–∫–æ–π –ü—Ä–æ—Ñ–∏ (`/subscribe` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞)', version=2)}"
    action6 = f"‚ùì {escape_markdown('–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å (`/help`)', version=2)}"
    invitation = escape_markdown("–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å!", version=2)

# –≠–¢–û–¢ –ë–õ–û–ö –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í–ù–£–¢–†–ò –§–£–ù–ö–¶–ò–ò START, –° –ü–†–ê–í–ò–õ–¨–ù–´–ú –û–¢–°–¢–£–ü–û–ú
    news_channel_info_md = ""
    if NEWS_CHANNEL_LINK and NEWS_CHANNEL_LINK != "https://t.me/YourNewsChannelHandle":
        bonus_model_name_start = "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –º–æ–¥–µ–ª–∏"
        if NEWS_CHANNEL_BONUS_MODEL_KEY in AVAILABLE_TEXT_MODELS:
            bonus_model_name_start = f"–º–æ–¥–µ–ª–∏ '{escape_markdown(AVAILABLE_TEXT_MODELS[NEWS_CHANNEL_BONUS_MODEL_KEY]['name'], version=2)}'"
        news_channel_info_md = (
            f"üì¢ {escape_markdown(f'–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å {NEWS_CHANNEL_BONUS_GENERATIONS} –±–æ–Ω—É—Å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è {bonus_model_name_start}: ', version=2)}"
            f"{escape_markdown(NEWS_CHANNEL_LINK, version=2)}\n"
            f"{escape_markdown('–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É ', version=2)} `/claim_news_bonus`\n\n"
        )

    text_to_send = (
        f"{greeting}\n\n"
        f"{mode_line}\n"
        f"{model_line}\n"
        f"{limit_info_line}\n\n"
        f"{news_channel_info_md}"  # –í–æ—Ç —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞
        f"{you_can}\n"
        f"{action1}\n{action2}\n{action3}\n{action4}\n{action5}\n{action6}\n\n"
        f"{invitation}"
    )
    try:
        await update.message.reply_text(text_to_send, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=get_main_reply_keyboard())
    except telegram.error.BadRequest:
        # –ò –≠–¢–û–¢ –ë–õ–û–ö –¢–û–ñ–ï –° –ü–†–ê–í–ò–õ–¨–ù–´–ú –û–¢–°–¢–£–ü–û–ú
        plain_news_channel_info = ""
        if NEWS_CHANNEL_LINK and NEWS_CHANNEL_LINK != "https://t.me/YourNewsChannelHandle":
            bonus_model_name_plain = "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –º–æ–¥–µ–ª–∏"
            if NEWS_CHANNEL_BONUS_MODEL_KEY in AVAILABLE_TEXT_MODELS:
                bonus_model_name_plain = f"–º–æ–¥–µ–ª–∏ '{AVAILABLE_TEXT_MODELS[NEWS_CHANNEL_BONUS_MODEL_KEY]['name']}'"
            plain_news_channel_info = (
                f"–ù–æ–≤–æ—Å—Ç–∏ –∏ –±–æ–Ω—É—Å: –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {NEWS_CHANNEL_LINK} –∏ –≤–≤–µ–¥–∏—Ç–µ /claim_news_bonus "
                f"–¥–ª—è {NEWS_CHANNEL_BONUS_GENERATIONS} –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ({bonus_model_name_plain}).\n\n"
            )

        plain_text_version = (
            f"–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–±–æ—Ç.\n\n"
            f"–†–µ–∂–∏–º: {current_mode_name_for_start}\n–ú–æ–¥–µ–ª—å: {current_model_name_for_start}\n"
            f"–õ–∏–º–∏—Ç: {current_count_for_start}/{actual_limit_for_model_start} –≤ –¥–µ–Ω—å.\n\n"
            f"{plain_news_channel_info}"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚ñ´Ô∏è –ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.\n‚ñ´Ô∏è /mode - —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º\n‚ñ´Ô∏è /model - —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å\n"
            "‚ñ´Ô∏è /usage - –ª–∏–º–∏—Ç—ã\n‚ñ´Ô∏è /subscribe - –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏\n‚ñ´Ô∏è /help - –ø–æ–º–æ—â—å\n\n"
            "–í–∞—à –∑–∞–ø—Ä–æ—Å?"
        )
        await update.message.reply_text(plain_text_version, reply_markup=get_main_reply_keyboard()) # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
    logger.info(f"Start command processed for user {user_id}.")


async def select_mode_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    for key, details in AI_MODES.items():
        if key != "gemini_pro_custom_mode":
            keyboard.append([InlineKeyboardButton(details["name"], callback_data=f"set_mode_{key}")])
    
    if not keyboard:
         await update.message.reply_text('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.', reply_markup=get_main_reply_keyboard())
         return

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –¥–ª—è –ò–ò (–¥–ª—è –º–æ–¥–µ–ª–∏ Gemini 2.5 Pro —Ä–µ–∂–∏–º –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏):', reply_markup=reply_markup)


async def select_model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(details["name"], callback_data=f"set_model_{key}")] for key, details in AVAILABLE_TEXT_MODELS.items()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò:', reply_markup=reply_markup)


async def usage_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    all_user_subscriptions = context.bot_data.setdefault('user_subscriptions', {})
    user_subscription_details = all_user_subscriptions.get(user_id, {'level': None, 'valid_until': None})
    
    sub_level_key = user_subscription_details.get('level')
    sub_valid_str = user_subscription_details.get('valid_until')
    
    display_sub_level = "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø"
    subscription_active = False
    if sub_level_key == PRO_SUBSCRIPTION_LEVEL_KEY:
        if sub_valid_str:
            try:
                valid_until_dt = datetime.fromisoformat(sub_valid_str)
                now_dt = datetime.now(valid_until_dt.tzinfo)
                if now_dt.date() <= valid_until_dt.date():
                    display_sub_level = f"üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ (–¥–æ {valid_until_dt.strftime('%Y-%m-%d')})"
                    subscription_active = True
                else:
                    display_sub_level = "üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ (–∏—Å—Ç–µ–∫–ª–∞)"
            except ValueError: 
                display_sub_level = "üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ (–æ—à–∏–±–∫–∞ –¥–∞—Ç—ã)"
        else:
            display_sub_level = "üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ (–Ω–µ—Ç –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è)"


    usage_text = f"üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –ª–∏–º–∏—Ç–∞—Ö**\n\n"
    usage_text += f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: *{escape_markdown(display_sub_level, version=2)}*\n\n"

    usage_text += "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –º–æ–¥–µ–ª—è–º:\n"
    for model_k, model_c in AVAILABLE_TEXT_MODELS.items():
        if model_c.get("is_limited"):
            _, _, current_c = check_and_log_request_attempt(user_id, model_k, context)
            actual_l = get_user_actual_limit_for_model(user_id, model_k, context)
            usage_text += f"‚ñ´Ô∏è {escape_markdown(model_c['name'], version=2)}: *{current_c}/{actual_l}*\n"

    # –ë–õ–û–ö –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ë–û–ù–£–°–ï - –ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–°–¢–£–ü
    if NEWS_CHANNEL_LINK and NEWS_CHANNEL_LINK != "https://t.me/YourNewsChannelHandle":
        bonus_model_name_usage = "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –º–æ–¥–µ–ª–∏"
        if NEWS_CHANNEL_BONUS_MODEL_KEY in AVAILABLE_TEXT_MODELS:
            bonus_model_name_usage = f"–º–æ–¥–µ–ª–∏ '{escape_markdown(AVAILABLE_TEXT_MODELS[NEWS_CHANNEL_BONUS_MODEL_KEY]['name'], version=2)}'"

        claimed_bonus_usage = context.user_data.get('claimed_news_bonus', False)
        bonus_uses_left_usage = context.user_data.get('news_bonus_uses_left', 0)

        if not claimed_bonus_usage:
            usage_text += (
                f"\nüéÅ {escape_markdown(f'–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {NEWS_CHANNEL_LINK} –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /claim_news_bonus, ', version=2)}"
                f"{escape_markdown(f'—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å {NEWS_CHANNEL_BONUS_GENERATIONS} –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–ª—è {bonus_model_name_usage}!', version=2)}\n"
            )
        elif bonus_uses_left_usage > 0:
            usage_text += (
                f"\nüéÅ {escape_markdown(f'–£ –≤–∞—Å –µ—Å—Ç—å {bonus_uses_left_usage} –±–æ–Ω—É—Å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è {bonus_model_name_usage} ', version=2)}"
                f"{escape_markdown(f'(–∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {NEWS_CHANNEL_LINK})', version=2)}.\n"
            )
        else:  # claimed_bonus_usage is True and bonus_uses_left_usage == 0
            usage_text += (
                f"\n‚ÑπÔ∏è {escape_markdown(f'–ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {NEWS_CHANNEL_LINK} ({bonus_model_name_usage}) —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.', version=2)}\n"
            )
    # –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ë–û–ù–£–°–ï

    if not subscription_active: # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–¥–µ—Å—å
        usage_text += f"\n{escape_markdown('–•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–æ–≤? –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ü–æ–¥–ø–∏—Å–∫–æ–π –ü—Ä–æ—Ñ–∏:', version=2)} /subscribe"

    try:
        await update.message.reply_text(usage_text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=get_main_reply_keyboard())
    except telegram.error.BadRequest:
        plain_usage_text = f"–°—Ç–∞—Ç—É—Å: {display_sub_level}\n–õ–∏–º–∏—Ç—ã:\n"
        for model_k, model_c in AVAILABLE_TEXT_MODELS.items():
            if model_c.get("is_limited"):
                _, _, current_c = check_and_log_request_attempt(user_id, model_k, context)
                actual_l = get_user_actual_limit_for_model(user_id, model_k, context)
                plain_usage_text += f"- {model_c['name']}: {current_c}/{actual_l}\n"

        # –ë–õ–û–ö –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ë–û–ù–£–°–ï –î–õ–Ø PLAIN TEXT - –ü–†–ê–í–ò–õ–¨–ù–´–ô –û–¢–°–¢–£–ü
        if NEWS_CHANNEL_LINK and NEWS_CHANNEL_LINK != "https://t.me/YourNewsChannelHandle":
            bonus_model_name_plain_usage = "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –º–æ–¥–µ–ª–∏"
            if NEWS_CHANNEL_BONUS_MODEL_KEY in AVAILABLE_TEXT_MODELS:
                bonus_model_name_plain_usage = f"–º–æ–¥–µ–ª–∏ '{AVAILABLE_TEXT_MODELS[NEWS_CHANNEL_BONUS_MODEL_KEY]['name']}'"

            claimed_bonus_plain_usage = context.user_data.get('claimed_news_bonus', False)
            bonus_uses_left_plain_usage = context.user_data.get('news_bonus_uses_left', 0)
            if not claimed_bonus_plain_usage:
                plain_usage_text += f"\n–ë–æ–Ω—É—Å: –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ {NEWS_CHANNEL_LINK}, –∫–æ–º–∞–Ω–¥–∞ /claim_news_bonus –¥–ª—è {NEWS_CHANNEL_BONUS_GENERATIONS} –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ({bonus_model_name_plain_usage}).\n"
            elif bonus_uses_left_plain_usage > 0:
                plain_usage_text += f"\n–ë–æ–Ω—É—Å: –£ –≤–∞—Å {bonus_uses_left_plain_usage} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è {bonus_model_name_plain_usage} (–∫–∞–Ω–∞–ª {NEWS_CHANNEL_LINK}).\n"
            else:
                plain_usage_text += f"\n–ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {NEWS_CHANNEL_LINK} ({bonus_model_name_plain_usage}) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.\n"
        # –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –ë–û–ù–£–°–ï –î–õ–Ø PLAIN TEXT

        if not subscription_active: # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–∫–∂–µ –∑–¥–µ—Å—å
            plain_usage_text += "\n–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏: /subscribe"
        await update.message.reply_text(plain_usage_text, reply_markup=get_main_reply_keyboard()) # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø

async def subscribe_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = "üåü **–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ ‚Äì –ú–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Gemini!** üåü\n\n"

    text += "–ü–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —Å–∞–º—ã—Ö –º–æ—â–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:\n"
    text += f"üí® {escape_markdown(AVAILABLE_TEXT_MODELS['google_gemini_2_5_flash_preview']['name'], version=2)}: *{DEFAULT_SUBSCRIPTION_REQUESTS_GOOGLE_FLASH_PREVIEW_DAILY} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å*\n"
    text += f"   (–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å)\n"
    text += f"üåü {escape_markdown(AVAILABLE_TEXT_MODELS['custom_api_gemini_2_5_pro']['name'], version=2)}: *{DEFAULT_SUBSCRIPTION_REQUESTS_CUSTOM_PRO_DAILY} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å*\n"
    text += f"   (–ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {DEFAULT_FREE_REQUESTS_CUSTOM_PRO_DAILY} –ø—Ä–æ–±–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞/–¥–µ–Ω—å)\n\n"
    
    text += "–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å —â–µ–¥—Ä—ã–º –ª–∏–º–∏—Ç–æ–º:\n"
    text += f"‚ö°Ô∏è {escape_markdown(AVAILABLE_TEXT_MODELS['google_gemini_2_0_flash']['name'], version=2)}: *{DEFAULT_FREE_REQUESTS_GOOGLE_FLASH_DAILY} –∑–∞–ø—Ä–æ—Å–æ–≤/–¥–µ–Ω—å* (–±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è –≤—Å–µ—Ö)\n\n"

    text += "‚ú® **–î–æ—Å—Ç—É–ø–Ω—ã–π —Ç–∞—Ä–∏—Ñ –ü—Ä–æ—Ñ–∏ –¥–ª—è —Ç–µ—Å—Ç–∞:**\n"
    text += f"‚ñ´Ô∏è **–¢–µ—Å—Ç-–¥—Ä–∞–π–≤ (2 –¥–Ω—è):** `{escape_markdown('99 —Ä—É–±–ª–µ–π', version=2)}`\n"
    text += "\n"

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    keyboard = [
        [InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ü—Ä–æ—Ñ–∏ (2 –¥–Ω—è - 99 RUB)", callback_data="buy_profi_2days")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–∫–∞ —É–±–µ—Ä–µ–º –æ—Ç—Å—é–¥–∞,
    # —Ç–∞–∫ –∫–∞–∫ –∫–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç—å" —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–≤–æ–π—Å.
    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–æ–±—â–∏—Ç –æ–± —ç—Ç–æ–º.
    
    # text += "üöÄ **–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –ü–æ–¥–ø–∏—Å–∫—É –ü—Ä–æ—Ñ–∏?**\n"
    # text += "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\\!\n"
    # text += "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏\\.\n\n" 
    # text += f"{escape_markdown('–í–∞—à Telegram User ID (–º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è —Ä—É—á–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ –±—É–¥—É—â–µ–º):', version=2)} `{user_id}`"
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ö—É–ø–∏—Ç—å"
        if update.callback_query: # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ /start)
            await update.callback_query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=reply_markup)

    except telegram.error.BadRequest as e_br:
        logger.error(f"Error sending subscribe_info_command with Markdown: {e_br}. Text: {text}")
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∞, –µ—Å–ª–∏ Markdown –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        plain_text = (
            "üåü –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ ‚Äì –ú–∞–∫—Å–∏–º—É–º Gemini! üåü\n\n"
            "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
            f"- {AVAILABLE_TEXT_MODELS['google_gemini_2_5_flash_preview']['name']}: {DEFAULT_SUBSCRIPTION_REQUESTS_GOOGLE_FLASH_PREVIEW_DAILY} –≤ –¥–µ–Ω—å (–±–µ—Å–ø–ª. {DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY})\n"
            f"- {AVAILABLE_TEXT_MODELS['custom_api_gemini_2_5_pro']['name']}: {DEFAULT_SUBSCRIPTION_REQUESTS_CUSTOM_PRO_DAILY} –≤ –¥–µ–Ω—å (–±–µ—Å–ø–ª. {DEFAULT_FREE_REQUESTS_CUSTOM_PRO_DAILY})\n"
            f"- {AVAILABLE_TEXT_MODELS['google_gemini_2_0_flash']['name']}: {DEFAULT_FREE_REQUESTS_GOOGLE_FLASH_DAILY} –≤ –¥–µ–Ω—å (–±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è –≤—Å–µ—Ö)\n\n"
            "–¢–∞—Ä–∏—Ñ –¥–ª—è —Ç–µ—Å—Ç–∞:\n"
            "- 2 –¥–Ω—è: 99 —Ä—É–±.\n"
        )
        if update.callback_query:
            await update.callback_query.edit_message_text(plain_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(plain_text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
async def buy_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫
    user_id = query.from_user.id

    if query.data == "buy_profi_2days":
        if not PAYMENT_PROVIDER_TOKEN or "YOUR_REAL_PAYMENT_PROVIDER_TOKEN_HERE" in PAYMENT_PROVIDER_TOKEN:
            await query.message.reply_text(
                "‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–ª–∞—Ç—ã —Å–µ–π—á–∞—Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏.",
                reply_markup=get_main_reply_keyboard() # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
            logger.warning(f"Payment attempt by user {user_id} failed: PAYMENT_PROVIDER_TOKEN is not set.")
            return

        title = "–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ (2 –¥–Ω—è)"
        description = "–î–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–∏–º–∏—Ç–∞–º –º–æ–¥–µ–ª–µ–π Gemini –Ω–∞ 2 –¥–Ω—è."
        # payload –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≤–æ–π—Å–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏.
        # –ú–∞–∫—Å. 128 –±–∞–π—Ç. –í–∫–ª—é—á–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏, user_id (–¥–ª—è —Å–≤–µ—Ä–∫–∏) –∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏.
        payload = f"profi_2days_uid{user_id}_t{int(datetime.now().timestamp())}"
        currency = "RUB"
        price_amount = 99  # –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö
        prices = [LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ (2 –¥–Ω—è)", amount=price_amount * 100)]  # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö

        try:
            await context.bot.send_invoice(
                chat_id=user_id,
                title=title,
                description=description,
                payload=payload,
                provider_token=PAYMENT_PROVIDER_TOKEN,
                currency=currency,
                prices=prices,
                # start_parameter='profi-2days-test', # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è deeplink
                # photo_url='URL_TO_YOUR_PRODUCT_IMAGE', # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: URL –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –∏–Ω–≤–æ–π—Å–∞
                # need_shipping_address=False, # –û–±—ã—á–Ω–æ false –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            )
            logger.info(f"Invoice sent to user {user_id} for 'profi_2days'. Payload: {payload}")
            # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –æ–±—ã—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–¥–µ –±—ã–ª–∞ –∫–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç—å", –º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å.
            # –ù–∞–ø—Ä–∏–º–µ—Ä, —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å", —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π:
            await query.edit_message_reply_markup(reply_markup=None)

        except Exception as e:
            logger.error(f"Error sending invoice to user {user_id}: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ PreCheckoutQuery (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è Telegram Payments)
async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞)
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–µ–π—á–∞—Å –≤—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
    if query.invoice_payload.startswith("profi_2days_uid"): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à payload
        await query.answer(ok=True)
        logger.info(f"PreCheckoutQuery for payload {query.invoice_payload} answered OK.")
    else:
        # –û—Ç–∫–ª–æ–Ω—è–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ payload
        await query.answer(ok=False, error_message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —ç—Ç–∏–º –ø–ª–∞—Ç–µ–∂–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logger.warning(f"PreCheckoutQuery for UNKNOWN payload {query.invoice_payload} answered with error.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    payment_info = update.message.successful_payment
    invoice_payload = payment_info.invoice_payload
    
    logger.info(f"Successful payment from user {user_id}! Payload: {invoice_payload}, Amount: {payment_info.total_amount / 100} {payment_info.currency}")

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if invoice_payload.startswith("profi_2days_uid"):
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º datetime.now(timezone.utc) –¥–ª—è timezone-aware datetime, –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ–º —Å UTC
            # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ datetime.now() –µ—Å–ª–∏ –≤—Å–µ –≤ –æ–¥–Ω–æ–π —Ç–∞–π–º–∑–æ–Ω–µ
            valid_until_dt = datetime.now() + timedelta(days=2)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ. fromisoformat –ø–æ—Ç–æ–º —Å–º–æ–∂–µ—Ç —ç—Ç–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å.
            valid_until_iso = valid_until_dt.isoformat() 

            all_user_subscriptions = context.bot_data.setdefault('user_subscriptions', {})
            all_user_subscriptions[user_id] = {
                'level': PRO_SUBSCRIPTION_LEVEL_KEY,
                'valid_until': valid_until_iso, # 'YYYY-MM-DDTHH:MM:SS.ffffff'
                'purchase_date': datetime.now().isoformat(),
                'payload': invoice_payload,
                'amount': payment_info.total_amount,
                'currency': payment_info.currency
            }
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, PicklePersistence –¥–µ–ª–∞–µ—Ç —ç—Ç–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
            # await context.application.persistence.flush()

            logger.info(f"Subscription '{PRO_SUBSCRIPTION_LEVEL_KEY}' activated for user {user_id} until {valid_until_iso}")
            
            await update.message.reply_text(
                f"üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–∞ –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ –Ω–∞ 2 –¥–Ω—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {valid_until_dt.strftime('%Y-%m-%d %H:%M')}.\n"
                "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã!",
                reply_markup=get_main_reply_keyboard()
            )
        except Exception as e_sub_activation:
            logger.error(f"Error activating subscription for user {user_id} after payment. Payload: {invoice_payload}. Error: {e_sub_activation}")
            await update.message.reply_text(
                "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=get_main_reply_keyboard()
            )
    else:
        logger.warning(f"Received successful payment with UNKNOWN payload: {invoice_payload} from user {user_id}")
        await update.message.reply_text(
            "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=get_main_reply_keyboard()
        )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text_md = (
        f"üëã {escape_markdown('–Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–±–æ—Ç –Ω–∞ –±–∞–∑–µ –º–æ–¥–µ–ª–µ–π Gemini –æ—Ç Google.', version=2)}\n\n"
        f"{escape_markdown('–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏:', version=2)}\n"
        f"`/start` {escape_markdown('–∏–ª–∏ –∫–Ω–æ–ø–∫–∞ üöÄ `–ù–∞—á–∞–ª–æ` (–µ—Å–ª–∏ –µ—Å—Ç—å) - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.', version=2)}\n"
        f"`/mode` {escape_markdown('–∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ü§ñ `–†–µ–∂–∏–º –ò–ò` - —Å–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –ò–ò (—Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤).', version=2)}\n"
        f"`/model` {escape_markdown('–∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ‚öôÔ∏è `–ú–æ–¥–µ–ª—å –ò–ò` - –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ Gemini –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.', version=2)}\n"
        f"`/usage` {escape_markdown('–∏–ª–∏ –∫–Ω–æ–ø–∫–∞ üìä `–õ–∏–º–∏—Ç—ã` - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö —Ç–µ–∫—É—â–∏—Ö –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã.', version=2)}\n"
        f"`/subscribe` {escape_markdown('–∏–ª–∏ –∫–Ω–æ–ø–∫–∞ üíé `–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤.', version=2)}\n"
        f"`/claim_news_bonus` {escape_markdown(f'üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª ({NEWS_CHANNEL_LINK})', version=2)}\n" # –î–û–ë–ê–í–õ–ï–ù–ê –≠–¢–ê –°–¢–†–û–ö–ê
        f"`/help` {escape_markdown('–∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ‚ùì `–ü–æ–º–æ—â—å` - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.', version=2)}\n\n"
        f"üí° {escape_markdown('–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –±–æ—Ç—É, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!', version=2)}"
    )
    try:
        await update.message.reply_text(help_text_md, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=get_main_reply_keyboard())
    except telegram.error.BadRequest:
        await update.message.reply_text(
        "–Ø –ò–ò-–±–æ—Ç Gemini. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /mode, /model, /usage, /subscribe, /claim_news_bonus, /help.\n" # –î–û–ë–ê–í–õ–ï–ù–û /claim_news_bonus
        f"–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –±–æ–Ω—É—Å–∞: {NEWS_CHANNEL_LINK}\n" # –î–û–ë–ê–í–õ–ï–ù–ê –≠–¢–ê –°–¢–†–û–ö–ê
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.",
        reply_markup=get_main_reply_keyboard()
    )

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() 
    data = query.data
    user_id = query.from_user.id
    message_to_edit = query.message 
    new_text = ""
    plain_text_fallback = ""

    if data.startswith("set_mode_"):
        mode_key = data.split("set_mode_")[1]
        if mode_key in AI_MODES and mode_key != "gemini_pro_custom_mode": 
            context.user_data['current_ai_mode'] = mode_key
            mode_details = AI_MODES[mode_key]
            new_text = f"ü§ñ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: *{escape_markdown(mode_details['name'],version=2)}*\n\n{escape_markdown(mode_details['welcome'],version=2)}"
            plain_text_fallback = f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode_details['name']}.\n{mode_details['welcome']}"
            logger.info(f"User {user_id} changed AI mode to {mode_key}")
        elif mode_key == "gemini_pro_custom_mode":
             new_text = escape_markdown("–≠—Ç–æ—Ç —Ä–µ–∂–∏–º –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –º–æ–¥–µ–ª–∏ Gemini 2.5 Pro –∏ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.", version=2)
             plain_text_fallback = "–≠—Ç–æ—Ç —Ä–µ–∂–∏–º –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å –º–æ–¥–µ–ª—å—é Gemini 2.5 Pro."
        else:
            new_text = escape_markdown("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¢–∞–∫–æ–π —Ä–µ–∂–∏–º –Ω–µ –Ω–∞–π–¥–µ–Ω.", version=2)
            plain_text_fallback = "–û—à–∏–±–∫–∞: –¢–∞–∫–æ–π —Ä–µ–∂–∏–º –Ω–µ –Ω–∞–π–¥–µ–Ω."
    
    elif data.startswith("set_model_"):
        model_key_from_callback = data.split("set_model_")[1]
        if model_key_from_callback in AVAILABLE_TEXT_MODELS:
            selected_model_config = AVAILABLE_TEXT_MODELS[model_key_from_callback]
            context.user_data['selected_model_id'] = selected_model_config["id"]
            context.user_data['selected_api_type'] = selected_model_config["api_type"]

            model_name_md = escape_markdown(selected_model_config['name'], version=2)
            
            _, _, current_c = check_and_log_request_attempt(user_id, model_key_from_callback, context)
            actual_l = get_user_actual_limit_for_model(user_id, model_key_from_callback, context)
            
            limit_str = f'–í–∞—à –ª–∏–º–∏—Ç –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏: {current_c}/{actual_l} –≤ –¥–µ–Ω—å'
            limit_info_md = f"\n{escape_markdown(limit_str, version=2)}"
            
            new_text = f"‚öôÔ∏è –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: *{model_name_md}*\\.{limit_info_md}"
            plain_text_fallback = f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {selected_model_config['name']}. {limit_str}."
            logger.info(f"User {user_id} changed AI model to key: {model_key_from_callback} (ID: {selected_model_config['id']}, API: {selected_model_config['api_type']})")
        else:
            new_text = escape_markdown("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¢–∞–∫–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", version=2)
            plain_text_fallback = "–û—à–∏–±–∫–∞: –¢–∞–∫–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            
    if new_text:
        try:
            await message_to_edit.edit_text(text=new_text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=None) 
        except telegram.error.BadRequest as e_md:
            logger.warning(f"Failed to edit message with MarkdownV2 in button_callback: {e_md}. Sending plain text. Text was: {new_text}")
            try:
                await message_to_edit.edit_text(text=plain_text_fallback, reply_markup=None)
            except Exception as e_plain_edit:
                 logger.error(f"Failed to edit message with plain text either: {e_plain_edit}")
        except Exception as e_general_edit:
            logger.error(f"General error editing message in button_callback: {e_general_edit}")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user_id = update.effective_user.id if update.effective_user else "UnknownUser"
    logger.debug(f"handle_message: Received message from user {user_id}: '{user_message}'")

    if not user_message or not user_message.strip():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.", reply_markup=get_main_reply_keyboard())
        return

    current_model_key = get_current_model_key(context)
    selected_model_details = AVAILABLE_TEXT_MODELS[current_model_key]
    
    system_prompt_text = get_current_mode_details(context)["prompt"]
    logger.debug(f"Using system prompt for mode associated with {current_model_key}: '{get_current_mode_details(context)['name']}'")

    can_request, limit_message, _ = check_and_log_request_attempt(user_id, current_model_key, context)
    if not can_request:
        await update.message.reply_text(limit_message, reply_markup=get_main_reply_keyboard()) 
        logger.info(f"User {user_id} limit REJECTED for model_key {current_model_key}: {limit_message}")
        return
    logger.info(f"User {user_id} limit ACCEPTED for model_key {current_model_key}.")

    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    
    reply_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞." 
    api_type = selected_model_details.get("api_type")
    request_successful = False

    if api_type == "google_genai":
        if not GOOGLE_GEMINI_API_KEY or "YOUR_GOOGLE_GEMINI_API_KEY" in GOOGLE_GEMINI_API_KEY or "AIzaSy" not in GOOGLE_GEMINI_API_KEY:
            reply_text = "–ö–ª—é—á API –¥–ª—è –º–æ–¥–µ–ª–µ–π Google Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            logger.error("Google Gemini API key is not configured.")
        else:
            try:
                model_id_for_api = selected_model_details["id"]
                active_model = genai.GenerativeModel(model_id_for_api)
                logger.info(f"Using Google genai model: {model_id_for_api} for user {user_id}")
                
                generation_config_params = {"temperature": 0.75}
                if MAX_OUTPUT_TOKENS_GEMINI_LIB > 0 and "1.5" not in model_id_for_api and "2.0" not in model_id_for_api: 
                    generation_config_params["max_output_tokens"] = MAX_OUTPUT_TOKENS_GEMINI_LIB
                generation_config = genai.types.GenerationConfig(**generation_config_params)
                
                chat_history = [
                    {"role": "user", "parts": [system_prompt_text]}, 
                    {"role": "model", "parts": ["–ü–æ–Ω—è–ª. –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å."]} 
                ]

                chat = active_model.start_chat(history=chat_history) 
                logger.debug(f"Sending to Google API. Model: {model_id_for_api}. System prompt (len {len(system_prompt_text)}): '{system_prompt_text[:100]}...', User message: '{user_message[:100]}'")
                
                response_gen = await chat.send_message_async(user_message, generation_config=generation_config)
                
                api_reply_text_google = response_gen.text

                prompt_tokens, completion_tokens = 0, 0
                if hasattr(response_gen, 'usage_metadata') and response_gen.usage_metadata:
                    usage = response_gen.usage_metadata
                    prompt_tokens = usage.prompt_token_count
                    completion_tokens = usage.candidates_token_count
                    logger.info(f"Google API Usage for {model_id_for_api}: Prompt Tokens: {prompt_tokens}, Completion Tokens: {completion_tokens}")
                    context.user_data.setdefault('api_token_usage', [])
                    context.user_data['api_token_usage'].append({
                        'timestamp': datetime.now().isoformat(),
                        'model': model_id_for_api,
                        'prompt_tokens': prompt_tokens,
                        'completion_tokens': completion_tokens,
                        'total_tokens': getattr(usage, 'total_token_count', prompt_tokens + completion_tokens)
                    })

                if not api_reply_text_google or not api_reply_text_google.strip():
                    block_reason_msg = ""
                    if hasattr(response_gen, 'prompt_feedback') and response_gen.prompt_feedback and response_gen.prompt_feedback.block_reason:
                        block_reason_msg = f" –ü—Ä–∏—á–∏–Ω–∞: {response_gen.prompt_feedback.block_reason}."
                    if response_gen.candidates and not response_gen.text: 
                         candidate = response_gen.candidates[0]
                         if candidate.finish_reason != 1: 
                              block_reason_msg += f" Finish reason: {candidate.finish_reason.name}."
                         if candidate.safety_ratings:
                             block_reason_msg += f" Safety ratings: {[(sr.category.name, sr.probability.name) for sr in candidate.safety_ratings]}."

                    reply_text = f"–ò–ò (Google) –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ–Ω –±—ã–ª –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω.{block_reason_msg} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
                    logger.warning(f"Empty or blocked response from Google API. Model: {model_id_for_api}.{block_reason_msg}")
                else:
                    reply_text = api_reply_text_google
                    request_successful = True

            except google.api_core.exceptions.GoogleAPIError as e_google_api:
                error_message = str(e_google_api).lower()
                logger.error(f"GoogleAPIError for model {selected_model_details['id']}: {str(e_google_api)}\n{traceback.format_exc()}")
                reply_text = f"–û—à–∏–±–∫–∞ API Google Gemini: {type(e_google_api).__name__}."
                if "api key not valid" in error_message or "api key invalid" in error_message:
                    reply_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞: API –∫–ª—é—á –¥–ª—è Google –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                elif "billing account" in error_message or "enable billing" in error_message:
                    reply_text = "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∏–ª–ª–∏–Ω–≥–æ–º –¥–ª—è API Google. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                elif "resource has been exhausted" in error_message or "quota" in error_message: 
                    reply_text = "‚ö†Ô∏è –ò—Å—á–µ—Ä–ø–∞–Ω–∞ –∫–≤–æ—Ç–∞ –¥–ª—è Google API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                elif "user location" in error_message:
                     reply_text = "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ —á–µ—Ä–µ–∑ Google API."
                elif "content filter" in error_message or "safety" in error_message:
                    reply_text = "‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Google. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."
                elif "model not found" in error_message or "could not find model" in error_message:
                    reply_text = f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å '{selected_model_details['id']}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω ID –≤ Google API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å ID –º–æ–¥–µ–ª–∏."


            except Exception as e_general_google:
                logger.error(f"General error processing Google Gemini model {selected_model_details['id']}: {str(e_general_google)}\n{traceback.format_exc()}")
                reply_text = "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Google Gemini."

    elif api_type == "custom_http_api":
        api_key_var_name = selected_model_details.get("api_key_var_name")
        actual_api_key = globals().get(api_key_var_name) 

        if not actual_api_key or ("sk-" not in actual_api_key and "pk-" not in actual_api_key) : 
            reply_text = f"‚ö†Ô∏è –ö–ª—é—á API –¥–ª—è '{selected_model_details['name']}' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
            logger.warning(f"API key from var '{api_key_var_name}' is missing or invalid for Custom API. Key: {str(actual_api_key)[:10]}...")
        else:
            endpoint = selected_model_details["endpoint"]
            model_id_for_payload_api = selected_model_details["id"] 
            
            messages_payload = [
                {"role": "user", "content": system_prompt_text}, 
                {"role": "user", "content": user_message}
            ]

            payload = {
                "model": model_id_for_payload_api,
                "messages": messages_payload,
                "is_sync": True, 
                "temperature": selected_model_details.get("temperature", 0.75),
                "stream": False, 
            }
            
            headers = {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': f'Bearer {actual_api_key}'
            }
            logger.info(f"Sending request to Custom HTTP API. Endpoint: {endpoint}, Model in payload: {model_id_for_payload_api}")
            logger.debug(f"Custom API Payload: {json.dumps(payload, ensure_ascii=False, indent=2)}")

            try:
                api_response = requests.post(endpoint, json=payload, headers=headers, timeout=90) 
                logger.debug(f"Custom API response status: {api_response.status_code}")
                response_data = {}
                try:
                    response_data = api_response.json()
                    logger.debug(f"Custom API response body (JSON): {json.dumps(response_data, ensure_ascii=False, indent=2)}")
                except json.JSONDecodeError as e_json:
                    logger.error(f"Custom API response body (not JSON or decode error for status {api_response.status_code}): {api_response.text}. Error: {e_json}")
                    if api_response.status_code >= 400: 
                         reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç Custom API ({selected_model_details['name']}): {api_response.status_code} - {api_response.text[:200]}"
                    else: 
                         reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Custom API ({selected_model_details['name']})."
                
                api_response.raise_for_status() 

                if "response" in response_data and isinstance(response_data["response"], list) and len(response_data["response"]) > 0:
                    first_choice = response_data["response"][0]
                    if "message" in first_choice and "content" in first_choice["message"]:
                        api_reply_text_custom = first_choice["message"]["content"]
                        if api_reply_text_custom and api_reply_text_custom.strip():
                            reply_text = api_reply_text_custom
                            request_successful = True
                            if "cost" in response_data:
                                cost = response_data["cost"]
                                logger.info(f"Custom API request cost for {selected_model_details['name']}: {cost}")
                                context.user_data.setdefault('api_costs', [])
                                context.user_data['api_costs'].append({
                                    'timestamp': datetime.now().isoformat(),
                                    'model_key': current_model_key,
                                    'cost': cost 
                                })
                            req_id_resp = response_data.get("request_id")
                            model_resp = response_data.get("model") 
                            logger.info(f"Custom API success: request_id={req_id_resp}, model_in_response='{model_resp}'")
                        else:
                            reply_text = f"‚ö†Ô∏è –ò–ò ({selected_model_details['name']}) –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –≤ 'content'."
                            logger.warning(f"Custom API returned empty 'content' in message: {response_data}")
                    else: 
                        reply_text = f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ 'message' –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'content' –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç Custom API ({selected_model_details['name']})."
                        logger.warning(f"Custom API: 'message' or 'content' field missing in first choice: {first_choice}. Full response: {response_data}")
                elif "detail" in response_data: 
                    error_detail = response_data['detail']
                    if isinstance(error_detail, list) and error_detail and "msg" in error_detail[0]:
                        reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Custom API ({selected_model_details['name']}): {error_detail[0]['msg']}"
                    else:
                        reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Custom API ({selected_model_details['name']}): {str(error_detail)[:200]}"
                    logger.error(f"Custom API returned error detail: {error_detail}. Full response: {response_data}")
                elif not response_data and api_response.status_code == 200: 
                     reply_text = f"‚ö†Ô∏è Custom API ({selected_model_details['name']}) –≤–µ—Ä–Ω—É–ª —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –Ω–æ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."
                     logger.warning(f"Custom API returned 200 OK with empty JSON response.")
                else: 
                    reply_text = f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Custom API ({selected_model_details['name']}). –°—Ç–∞—Ç—É—Å: {api_response.status_code}."
                    logger.warning(f"Unexpected response structure from Custom API ({api_response.status_code}). Full response: {json.dumps(response_data, ensure_ascii=False)}")
            
            except requests.exceptions.HTTPError as e_http:
                error_content_str = "No details in response text."
                try: 
                    error_content_json = e_http.response.json()
                    if "detail" in error_content_json:
                         error_detail_http = error_content_json['detail']
                         if isinstance(error_detail_http, list) and error_detail_http and "msg" in error_detail_http[0]:
                             error_content_str = error_detail_http[0]['msg']
                         else:
                             error_content_str = str(error_detail_http)
                    else:
                         error_content_str = json.dumps(error_content_json)
                except json.JSONDecodeError: 
                    error_content_str = e_http.response.text[:200] 
                
                logger.error(f"HTTPError for Custom API '{selected_model_details['name']}': {e_http}. Status: {e_http.response.status_code}. Content: {error_content_str}")
                if e_http.response.status_code == 401: 
                    reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –¥–ª—è Custom API ({selected_model_details['name']}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á."
                elif e_http.response.status_code == 402:
                    reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 402: –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π –¥–ª—è Custom API ({selected_model_details['name']}). –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ API –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞."
                elif e_http.response.status_code == 422: 
                     reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 422: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Custom API. –î–µ—Ç–∞–ª–∏: {error_content_str}"
                elif e_http.response.status_code == 429: 
                     reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 429: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Custom API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                else:
                    reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ ({e_http.response.status_code}) –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ '{selected_model_details['name']}'. –î–µ—Ç–∞–ª–∏: {error_content_str}"

            except requests.exceptions.RequestException as e_req_custom: 
                logger.error(f"RequestException for Custom API '{selected_model_details['name']}': {e_req_custom}")
                reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ '{selected_model_details['name']}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            except Exception as e_custom_proc: 
                logger.error(f"Error processing Custom API response for '{selected_model_details['name']}': {e_custom_proc}\n{traceback.format_exc()}")
                reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç '{selected_model_details['name']}'."
    else:
        reply_text = f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø API: {api_type}"
        logger.error(f"Unsupported API type: {api_type} for model_key {current_model_key}")

    if request_successful and selected_model_details.get("is_limited"):
        increment_request_count(user_id, current_model_key, context)
            
    reply_text_for_sending, was_truncated = smart_truncate(reply_text, MAX_MESSAGE_LENGTH_TELEGRAM)
    await update.message.reply_text(reply_text_for_sending, reply_markup=get_main_reply_keyboard())
    if request_successful:
        logger.info(f"Sent successful response for model_key {current_model_key}. User: {user_id}. Truncated: {was_truncated}")


async def set_bot_commands(application: Application):
    commands = [
        BotCommand("start", "üöÄ –ù–∞—á–∞–ª–æ / –ò–Ω—Ñ–æ"),
        BotCommand("mode", "üß† –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –ò–ò"),
        BotCommand("model", "‚öôÔ∏è –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ò–ò"),
        BotCommand("usage", "üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã"),
        BotCommand("subscribe", "üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏"),
        BotCommand("claim_news_bonus", "üéÅ –ë–æ–Ω—É—Å –∑–∞ –Ω–æ–≤–æ—Å—Ç–∏"), # –î–û–ë–ê–í–õ–ï–ù–ê –ó–ê–ü–Ø–¢–ê–Ø
        BotCommand("help", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
    ]

    try:
        await application.bot.set_my_commands(commands)
        logger.info("Bot commands set successfully.")
    except Exception as e:
        logger.error(f"Failed to set bot commands: {e}")

async def claim_news_bonus_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not user:
        logger.warning("claim_news_bonus_command called without effective_user.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –∫–∞–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not NEWS_CHANNEL_USERNAME or NEWS_CHANNEL_USERNAME == "@YourNewsChannelHandle" or \
       not NEWS_CHANNEL_LINK or NEWS_CHANNEL_LINK == "https://t.me/YourNewsChannelHandle":
        await update.message.reply_text(
            "–§—É–Ω–∫—Ü–∏—è –±–æ–Ω—É—Å–∞ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        logger.warning(f"claim_news_bonus_command: NEWS_CHANNEL_USERNAME ('{NEWS_CHANNEL_USERNAME}') or NEWS_CHANNEL_LINK ('{NEWS_CHANNEL_LINK}') is not configured.")
        return

    bonus_model_config = AVAILABLE_TEXT_MODELS.get(NEWS_CHANNEL_BONUS_MODEL_KEY)
    if not bonus_model_config:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        logger.error(f"NEWS_CHANNEL_BONUS_MODEL_KEY '{NEWS_CHANNEL_BONUS_MODEL_KEY}' not found in AVAILABLE_TEXT_MODELS.")
        return
    bonus_model_name = bonus_model_config['name']


    if context.user_data.get('claimed_news_bonus', False):
        remaining_bonus = context.user_data.get('news_bonus_uses_left', 0)
        if remaining_bonus > 0:
            reply_msg = (
                f"–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª. "
                f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {remaining_bonus} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏ '{bonus_model_name}'.\n"
                f"–ù–∞—à –∫–∞–Ω–∞–ª: {NEWS_CHANNEL_LINK}"
            )
        else:
            reply_msg = (
                f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–¥–µ–ª–∏ '{bonus_model_name}'.\n"
                f"–ù–∞—à –∫–∞–Ω–∞–ª: {NEWS_CHANNEL_LINK}"
            )
        await update.message.reply_text(reply_msg)
        return

    try:
        member_status = await context.bot.get_chat_member(chat_id=NEWS_CHANNEL_USERNAME, user_id=user.id)
        logger.debug(f"User {user.id} status in {NEWS_CHANNEL_USERNAME}: {member_status.status}")

        # –°—Ç–∞—Ç—É—Å—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ —á–ª–µ–Ω—Å—Ç–≤–æ
        allowed_statuses = ['member', 'administrator', 'creator']
        # –°—Ç–∞—Ç—É—Å 'restricted' —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–Ω–∞–ª–µ, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ (–Ω–µ –∑–∞–±–∞–Ω–µ–Ω).
        # –ò–Ω–æ–≥–¥–∞ 'left' –∏–ª–∏ 'kicked' –º–æ–≥—É—Ç –ø—Ä–∏–π—Ç–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã—à–µ–ª/–±—ã–ª —É–¥–∞–ª–µ–Ω.
        # –í–∞–∂–Ω–æ: –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π, –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ –¥–ª—è —ç—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.

        if member_status.status in allowed_statuses:
            context.user_data['claimed_news_bonus'] = True
            context.user_data['news_bonus_uses_left'] = NEWS_CHANNEL_BONUS_GENERATIONS
            await update.message.reply_text(
                f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª!\n"
                f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ {NEWS_CHANNEL_BONUS_GENERATIONS} –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ '{bonus_model_name}'.\n"
                f"–≠—Ç–æ—Ç –±–æ–Ω—É—Å –Ω–µ –∏–º–µ–µ—Ç —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–æ –æ–Ω –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π.\n"
                f"–ù–∞—à –∫–∞–Ω–∞–ª: {NEWS_CHANNEL_LINK}"
            )
            logger.info(f"User {user.id} claimed news channel bonus. Granted {NEWS_CHANNEL_BONUS_GENERATIONS} uses for {NEWS_CHANNEL_BONUS_MODEL_KEY}.")
        else:
            await update.message.reply_text(
                f"–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª {NEWS_CHANNEL_LINK}. \n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã, –∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–∫—Ä—ã—Ç (–µ—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π), "
                f"–∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /claim_news_bonus\n"
                f"–ï—Å–ª–∏ –≤—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É."
            )
    except telegram.error.BadRequest as e:
        error_text = str(e).lower()
        if "user not found" in error_text or "member not found" in error_text or "participant not found" in error_text :
            await update.message.reply_text(
                f"–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª {NEWS_CHANNEL_LINK}. \n"
                f"–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /claim_news_bonus"
            )
        elif "chat not found" in error_text or "channel not found" in error_text:
            await update.message.reply_text(
                "–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ, —É–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞."
            )
            logger.error(f"NEWS_CHANNEL_USERNAME ('{NEWS_CHANNEL_USERNAME}') seems to be invalid/incorrect for get_chat_member.")
        elif "bot is not a member" in error_text:
             await update.message.reply_text(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π, –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º (–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)."
            )
             logger.error(f"Bot is not a member of the private channel {NEWS_CHANNEL_USERNAME} and cannot check membership.")
        else:
            logger.error(f"BadRequest error checking channel membership for user {user.id} in {NEWS_CHANNEL_USERNAME}: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Unexpected error in claim_news_bonus_command for user {user.id}: {e}\n{traceback.format_exc()}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    if "YOUR_TELEGRAM_TOKEN" in TOKEN or not TOKEN or len(TOKEN.split(":")[0]) < 8:
        logger.critical("CRITICAL: TELEGRAM_TOKEN is not set correctly or is a placeholder.")
        return
    # –£–±—Ä–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–ª—è API –∫–ª—é—á–µ–π –∑–¥–µ—Å—å, —Ç.–∫. –æ–Ω–∞ –µ—Å—Ç—å –ø—Ä–∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    # if "YOUR_GOOGLE_GEMINI_API_KEY" in GOOGLE_GEMINI_API_KEY and "YOUR_CUSTOM_GEMINI_PRO_API_KEY" in CUSTOM_GEMINI_PRO_API_KEY:
    #      logger.warning("WARNING: API keys seem to be placeholders. Please set them correctly.")
    
    persistence = PicklePersistence(filepath="bot_data.pkl") 

    application = Application.builder().token(TOKEN).persistence(persistence).build()

    await set_bot_commands(application)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("mode", select_mode_command))
    application.add_handler(CommandHandler("model", select_model_command))
    application.add_handler(CommandHandler("usage", usage_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("subscribe", subscribe_info_command))
    application.add_handler(CommandHandler("claim_news_bonus", claim_news_bonus_command)) # –ü–ï–†–ï–ú–ï–©–ï–ù–û –°–Æ–î–ê

    application.add_handler(MessageHandler(filters.Text(["ü§ñ –†–µ–∂–∏–º –ò–ò"]), select_mode_command))
    application.add_handler(MessageHandler(filters.Text(["‚öôÔ∏è –ú–æ–¥–µ–ª—å –ò–ò"]), select_model_command))
    application.add_handler(MessageHandler(filters.Text(["üìä –õ–∏–º–∏—Ç—ã"]), usage_command)) 
    application.add_handler(MessageHandler(filters.Text(["üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏"]), subscribe_info_command)) 
    application.add_handler(MessageHandler(filters.Text(["‚ùì –ü–æ–º–æ—â—å"]), help_command))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_callback))


    logger.info("Starting bot application...")
    try:
        await application.run_polling()
    except Exception as e_poll:
        logger.critical(f"Error during application startup or polling: {e_poll}\n{traceback.format_exc()}")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user (KeyboardInterrupt)")
    except Exception as e_main_run:
        logger.critical(f"Critical error in asyncio.run(main()): {e_main_run}\n{traceback.format_exc()}")
