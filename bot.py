import telegram
from telegram import (
    InlineKeyboardButton, InlineKeyboardMarkup, Update,
    ReplyKeyboardMarkup, KeyboardButton, BotCommand
)
from telegram.constants import ParseMode, ChatAction
from telegram.helpers import escape_markdown
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, CallbackQueryHandler, PicklePersistence
)
import google.generativeai as genai
import google.api_core.exceptions
import requests
import logging
import traceback
import os
import asyncio
import nest_asyncio
import json
from datetime import datetime, timedelta
from telegram import LabeledPrice
from telegram.ext import PreCheckoutQueryHandler
from typing import Optional
import uuid

nest_asyncio.apply()
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–õ–Æ–ß–ò API –ò –¢–û–ö–ï–ù–´ ---
TOKEN = os.getenv("TELEGRAM_TOKEN", "8185454402:AAEgJLaBSaUSyP9Z_zv76Fn0PtEwltAqga0")
GOOGLE_GEMINI_API_KEY = os.getenv("GOOGLE_GEMINI_API_KEY", "AIzaSyCdDMpgLJyz6aYdwT9q4sbBk7sHVID4BTI")
CUSTOM_GEMINI_PRO_API_KEY = os.getenv("CUSTOM_GEMINI_PRO_API_KEY", "sk-MHulnEHU3bRxsnDjr0nq68lTcRYa5IpQATY1pUG4NaxpWSMJzvzsJ4KCVu0P")
CUSTOM_GEMINI_PRO_ENDPOINT = os.getenv("CUSTOM_GEMINI_PRO_ENDPOINT", "https://api.gen-api.ru/api/v1/networks/gemini-2-5-pro")
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN", "390540012:LIVE:70602")
YOUR_ADMIN_ID = 489230152

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
MAX_OUTPUT_TOKENS_GEMINI_LIB = 2048
MAX_MESSAGE_LENGTH_TELEGRAM = 4000

# --- –õ–ò–ú–ò–¢–´ ---
DEFAULT_FREE_REQUESTS_GOOGLE_FLASH_DAILY = 72
DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY = 48
DEFAULT_SUBSCRIPTION_REQUESTS_GOOGLE_FLASH_PREVIEW_DAILY = 75
DEFAULT_FREE_REQUESTS_CUSTOM_PRO_DAILY = 0
DEFAULT_SUBSCRIPTION_REQUESTS_CUSTOM_PRO_DAILY = 25
PRO_SUBSCRIPTION_LEVEL_KEY = "profi_access_v1"

# --- –ö–ê–ù–ê–õ –ù–û–í–û–°–¢–ï–ô –ò –ë–û–ù–£–° ---
NEWS_CHANNEL_USERNAME = "@timextech"
NEWS_CHANNEL_LINK = "https://t.me/timextech"
NEWS_CHANNEL_BONUS_MODEL_KEY = "custom_api_gemini_2_5_pro"
NEWS_CHANNEL_BONUS_GENERATIONS = 1

# --- –†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´ –ò–ò ---
AI_MODES = {
    "universal_ai_basic": {
        "name": "ü§ñ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò (–ë–∞–∑–æ–≤—ã–π)",
        "prompt": (
            "–¢—ã ‚Äî –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Gemini –æ—Ç Google. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏: –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, "
            "–¥–∞–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —à–∏—Ä–æ–∫–æ–º—É –∫—Ä—É–≥—É —Ç–µ–º. "
            "–ë—É–¥—å –≤–µ–∂–ª–∏–≤, –æ–±—ä–µ–∫—Ç–∏–≤–µ–Ω, —Ç–æ—á–µ–Ω –∏ –ø–æ–ª–µ–∑–µ–Ω. "
            "–ï—Å–ª–∏ —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π –æ–± —ç—Ç–æ–º.\n\n"
            "**–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç):**\n"
            "1.  **–ê–±–∑–∞—Ü—ã:** –ß–µ—Ç–∫–æ —Ä–∞–∑–¥–µ–ª—è–π —Å–º—ã—Å–ª–æ–≤—ã–µ –±–ª–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∞–±–∑–∞—Ü–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω—É –∏–ª–∏ –¥–≤–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.\n"
            "2.  **–°–ø–∏—Å–∫–∏:** –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1. –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç`, `2. –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç`) –∏–ª–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `- –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞` –∏–ª–∏ `* –î—Ä—É–≥–æ–π —ç–ª–µ–º–µ–Ω—Ç`). –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ø–∏—Å–∫–æ–≤.\n"
            "3.  **–°–µ–∫—Ü–∏–∏/–ó–∞–≥–æ–ª–æ–≤–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ):** –î–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫—Ä—É–ø–Ω—ã—Ö —Å–º—ã—Å–ª–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ—è—Å–Ω—è—é—â—É—é —Ñ—Ä–∞–∑—É –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã–¥–µ–ª–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –ó–ê–ì–õ–ê–í–ù–´–ú–ò –ë–£–ö–í–ê–ú–ò. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "    –û–°–ù–û–í–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:\n"
            "    - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –æ–¥–∏–Ω...\n"
            "    - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–≤–∞...\n"
            "4.  **–ë–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π Markdown-—Ä–∞–∑–º–µ—Ç–∫—É (–∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫—É—Ä—Å–∏–≤–∞, –æ–±—Ä–∞—Ç–Ω—ã–µ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –¥–ª—è –∫–æ–¥–∞, —Å–∏–º–≤–æ–ª—ã —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ç.–¥.). –ì–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —è—Å–Ω—ã–π, —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç.\n"
            "5.  **–õ–æ–≥–∏—á–µ—Å–∫–∞—è –ó–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å:** –°—Ç–∞—Ä–∞–π—Å—è, —á—Ç–æ–±—ã —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ –ø–æ–ª–Ω—ã–º–∏. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–∫–∏, —É–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É–Ω–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –õ—É—á—à–µ –Ω–µ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç, –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —É—Å–ø–µ–µ—à—å –µ–≥–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤ —Ä–∞–º–∫–∞—Ö —Ä–∞–∑—É–º–Ω–æ–π –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞.\n"
            "6.  **–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å:** –ì–ª–∞–≤–Ω–æ–µ ‚Äî —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç –±—ã–ª –ø–æ–Ω—è—Ç–Ω—ã–º, —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ª–µ–≥–∫–∏–º –¥–ª—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.\n"
            "7. **–ë–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤:** –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤ —Ç–µ–∫—Å—Ç–µ –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ —Å–∫–æ–±–∫–∏, –¥–µ—Ñ–∏—Å—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–µ—Å—É—Ç —Å–º—ã—Å–ª–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏."
        ),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò (–ë–∞–∑–æ–≤—ã–π)'. –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?"
    },
    "gemini_pro_custom_mode": {
        "name": "ü§ñ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç (–¥–ª—è Gemini 2.5 Pro)",
        "prompt": (
            "–¢—ã ‚Äî Gemini 2.5 Pro, –º–æ—â–Ω—ã–π –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—ã–µ, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
            "–°–æ–±–ª—é–¥–∞–π –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å. "
            "–§–æ—Ä–º—É–ª–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —è—Å–Ω–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∞–±–∑–∞—Ü—ã –∏ —Å–ø–∏—Å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. "
            "–ò–∑–±–µ–≥–∞–π –∏–∑–ª–∏—à–Ω–µ–≥–æ Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —É–ª—É—á—à–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞). "
            "–ï—Å–ª–∏ —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —É–∫–∞–∑—ã–≤–∞–π —ç—Ç–æ."
        ),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç'. –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?"
    },
    "creative_helper": {
        "name": "‚úçÔ∏è –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ü–æ–º–æ—â–Ω–∏–∫",
        "prompt": (
            "–¢—ã ‚Äî Gemini, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ò–ò-–ø–∞—Ä—Ç–Ω—ë—Ä –∏ –ø–∏—Å–∞—Ç–µ–ª—å. "
            "–¢–≤–æ—è –º–∏—Å—Å–∏—è ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å, –ø–æ–º–æ–≥–∞—Ç—å –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–µ–∫—Å—Ç—ã, –∏–¥–µ–∏, —Å—Ü–µ–Ω–∞—Ä–∏–∏, —Å—Ç–∏—Ö–∏ –∏ —Ç.–¥.) –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–º—ã—Å–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
            "–ë—É–¥—å —Å–º–µ–ª—ã–º –≤ –∏–¥–µ—è—Ö, –ø—Ä–µ–¥–ª–∞–≥–∞–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –Ω–æ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞–π—Å—è –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–∏–∫–∏ –∏ –∑–¥—Ä–∞–≤–æ–≥–æ —Å–º—ã—Å–ª–∞. "
            "**–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ –∫ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–º—É —Ç–µ–∫—Å—Ç—É):**\n"
            "1.  **–ê–±–∑–∞—Ü—ã:** –î–ª—è –ø—Ä–æ–∑—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–π ‚Äî —á–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∞–±–∑–∞—Ü—ã.\n"
            "2.  **–°—Ç–∏—Ö–∏:** –°–æ–±–ª—é–¥–∞–π —Å—Ç—Ä–æ—Ñ—ã –∏ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –∑–∞–¥–∞–Ω–∏–µ–º.\n"
            "3.  **–î–∏–∞–ª–æ–≥–∏:** –û—Ñ–æ—Ä–º–ª—è–π –¥–∏–∞–ª–æ–≥–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –æ–±—Ä–∞–∑–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, `- –ü—Ä–∏–≤–µ—Ç! - —Å–∫–∞–∑–∞–ª –æ–Ω.` –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞).\n"
            "4.  **–ë–µ–∑ Markdown:** –ì–µ–Ω–µ—Ä–∏—Ä—É–π —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ Markdown-—Ä–∞–∑–º–µ—Ç–∫–∏ (–∑–≤–µ–∑–¥–æ—á–µ–∫, —Ä–µ—à–µ—Ç–æ–∫ –∏ —Ç.–ø.), –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —ç—Ç–æ –Ω–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–º–æ–≥–æ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã, –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏).\n"
            "5.  **–Ø–∑—ã–∫:** –ò—Å–ø–æ–ª—å–∑—É–π –±–æ–≥–∞—Ç—ã–π –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ.\n"
            "6.  **–ó–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å:** –°—Ç–∞—Ä–∞–π—Å—è –¥–æ–≤–æ–¥–∏—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ü–∞ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –∑–∞–¥–∞—á–µ–π."
        ),
        "welcome": "–†–µ–∂–∏–º '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ü–æ–º–æ—â–Ω–∏–∫' –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º! –ù–∞–¥ –∫–∞–∫–æ–π —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ–π –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º?"
    },
    "analyst": {
        "name": "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫",
        "prompt": (
            "–¢—ã ‚Äî –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫ –Ω–∞ –±–∞–∑–µ Gemini, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Ñ–∞–∫—Ç–æ–≤ –∏ —Ç—Ä–µ–Ω–¥–æ–≤. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—ã–µ, –ª–æ–≥–∏—á–µ—Å–∫–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –±–∏–∑–Ω–µ—Å-–≤–æ–ø—Ä–æ—Å–æ–≤. "
            "–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥:\n"
            "1. **–ê–Ω–∞–ª–∏–∑:** –†–∞–∑–±–µ—Ä–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã.\n"
            "2. **–í—ã–≤–æ–¥—ã:** –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —á–µ—Ç–∫–∏–µ –≤—ã–≤–æ–¥—ã –∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n"
            "3. **–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:** –û–±—ä—è—Å–Ω–∏ —Å–≤–æ–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è.\n"
            "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —É–∫–∞–∂–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
        ),
        "welcome": "–†–µ–∂–∏–º '–ê–Ω–∞–ª–∏—Ç–∏–∫' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ö–∞–∫—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?"
    },
    "joker": {
        "name": "üòú –®—É—Ç–Ω–∏–∫",
        "prompt": (
            "–¢—ã ‚Äî –ò–ò —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ Gemini. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã —Å –ª–µ–≥–∫–æ—Å—Ç—å—é, –æ—Å—Ç—Ä–æ—É–º–∏–µ–º –∏ —é–º–æ—Ä–æ–º, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∏ —ç—Ç–æ–º –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å. "
            "–î–æ–±–∞–≤–ª—è–π —à—É—Ç–∫–∏, –∞–Ω–µ–∫–¥–æ—Ç—ã –∏–ª–∏ –∑–∞–±–∞–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –Ω–æ –æ—Å—Ç–∞–≤–∞–π—Å—è –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–∏–ª–∏—á–∏—è. "
            "–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –≤–µ—Å–µ–ª—ã–º–∏ –∏ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–º–∏."
        ),
        "welcome": "–†–µ–∂–∏–º '–®—É—Ç–Ω–∏–∫' –≤–∫–ª—é—á–µ–Ω! üòÑ –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å —Å —É–ª—ã–±–∫–æ–π ‚Äî —á—Ç–æ —É —Ç–µ–±—è –∑–∞ –≤–æ–ø—Ä–æ—Å?"
    }
}
DEFAULT_AI_MODE_KEY = "universal_ai_basic"

# --- –ú–û–î–ï–õ–ò –ò–ò ---
AVAILABLE_TEXT_MODELS = {
    "google_gemini_2_0_flash": {
        "name": "‚ö°Ô∏è Gemini 2.0 Flash",
        "id": "gemini-2.0-flash",
        "api_type": "google_genai",
        "is_limited": True,
        "limit_type": "daily_free",
        "limit": DEFAULT_FREE_REQUESTS_GOOGLE_FLASH_DAILY,
        "cost_category": "google_flash_free"
    },
    "google_gemini_2_5_flash_preview": {
        "name": "üí® Gemini 2.5 Flash Preview",
        "id": "gemini-2.5-flash-preview-04-17",
        "api_type": "google_genai",
        "is_limited": True,
        "limit_type": "subscription_or_daily_free",
        "limit_if_no_subscription": DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY,
        "subscription_daily_limit": DEFAULT_SUBSCRIPTION_REQUESTS_GOOGLE_FLASH_PREVIEW_DAILY,
        "cost_category": "google_flash_preview_flex"
    },
    "custom_api_gemini_2_5_pro": {
        "name": "üåü Gemini 2.5 Pro (–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)",
        "id": "gemini-2.5-pro-preview-03-25",
        "api_type": "custom_http_api",
        "endpoint": CUSTOM_GEMINI_PRO_ENDPOINT,
        "api_key_var_name": "CUSTOM_GEMINI_PRO_API_KEY",
        "is_limited": True,
        "limit_type": "subscription_custom_pro",
        "limit_if_no_subscription": DEFAULT_FREE_REQUESTS_CUSTOM_PRO_DAILY,
        "subscription_daily_limit": DEFAULT_SUBSCRIPTION_REQUESTS_CUSTOM_PRO_DAILY,
        "cost_category": "custom_api_pro_paid",
        "pricing_info": {}
    }
}
DEFAULT_MODEL_KEY = "google_gemini_2_0_flash"
DEFAULT_MODEL_ID = AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]["id"]

# --- –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ú–ï–ù–Æ ---
MENU_STRUCTURE = {
    "main_menu": {
        "title": "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "items": [
            {"text": "ü§ñ –†–µ–∂–∏–º—ã –ò–ò", "action": "submenu", "target": "ai_modes_submenu"},
            {"text": "‚öôÔ∏è –ú–æ–¥–µ–ª–∏ –ò–ò", "action": "submenu", "target": "models_submenu"},
            {"text": "üìä –õ–∏–º–∏—Ç—ã", "action": "submenu", "target": "limits_submenu"},
            {"text": "üéÅ –ë–æ–Ω—É—Å", "action": "submenu", "target": "bonus_submenu"},
            {"text": "üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏", "action": "submenu", "target": "subscription_submenu"},
            {"text": "‚ùì –ü–æ–º–æ—â—å", "action": "submenu", "target": "help_submenu"}
        ],
        "parent": None
    },
    "ai_modes_submenu": {
        "title": "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ò–ò",
        "items": [
            {"text": mode["name"], "action": "set_agent", "target": key}
            for key, mode in AI_MODES.items()
            if key != "gemini_pro_custom_mode"
        ],
        "parent": "main_menu"
    },
    "models_submenu": {
        "title": "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò",
        "items": [
            {"text": model["name"], "action": "set_model", "target": key}
            for key, model in AVAILABLE_TEXT_MODELS.items()
        ],
        "parent": "main_menu"
    },
    "limits_submenu": {
        "title": "–í–∞—à–∏ –ª–∏–º–∏—Ç—ã",
        "items": [
            {"text": "üìä –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç—ã", "action": "show_limits", "target": "usage"}
        ],
        "parent": "main_menu"
    },
    "bonus_submenu": {
        "title": "–ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É",
        "items": [
            {"text": "üéÅ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å", "action": "check_bonus", "target": "news_bonus"}
        ],
        "parent": "main_menu"
    },
    "subscription_submenu": {
        "title": "–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏",
        "items": [
            {"text": "üíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø–æ–∫—É–ø–∫–∞", "action": "show_subscription", "target": "subscribe"}
        ],
        "parent": "main_menu"
    },
    "help_submenu": {
        "title": "–ü–æ–º–æ—â—å",
        "items": [
            {"text": "‚ùì –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å", "action": "show_help", "target": "help"}
        ],
        "parent": "main_menu"
    }
}

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API Google Gemini ---
if not GOOGLE_GEMINI_API_KEY or "YOUR_GOOGLE_GEMINI_API_KEY" in GOOGLE_GEMINI_API_KEY or "AIzaSy" not in GOOGLE_GEMINI_API_KEY:
    logger.warning("Google Gemini API key (GOOGLE_GEMINI_API_KEY) is not set correctly or uses a placeholder.")
else:
    try:
        genai.configure(api_key=GOOGLE_GEMINI_API_KEY)
        logger.info("Google Gemini API configured successfully.")
    except Exception as e:
        logger.error(f"Failed to configure Google Gemini API: {str(e)}")

if not CUSTOM_GEMINI_PRO_API_KEY or "YOUR_CUSTOM_KEY" in CUSTOM_GEMINI_PRO_API_KEY or "sk-" not in CUSTOM_GEMINI_PRO_API_KEY:
    logger.warning("Custom Gemini Pro API key (CUSTOM_GEMINI_PRO_API_KEY) is not set correctly or uses a placeholder.")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_current_mode_details(context: ContextTypes.DEFAULT_TYPE) -> dict:
    current_model_key = get_current_model_key(context)
    if current_model_key == "custom_api_gemini_2_5_pro":
        if "gemini_pro_custom_mode" in AI_MODES:
            return AI_MODES["gemini_pro_custom_mode"]
        else:
            logger.warning("Dedicated mode 'gemini_pro_custom_mode' not found. Falling back to default AI mode.")
            return AI_MODES.get(DEFAULT_AI_MODE_KEY, AI_MODES["universal_ai_basic"])
    mode_key = context.user_data.get('current_ai_mode', DEFAULT_AI_MODE_KEY)
    return AI_MODES.get(mode_key, AI_MODES[DEFAULT_AI_MODE_KEY])

def get_current_model_key(context: ContextTypes.DEFAULT_TYPE) -> str:
    selected_id = context.user_data.get('selected_model_id', DEFAULT_MODEL_ID)
    selected_api_type = context.user_data.get('selected_api_type')

    if selected_api_type:
        for key, info in AVAILABLE_TEXT_MODELS.items():
            if info["id"] == selected_id and info.get("api_type") == selected_api_type:
                return key

    for key, info in AVAILABLE_TEXT_MODELS.items():
        if info["id"] == selected_id:
            if 'selected_api_type' not in context.user_data or context.user_data['selected_api_type'] != info.get("api_type"):
                context.user_data['selected_api_type'] = info.get("api_type")
                logger.info(f"Inferred and updated api_type to '{info.get('api_type')}' for model_id '{selected_id}'")
            return key
            
    logger.warning(f"Could not find key for model_id '{selected_id}' (API type '{selected_api_type}' if any). Falling back to default: {DEFAULT_MODEL_KEY}.")
    default_model_config = AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]
    context.user_data['selected_model_id'] = default_model_config["id"]
    context.user_data['selected_api_type'] = default_model_config["api_type"]
    return DEFAULT_MODEL_KEY

def get_selected_model_details(context: ContextTypes.DEFAULT_TYPE) -> dict:
    model_key = get_current_model_key(context)
    return AVAILABLE_TEXT_MODELS.get(model_key, AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY])

def smart_truncate(text: str, max_length: int) -> tuple[str, bool]:
    if not isinstance(text, str):
        logger.warning(f"smart_truncate received non-string input: {type(text)}. Returning as is.")
        return str(text), False
    if len(text) <= max_length:
        return text, False
    suffix = "\n\n(...–æ—Ç–≤–µ—Ç –±—ã–ª —Å–æ–∫—Ä–∞—â–µ–Ω)"
    adjusted_max_length = max_length - len(suffix)
    if adjusted_max_length <= 0:
        return text[:max_length-len("...")] + "...", True
    truncated_text = text[:adjusted_max_length]
    possible_cut_points = []
    for sep in ['\n\n', '. ', '! ', '? ', '\n', ' ']:
        pos = truncated_text.rfind(sep)
        if pos != -1:
            actual_pos = pos + (len(sep) if sep != ' ' else 0)
            if actual_pos > 0:
                possible_cut_points.append(actual_pos)
    if possible_cut_points:
        cut_at = max(possible_cut_points)
        if cut_at > adjusted_max_length * 0.3:
             return text[:cut_at].strip() + suffix, True
    return text[:adjusted_max_length].strip() + suffix, True

def get_main_reply_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [[KeyboardButton("üìã –ú–µ–Ω—é")]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

def get_user_actual_limit_for_model(user_id: int, model_key: str, context: ContextTypes.DEFAULT_TYPE) -> int:
    model_config = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_config: return 0
    all_user_subscriptions = context.bot_data.setdefault('user_subscriptions', {})
    user_subscription_details = all_user_subscriptions.get(user_id, {})
    current_sub_level = None
    if user_subscription_details.get('valid_until'):
        try:
            valid_until_dt = datetime.fromisoformat(user_subscription_details['valid_until'])
            if datetime.now(valid_until_dt.tzinfo).date() <= valid_until_dt.date():
                current_sub_level = user_subscription_details.get('level')
        except Exception: pass

    limit_type = model_config.get("limit_type")
    if limit_type == "daily_free":
        return model_config.get("limit", 0)
    if limit_type == "subscription_or_daily_free":
        return model_config.get("subscription_daily_limit" if current_sub_level == PRO_SUBSCRIPTION_LEVEL_KEY else "limit_if_no_subscription", 0)
    if limit_type == "subscription_custom_pro":
        return model_config.get("subscription_daily_limit" if current_sub_level == PRO_SUBSCRIPTION_LEVEL_KEY else "limit_if_no_subscription", 0)
    return model_config.get("limit", float('inf')) if not model_config.get("is_limited", False) else 0

def check_and_log_request_attempt(user_id: int, model_key: str, context: ContextTypes.DEFAULT_TYPE) -> tuple[bool, str, int]:
    today_str = datetime.now().strftime("%Y-%m-%d")
    model_config = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_config or not model_config.get("is_limited"): return True, "", 0

    is_profi_subscriber = False
    if model_config.get("limit_type") in ["subscription_or_daily_free", "subscription_custom_pro"]:
        user_subscription_details = context.bot_data.get('user_subscriptions', {}).get(user_id, {})
        if user_subscription_details.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY and user_subscription_details.get('valid_until'):
            try:
                if datetime.now(datetime.fromisoformat(user_subscription_details['valid_until']).tzinfo).date() <= datetime.fromisoformat(user_subscription_details['valid_until']).date():
                    is_profi_subscriber = True
            except Exception: pass

    if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY and not is_profi_subscriber:
        if context.user_data.get('news_bonus_uses_left', 0) > 0:
            logger.info(f"User {user_id} has bonus for {model_key}. Allowing.")
            return True, "bonus_available", 0

    all_daily_counts = context.bot_data.setdefault('all_user_daily_counts', {})
    user_model_counts = all_daily_counts.setdefault(user_id, {})
    model_daily_usage = user_model_counts.setdefault(model_key, {'date': '', 'count': 0})
    if model_daily_usage['date'] != today_str:
        model_daily_usage.update({'date': today_str, 'count': 0})

    current_daily_count = model_daily_usage['count']
    actual_daily_limit = get_user_actual_limit_for_model(user_id, model_key, context)

    if current_daily_count >= actual_daily_limit:
        message_parts = [f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ ({current_daily_count}/{actual_daily_limit}) –¥–ª—è –º–æ–¥–µ–ª–∏ '{escape_markdown(model_config['name'], version=2)}'\."]
        if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY and not is_profi_subscriber:
            if not context.user_data.get('claimed_news_bonus', False):
                message_parts.append(f"üí° –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ [–Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK}) –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é ¬´–ë–æ–Ω—É—Å¬ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\!")
            elif context.user_data.get('news_bonus_uses_left', 0) == 0:
                 message_parts.append("‚ÑπÔ∏è –í–∞—à –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\.")
        message_parts.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –º–µ–Ω—é ¬´–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏¬ª\.")
        return False, "\n".join(message_parts), current_daily_count
    return True, "", current_daily_count

def increment_request_count(user_id: int, model_key: str, context: ContextTypes.DEFAULT_TYPE):
    model_config = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_config or not model_config.get("is_limited"): return

    if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY:
        is_profi_subscriber = False
        user_subscription_details = context.bot_data.get('user_subscriptions', {}).get(user_id, {})
        if user_subscription_details.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY and user_subscription_details.get('valid_until'):
            try:
                if datetime.now(datetime.fromisoformat(user_subscription_details['valid_until']).tzinfo).date() <= datetime.fromisoformat(user_subscription_details['valid_until']).date():
                    is_profi_subscriber = True
            except Exception: pass
        
        if not is_profi_subscriber:
            news_bonus_uses_left = context.user_data.get('news_bonus_uses_left', 0)
            if news_bonus_uses_left > 0:
                context.user_data['news_bonus_uses_left'] = news_bonus_uses_left - 1
                logger.info(f"User {user_id} consumed a news channel bonus use for {model_key}. Remaining: {context.user_data['news_bonus_uses_left']}")
                return

    today_str = datetime.now().strftime("%Y-%m-%d")
    all_daily_counts = context.bot_data.setdefault('all_user_daily_counts', {})
    user_model_counts = all_daily_counts.setdefault(user_id, {})
    model_daily_usage = user_model_counts.setdefault(model_key, {'date': today_str, 'count': 0})
    if model_daily_usage['date'] != today_str:
        model_daily_usage.update({'date': today_str, 'count': 0})
    model_daily_usage['count'] += 1
    logger.info(f"User {user_id} daily request count for {model_key} incremented to {model_daily_usage['count']}")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –º–µ–Ω—é ---
def generate_menu_keyboard(menu_key: str, context: ContextTypes.DEFAULT_TYPE) -> InlineKeyboardMarkup:
    menu = MENU_STRUCTURE.get(menu_key)
    if not menu:
        return InlineKeyboardMarkup([])
    
    keyboard = []
    for item in menu["items"]:
        callback_data = f"menu_{item['action']}_{item['target']}"
        keyboard.append([InlineKeyboardButton(item["text"], callback_data=callback_data)])
    
    nav_buttons = []
    if menu["parent"]:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"menu_back_{menu['parent']}"))
    if menu_key != "main_menu":
        nav_buttons.append(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_goto_main_menu"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    return InlineKeyboardMarkup(keyboard)

async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, menu_key: str, message_to_edit: Optional[telegram.Message] = None):
    menu = MENU_STRUCTURE.get(menu_key)
    if not menu:
        text = "–û—à–∏–±–∫–∞: –ú–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        if message_to_edit:
            await message_to_edit.edit_text(text, reply_markup=None)
        else:
            await update.message.reply_text(text, reply_markup=get_main_reply_keyboard())
        return
    
    context.user_data['current_menu'] = menu_key
    text = escape_markdown(menu["title"], version=2)
    reply_markup = generate_menu_keyboard(menu_key, context)
    
    if message_to_edit:
        await message_to_edit.edit_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN_V2)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    context.user_data.setdefault('current_ai_mode', DEFAULT_AI_MODE_KEY)
    context.user_data.setdefault('current_menu', 'main_menu')
    if 'selected_model_id' not in context.user_data or 'selected_api_type' not in context.user_data:
        default_model_conf = AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]
        context.user_data.update({'selected_model_id': default_model_conf["id"], 'selected_api_type': default_model_conf["api_type"]})
    
    current_model_key = get_current_model_key(context)
    current_mode_name = get_current_mode_details(context)['name']
    current_model_name = AVAILABLE_TEXT_MODELS[current_model_key]['name']

    greeting = f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ò–ò-–±–æ—Ç –Ω–∞ –±–∞–∑–µ Gemini.\nüß† –ê–≥–µ–Ω—Ç: *{escape_markdown(current_mode_name, version=2)}*\n‚öôÔ∏è –ú–æ–¥–µ–ª—å: *{escape_markdown(current_model_name, version=2)}*\n\nüí¨ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ *–ú–µ–Ω—é* –Ω–∏–∂–µ!"
    try:
        await update.message.reply_text(
            greeting,
            parse_mode=ParseMode.MARKDOWN_V2,
            reply_markup=get_main_reply_keyboard(),
            disable_web_page_preview=True
        )
        await show_menu(update, context, "main_menu")
    except telegram.error.BadRequest as e:
        logger.error(f"Error sending /start message: {e}")
        plain_text = f"–ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–±–æ—Ç Gemini.\n–ê–≥–µ–Ω—Ç: {current_mode_name}\n–ú–æ–¥–µ–ª—å: {current_model_name}\n\n–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ú–µ–Ω—é!"
        await update.message.reply_text(plain_text, reply_markup=get_main_reply_keyboard())
    logger.info(f"Start command processed for user {user_id}.")

async def open_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_menu(update, context, "main_menu")

async def usage_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_menu(update, context, "limits_submenu")

async def subscribe_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_menu(update, context, "subscription_submenu")

async def get_news_bonus_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_menu(update, context, "bonus_submenu")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_menu(update, context, "help_submenu")

async def claim_news_bonus_logic(update: Update, context: ContextTypes.DEFAULT_TYPE,
                                 called_from_button: bool = False, message_to_edit: Optional[telegram.Message] = None):
    user = update.effective_user
    reply_chat_id = None
    if called_from_button and update.callback_query:
        reply_chat_id = update.callback_query.message.chat_id
    elif update.message:
        reply_chat_id = update.message.chat_id
        message_to_edit = None
    else:
        logger.warning("claim_news_bonus_logic: Could not determine user or reply target.")
        return

    if not NEWS_CHANNEL_USERNAME or NEWS_CHANNEL_USERNAME == "@YourNewsChannelHandle":
        error_message = "–§—É–Ω–∫—Ü–∏—è –±–æ–Ω—É—Å–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞."
        if message_to_edit: await message_to_edit.edit_text(error_message, reply_markup=None, disable_web_page_preview=True)
        else: await context.bot.send_message(chat_id=reply_chat_id, text=error_message, disable_web_page_preview=True)
        return

    bonus_model_config = AVAILABLE_TEXT_MODELS.get(NEWS_CHANNEL_BONUS_MODEL_KEY)
    if not bonus_model_config:
        error_message = "–û—à–∏–±–∫–∞: –ë–æ–Ω—É—Å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        if message_to_edit: await message_to_edit.edit_text(error_message, reply_markup=None, disable_web_page_preview=True)
        else: await context.bot.send_message(chat_id=reply_chat_id, text=error_message, disable_web_page_preview=True)
        return
    bonus_model_name_md = escape_markdown(bonus_model_config['name'], version=2)

    if context.user_data.get('claimed_news_bonus', False):
        uses_left = context.user_data.get('news_bonus_uses_left', 0)
        reply_text_claimed = ""
        if uses_left > 0:
            reply_text_claimed = (f"–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å\. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å *{uses_left}* –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –º–æ–¥–µ–ª–∏ '{bonus_model_name_md}'\.\n–ù–∞—à [–∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK})\.")
        else:
            reply_text_claimed = (f"–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å –¥–ª—è –º–æ–¥–µ–ª–∏ '{bonus_model_name_md}'\.\n–ù–∞—à [–∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK})\.")
        if message_to_edit: await message_to_edit.edit_text(reply_text_claimed, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=None, disable_web_page_preview=True)
        else: await context.bot.send_message(chat_id=reply_chat_id, text=reply_text_claimed, parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)
        return

    try:
        member_status = await context.bot.get_chat_member(chat_id=NEWS_CHANNEL_USERNAME, user_id=user.id)
        if member_status.status in ['member', 'administrator', 'creator']:
            context.user_data['claimed_news_bonus'] = True
            context.user_data['news_bonus_uses_left'] = NEWS_CHANNEL_BONUS_GENERATIONS
            success_text = (f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ [–∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK})\!\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ *{NEWS_CHANNEL_BONUS_GENERATIONS}* –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ '{bonus_model_name_md}'\.")
            if message_to_edit: await message_to_edit.edit_text(success_text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=None, disable_web_page_preview=True)
            else: await context.bot.send_message(chat_id=reply_chat_id, text=success_text, parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)
        else:
            fail_text = (f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ [–∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã, –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—â–µ —Ä–∞–∑\.")
            reply_markup_after_fail = InlineKeyboardMarkup([
                [InlineKeyboardButton(f"üì¢ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ {NEWS_CHANNEL_USERNAME}", url=NEWS_CHANNEL_LINK)],
                [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞!", callback_data="menu_check_bonus_news_bonus")]])
            if message_to_edit:
                await message_to_edit.edit_text(fail_text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=reply_markup_after_fail, disable_web_page_preview=True)
            else:
                await context.bot.send_message(chat_id=reply_chat_id, text=fail_text, parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)
    except telegram.error.BadRequest as e:
        error_text_response = str(e).lower()
        reply_message_on_error = f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {escape_markdown(str(e), version=2)}\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\."
        if "user not found" in error_text_response or "member not found" in error_text_response or "participant not found" in error_text_response:
            reply_message_on_error = f"–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ [–∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK})\. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\."
        elif "chat not found" in error_text_response or "channel not found" in error_text_response:
            reply_message_on_error = "–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω\. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ, —É–∫–∞–∑–∞–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞\."
        elif "bot is not a member" in error_text_response:
            reply_message_on_error = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\. –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π, –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º\."
        logger.error(f"BadRequest error checking channel membership for user {user.id} in {NEWS_CHANNEL_USERNAME}: {e}")
        if message_to_edit: await message_to_edit.edit_text(reply_message_on_error, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=None, disable_web_page_preview=True)
        else: await context.bot.send_message(chat_id=reply_chat_id, text=reply_message_on_error, parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"Unexpected error in claim_news_bonus_logic for user {user.id}: {e}\n{traceback.format_exc()}")
        error_message_general = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\."
        if message_to_edit: await message_to_edit.edit_text(error_message_general, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=None, disable_web_page_preview=True)
        else: await context.bot.send_message(chat_id=reply_chat_id, text=error_message_general, parse_mode=ParseMode.MARKDOWN_V2, disable_web_page_preview=True)

async def show_limits(update: Update, context: ContextTypes.DEFAULT_TYPE, message_to_edit: Optional[telegram.Message] = None):
    user_id = update.effective_user.id
    user_subscription_details = context.bot_data.setdefault('user_subscriptions', {}).get(user_id, {})
    display_sub_level = "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø"
    subscription_active = False
    if user_subscription_details.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY and user_subscription_details.get('valid_until'):
        try:
            valid_until_dt = datetime.fromisoformat(user_subscription_details['valid_until'])
            if datetime.now(valid_until_dt.tzinfo).date() <= valid_until_dt.date():
                display_sub_level = f"üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ (–¥–æ {valid_until_dt.strftime('%Y-%m-%d')})"
                subscription_active = True
            else: display_sub_level = "üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ (–∏—Å—Ç–µ–∫–ª–∞)"
        except Exception: display_sub_level = "üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ (–æ—à–∏–±–∫–∞ –¥–∞—Ç—ã)"

    usage_text_parts = [f"üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –ª–∏–º–∏—Ç–∞—Ö*", f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: *{escape_markdown(display_sub_level, version=2)}*", "\n–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –º–æ–¥–µ–ª—è–º:"]
    for model_k, model_c in AVAILABLE_TEXT_MODELS.items():
        if model_c.get("is_limited"):
            today_str = datetime.now().strftime("%Y-%m-%d")
            user_model_counts = context.bot_data.get('all_user_daily_counts', {}).get(user_id, {})
            model_daily_usage = user_model_counts.get(model_k, {'date': '', 'count': 0})
            current_c_display = model_daily_usage['count'] if model_daily_usage['date'] == today_str else 0
            actual_l = get_user_actual_limit_for_model(user_id, model_k, context)
            usage_text_parts.append(f"‚ñ´Ô∏è {escape_markdown(model_c['name'], version=2)}: *{current_c_display}/{actual_l}*")

    if NEWS_CHANNEL_USERNAME and NEWS_CHANNEL_USERNAME != "@YourNewsChannelHandle":
        bonus_model_name = AVAILABLE_TEXT_MODELS.get(NEWS_CHANNEL_BONUS_MODEL_KEY, {}).get('name', "–±–æ–Ω—É—Å–Ω–æ–π –º–æ–¥–µ–ª–∏")
        bonus_model_name_md = escape_markdown(bonus_model_name, version=2)
        bonus_info_md = ""
        if not context.user_data.get('claimed_news_bonus', False):
            bonus_info_md = (f"\nüéÅ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ [–Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK}) –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é ¬´–ë–æ–Ω—É—Å¬ª "
                             f"–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è *{NEWS_CHANNEL_BONUS_GENERATIONS}* –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ({bonus_model_name_md})\!")
        elif (bonus_uses_left := context.user_data.get('news_bonus_uses_left', 0)) > 0:
            bonus_info_md = f"\nüéÅ –£ –≤–∞—Å –µ—Å—Ç—å *{bonus_uses_left}* –±–æ–Ω—É—Å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è {bonus_model_name_md} ([–∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK}))\."
        else:
            bonus_info_md = f"\n‚ÑπÔ∏è –ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ [–Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK}) ({bonus_model_name_md}) —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\."
        usage_text_parts.append(bonus_info_md)

    if not subscription_active:
        usage_text_parts.append(f"\n–•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–æ–≤? –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é ¬´–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏¬ª\.")

    final_usage_text_md = "\n".join(usage_text_parts)
    reply_markup = generate_menu_keyboard("limits_submenu", context)
    try:
        if message_to_edit:
            await message_to_edit.edit_text(final_usage_text_md, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=reply_markup, disable_web_page_preview=True)
        else:
            await update.message.reply_text(final_usage_text_md, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=reply_markup, disable_web_page_preview=True)
    except telegram.error.BadRequest as e:
        logger.error(f"Error sending limits: {e}")
        plain_usage_parts = [f"–°—Ç–∞—Ç—É—Å: {display_sub_level}", "–õ–∏–º–∏—Ç—ã:"]
        for model_k, model_c in AVAILABLE_TEXT_MODELS.items():
             if model_c.get("is_limited"):
                today_str = datetime.now().strftime("%Y-%m-%d")
                user_model_counts = context.bot_data.get('all_user_daily_counts', {}).get(user_id, {})
                model_daily_usage = user_model_counts.get(model_k, {'date': '', 'count': 0})
                current_c_display = model_daily_usage['count'] if model_daily_usage['date'] == today_str else 0
                actual_l = get_user_actual_limit_for_model(user_id, model_k, context)
                plain_usage_parts.append(f"- {model_c['name']}: {current_c_display}/{actual_l}")
        if NEWS_CHANNEL_USERNAME and NEWS_CHANNEL_USERNAME != "@YourNewsChannelHandle":
            bonus_model_name_plain = AVAILABLE_TEXT_MODELS.get(NEWS_CHANNEL_BONUS_MODEL_KEY, {}).get('name', "–±–æ–Ω—É—Å–Ω–æ–π –º–æ–¥–µ–ª–∏")
            if not context.user_data.get('claimed_news_bonus', False): plain_usage_parts.append(f"\n–ë–æ–Ω—É—Å: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {NEWS_CHANNEL_LINK} -> –ú–µ–Ω—é ¬´–ë–æ–Ω—É—Å¬ª")
            elif (bonus_left := context.user_data.get('news_bonus_uses_left', 0)) > 0: plain_usage_parts.append(f"\n–ë–æ–Ω—É—Å: –£ –≤–∞—Å {bonus_left} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è {bonus_model_name_plain}.")
            else: plain_usage_parts.append(f"\n–ë–æ–Ω—É—Å –∑–∞ {NEWS_CHANNEL_LINK} ({bonus_model_name_plain}) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        if not subscription_active: plain_usage_parts.append("\n–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏: –ú–µ–Ω—é ¬´–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏¬ª")
        plain_text = "\n".join(plain_usage_parts)
        if message_to_edit:
            await message_to_edit.edit_text(plain_text, reply_markup=reply_markup, disable_web_page_preview=True)
        else:
            await update.message.reply_text(plain_text, reply_markup=reply_markup, disable_web_page_preview=True)

async def show_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE, message_to_edit: Optional[telegram.Message] = None):
    text_parts = ["üåü *–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ ‚Äì –ú–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Gemini\!* üåü",
                  "\n–ü–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è —Å–∞–º—ã—Ö –º–æ—â–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π:"]
    m_conf_flash = AVAILABLE_TEXT_MODELS['google_gemini_2_5_flash_preview']
    text_parts.append(f"üí® {escape_markdown(m_conf_flash['name'], version=2)}: *{m_conf_flash['subscription_daily_limit']}* –∑/–¥ \(–±–µ—Å–ø–ª\.: {m_conf_flash['limit_if_no_subscription']} –∑/–¥\)")
    m_conf_pro = AVAILABLE_TEXT_MODELS['custom_api_gemini_2_5_pro']
    pro_free_text = f"{m_conf_pro['limit_if_no_subscription']} {escape_markdown('–≥–µ–Ω–µ—Ä–∞—Ü–∏–π (–±–æ–Ω—É—Å –∑–∞ –Ω–æ–≤–æ—Å—Ç–∏)', version=2)}" if m_conf_pro['limit_if_no_subscription'] == 0 else f"{m_conf_pro['limit_if_no_subscription']} –∑/–¥"
    text_parts.append(f"üåü {escape_markdown(m_conf_pro['name'], version=2)}: *{m_conf_pro['subscription_daily_limit']}* –∑/–¥ \(–±–µ—Å–ø–ª\.: {pro_free_text}\)")
    text_parts.append(f"\n–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞:\n‚ö°Ô∏è {escape_markdown(AVAILABLE_TEXT_MODELS['google_gemini_2_0_flash']['name'], version=2)}: *{DEFAULT_FREE_REQUESTS_GOOGLE_FLASH_DAILY}* –∑/–¥ \(–±–µ—Å–ø–ª\.\)")
    text_parts.extend(["\n‚ú® *–¢–∞—Ä–∏—Ñ –ü—Ä–æ—Ñ–∏ –¥–ª—è —Ç–µ—Å—Ç–∞:*", f"‚ñ´Ô∏è –¢–µ—Å—Ç-–¥—Ä–∞–π–≤ \(2 –¥–Ω—è\): `{escape_markdown('99 —Ä—É–±–ª–µ–π', version=2)}`"])
    
    keyboard = [[InlineKeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –ü—Ä–æ—Ñ–∏ (2 –¥–Ω—è - 99 RUB)", callback_data="buy_profi_2days")]]
    reply_markup = InlineKeyboardMarkup(keyboard + generate_menu_keyboard("subscription_submenu", context).inline_keyboard)
    final_text_subscribe = "\n".join(text_parts)
    
    try:
        if message_to_edit:
            await message_to_edit.edit_text(final_text_subscribe, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=reply_markup, disable_web_page_preview=True)
        else:
            await update.message.reply_text(final_text_subscribe, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=reply_markup, disable_web_page_preview=True)
    except telegram.error.BadRequest:
        plain_text = "–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏: ... (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)"
        if message_to_edit:
            await message_to_edit.edit_text(plain_text, reply_markup=reply_markup, disable_web_page_preview=True)
        else:
            await update.message.reply_text(plain_text, reply_markup=reply_markup, disable_web_page_preview=True)

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE, message_to_edit: Optional[telegram.Message] = None):
    help_text_parts = [
        f"üëã –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–±–æ—Ç –Ω–∞ –±–∞–∑–µ –º–æ–¥–µ–ª–µ–π Gemini –æ—Ç Google\.",
        "\n*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:*",
        "ü§ñ *–†–µ–∂–∏–º—ã –ò–ò*: –í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê–Ω–∞–ª–∏—Ç–∏–∫, –®—É—Ç–Ω–∏–∫).",
        "‚öôÔ∏è *–ú–æ–¥–µ–ª–∏ –ò–ò*: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ –º–æ–¥–µ–ª—å (Gemini 2.0, 2.5 Pro –∏ –¥—Ä.).",
        "üìä *–õ–∏–º–∏—Ç—ã*: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.",
        f"üéÅ *–ë–æ–Ω—É—Å*: –ü–æ–ª—É—á–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ [–∫–∞–Ω–∞–ª]({NEWS_CHANNEL_LINK}).",
        "üíé *–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏*: –£–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç—ã.",
        "\nüí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –±–æ—Ç—É\!"
    ]
    final_help_text_md = "\n".join([escape_markdown(part, version=2) if not part.startswith("`") and not NEWS_CHANNEL_LINK in part else part for part in help_text_parts])
    reply_markup = generate_menu_keyboard("help_submenu", context)
    
    try:
        if message_to_edit:
            await message_to_edit.edit_text(final_help_text_md, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=reply_markup, disable_web_page_preview=True)
        else:
            await update.message.reply_text(final_help_text_md, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=reply_markup, disable_web_page_preview=True)
    except telegram.error.BadRequest as e:
        logger.error(f"Error sending help: {e}")
        plain_help_text = ["–Ø –ò–ò-–±–æ—Ç Gemini. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é:", "- –†–µ–∂–∏–º—ã –ò–ò: –í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞.", "- –ú–æ–¥–µ–ª–∏ –ò–ò: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ –º–æ–¥–µ–ª—å.",
                           "- –õ–∏–º–∏—Ç—ã: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å—ã.", f"- –ë–æ–Ω—É—Å: –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {NEWS_CHANNEL_LINK}.", "- –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏: –£–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç—ã.", "\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."]
        if message_to_edit:
            await message_to_edit.edit_text("\n".join(plain_help_text), reply_markup=reply_markup, disable_web_page_preview=True)
        else:
            await update.message.reply_text("\n".join(plain_help_text), reply_markup=reply_markup, disable_web_page_preview=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    message_to_edit = query.message
    new_text = ""
    plain_fallback = ""

    if data.startswith("menu_"):
        action = data.split("_")[1]
        target = "_".join(data.split("_")[2:])
        
        if action == "submenu":
            await show_menu(update, context, target, message_to_edit)
            return
        
        elif action == "set_agent":
            if target in AI_MODES and target != "gemini_pro_custom_mode":
                context.user_data['current_ai_mode'] = target
                details = AI_MODES[target]
                new_text = f"ü§ñ –ê–≥–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: *{escape_markdown(details['name'], version=2)}*\n\n{escape_markdown(details['welcome'], version=2)}"
                plain_fallback = f"–ê–≥–µ–Ω—Ç: {details['name']}.\n{details['welcome']}"
            elif target == "gemini_pro_custom_mode":
                new_text = escape_markdown("–≠—Ç–æ—Ç —Ä–µ–∂–∏–º –¥–ª—è Gemini 2.5 Pro –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.", version=2)
                plain_fallback = "–†–µ–∂–∏–º –¥–ª—è Gemini 2.5 Pro –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            else:
                new_text = plain_fallback = "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
            reply_markup = generate_menu_keyboard("ai_modes_submenu", context)
        
        elif action == "set_model":
            if target in AVAILABLE_TEXT_MODELS:
                config = AVAILABLE_TEXT_MODELS[target]
                context.user_data['selected_model_id'] = config["id"]
                context.user_data['selected_api_type'] = config["api_type"]
                today_str = datetime.now().strftime("%Y-%m-%d")
                user_model_counts = context.bot_data.get('all_user_daily_counts', {}).get(user_id, {})
                model_daily_usage = user_model_counts.get(target, {'date': '', 'count': 0})
                current_c_display = model_daily_usage['count'] if model_daily_usage['date'] == today_str else 0
                actual_l = get_user_actual_limit_for_model(user_id, target, context)
                limit_str = f'–í–∞—à –ª–∏–º–∏—Ç –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏: {current_c_display}/{actual_l} –≤ –¥–µ–Ω—å'
                new_text = f"‚öôÔ∏è –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: *{escape_markdown(config['name'], version=2)}*\n{escape_markdown(limit_str, version=2)}"
                plain_fallback = f"–ú–æ–¥–µ–ª—å: {config['name']}. {limit_str}."
            else:
                new_text = plain_fallback = "‚ö†Ô∏è –û—à–∏–±–∫–∞: –¢–∞–∫–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            reply_markup = generate_menu_keyboard("models_submenu", context)
        
        elif action == "show_limits":
            await show_limits(update, context, message_to_edit)
            return
        
        elif action == "check_bonus":
            await claim_news_bonus_logic(update, context, called_from_button=True, message_to_edit=message_to_edit)
            return
        
        elif action == "show_subscription":
            await show_subscription(update, context, message_to_edit)
            return
        
        elif action == "show_help":
            await show_help(update, context, message_to_edit)
            return
        
        elif action == "back":
            await show_menu(update, context, target, message_to_edit)
            return
        
        elif action == "goto" and target == "main_menu":
            await show_menu(update, context, "main_menu", message_to_edit)
            return

    elif data == "buy_profi_2days":
        await buy_button_handler(update, context)
        return

    if new_text and message_to_edit:
        try:
            await message_to_edit.edit_text(text=new_text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=reply_markup, disable_web_page_preview=True)
        except telegram.error.BadRequest:
            try:
                await message_to_edit.edit_text(text=plain_fallback, reply_markup=reply_markup, disable_web_page_preview=True)
            except Exception as e_pf:
                logger.error(f"Fallback edit failed in button_callback: {e_pf}")

async def buy_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    if not PAYMENT_PROVIDER_TOKEN or "YOUR_REAL_PAYMENT_PROVIDER_TOKEN_HERE" in PAYMENT_PROVIDER_TOKEN:
        await query.message.reply_text("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=get_main_reply_keyboard())
        return
    prices = [LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ (2 –¥–Ω—è)", amount=99 * 100)]
    try:
        await context.bot.send_invoice(chat_id=user_id, title="–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ (2 –¥–Ω—è)",
            description="–î–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ª–∏–º–∏—Ç–∞–º Gemini –Ω–∞ 2 –¥–Ω—è.",
            payload=f"profi_2days_uid{user_id}_t{int(datetime.now().timestamp())}",
            provider_token=PAYMENT_PROVIDER_TOKEN, currency="RUB", prices=prices)
        await query.edit_message_reply_markup(reply_markup=None)
    except Exception as e:
        logger.error(f"Error sending invoice to user {user_id}: {e}")
        await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    if query.invoice_payload.startswith("profi_2days_uid"): await query.answer(ok=True)
    else: await query.answer(ok=False, error_message="–ü–ª–∞—Ç–µ–∂ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    payment = update.message.successful_payment
    if payment.invoice_payload.startswith("profi_2days_uid"):
        valid_until = (datetime.now() + timedelta(days=2)).isoformat()
        context.bot_data.setdefault('user_subscriptions', {})[user_id] = {
            'level': PRO_SUBSCRIPTION_LEVEL_KEY, 'valid_until': valid_until,
            'purchase_date': datetime.now().isoformat(), 'payload': payment.invoice_payload,
            'amount': payment.total_amount, 'currency': payment.currency
        }
        await update.message.reply_text(
            f"üéâ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {datetime.fromisoformat(valid_until):%Y-%m-%d %H:%M}\.\n–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã!",
            parse_mode=ParseMode.MARKDOWN_V2, reply_markup=get_main_reply_keyboard())
    else:
        await update.message.reply_text("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.", reply_markup=get_main_reply_keyboard())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user_id = update.effective_user.id
    if not user_message or not user_message.strip():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.", reply_markup=get_main_reply_keyboard())
        return

    current_model_key = get_current_model_key(context)
    selected_model_details = AVAILABLE_TEXT_MODELS[current_model_key]
    system_prompt = get_current_mode_details(context)["prompt"]

    can_request, limit_message_text, _ = check_and_log_request_attempt(user_id, current_model_key, context)
    if not can_request:
        await update.message.reply_text(limit_message_text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=get_main_reply_keyboard(), disable_web_page_preview=True)
        return

    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    reply_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
    request_successful = False
    api_type = selected_model_details.get("api_type")

    if api_type == "google_genai":
        if not GOOGLE_GEMINI_API_KEY or "YOUR_GOOGLE_GEMINI_API_KEY" in GOOGLE_GEMINI_API_KEY or "AIzaSy" not in GOOGLE_GEMINI_API_KEY:
            reply_text = "–ö–ª—é—á API –¥–ª—è Google Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
        else:
            try:
                model_id = selected_model_details["id"]
                model = genai.GenerativeModel(model_id)
                gen_config_params = {"temperature": 0.75}
                if MAX_OUTPUT_TOKENS_GEMINI_LIB > 0 and not any(s_id in model_id for s_id in ["1.5", "2.0"]):
                     gen_config_params["max_output_tokens"] = MAX_OUTPUT_TOKENS_GEMINI_LIB
                
                chat_session = model.start_chat(history=[{"role": "user", "parts": [system_prompt]}, {"role": "model", "parts": ["–ü–æ–Ω—è–ª. –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å."]}])
                response = await chat_session.send_message_async(user_message, generation_config=genai.types.GenerationConfig(**gen_config_params))
                
                if response.text and response.text.strip():
                    reply_text = response.text
                    request_successful = True
                else: 
                    block_reason_msg = ""
                    if hasattr(response, 'prompt_feedback') and response.prompt_feedback and response.prompt_feedback.block_reason:
                        block_reason_msg = f" –ü—Ä–∏—á–∏–Ω–∞: {response.prompt_feedback.block_reason.name if hasattr(response.prompt_feedback.block_reason, 'name') else response.prompt_feedback.block_reason}."
                    if response.candidates and not response.text: 
                         candidate = response.candidates[0]
                         if candidate.finish_reason != 1: 
                              block_reason_msg += f" –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {candidate.finish_reason.name if hasattr(candidate.finish_reason, 'name') else candidate.finish_reason}."
                         if candidate.safety_ratings:
                             block_reason_msg += f" –†–µ–π—Ç–∏–Ω–≥–∏: {[(sr.category.name if hasattr(sr.category, 'name') else sr.category, sr.probability.name if hasattr(sr.probability, 'name') else sr.probability) for sr in candidate.safety_ratings]}."
                    reply_text = f"–ò–ò (Google) –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç.{block_reason_msg} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
            except google.api_core.exceptions.GoogleAPIError as e_google:
                error_message_lower = str(e_google).lower()
                if "api key not valid" in error_message_lower: reply_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞: API –∫–ª—é—á Google –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω."
                elif "billing" in error_message_lower: reply_text = "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∏–ª–ª–∏–Ω–≥–æ–º Google API."
                elif "quota" in error_message_lower or "resource has been exhausted" in error_message_lower: reply_text = "‚ö†Ô∏è –ò—Å—á–µ—Ä–ø–∞–Ω–∞ –∫–≤–æ—Ç–∞ Google API."
                elif "user location" in error_message_lower: reply_text = "‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ (Google API)."
                elif "model not found" in error_message_lower: reply_text = f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å '{selected_model_details['id']}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Google API."
                else: reply_text = f"–û—à–∏–±–∫–∞ Google API: {type(e_google).__name__}"
                logger.error(f"GoogleAPIError for {selected_model_details['id']}: {e_google}")
            except Exception as e_general_google:
                logger.error(f"General Google error for {selected_model_details['id']}: {e_general_google}\n{traceback.format_exc()}")
                reply_text = "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (Google Gemini)."

    elif api_type == "custom_http_api":
        api_key_val = globals().get(selected_model_details.get("api_key_var_name"))
        if not api_key_val or ("sk-" not in api_key_val and "pk-" not in api_key_val):
            reply_text = f"‚ö†Ô∏è –ö–ª—é—á API –¥–ª—è '{selected_model_details['name']}' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
        else:
            payload = {"model": selected_model_details["id"], "messages": [{"role": "user", "content": system_prompt}, {"role": "user", "content": user_message}],
                       "is_sync": True, "temperature": 0.75, "stream": False}
            headers = {'Content-Type': 'application/json', 'Accept': 'application/json', 'Authorization': f'Bearer {api_key_val}'}
            try:
                api_response = requests.post(selected_model_details["endpoint"], json=payload, headers=headers, timeout=90)
                api_response.raise_for_status()
                response_data = api_response.json()
                if (resp_list := response_data.get("response")) and isinstance(resp_list, list) and resp_list:
                    if (msg_content := resp_list[0].get("message", {}).get("content")):
                        reply_text = msg_content
                        request_successful = True
                    else: reply_text = f"‚ö†Ô∏è –ò–ò ({selected_model_details['name']}) –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."
                elif (error_detail_msg := response_data.get("detail")):
                     reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Custom API: {str(error_detail_msg)[:200]}"
                else: reply_text = f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Custom API ({selected_model_details['name']})."
            except requests.exceptions.HTTPError as e_http_custom:
                status_code = e_http_custom.response.status_code
                if status_code == 401: reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á (Custom API)."
                elif status_code == 402: reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 402: –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π (Custom API)."
                elif status_code == 429: reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 429: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (Custom API)."
                else: reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ ({status_code}) –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ '{selected_model_details['name']}'."
                logger.error(f"HTTPError Custom API {selected_model_details['name']}: {e_http_custom}")
            except Exception as e_general_custom:
                logger.error(f"Error Custom API {selected_model_details['name']}: {e_general_custom}\n{traceback.format_exc()}")
                reply_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç '{selected_model_details['name']}'."
    else: reply_text = f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø API: {api_type}"

    if request_successful and selected_model_details.get("is_limited"):
        increment_request_count(user_id, current_model_key, context)
            
    reply_text_final, _ = smart_truncate(reply_text, MAX_MESSAGE_LENGTH_TELEGRAM)
    await update.message.reply_text(reply_text_final, reply_markup=get_main_reply_keyboard())

async def set_bot_commands(application: Application):
    commands = [
        BotCommand("start", "üöÄ –ù–∞—á–∞–ª–æ"),
        BotCommand("menu", "üìã –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
        BotCommand("usage", "üìä –õ–∏–º–∏—Ç—ã"),
        BotCommand("subscribe", "üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏"),
        BotCommand("get_news_bonus", "üéÅ –ë–æ–Ω—É—Å"),
        BotCommand("help", "‚ùì –ü–æ–º–æ—â—å"),
    ]
    try: await application.bot.set_my_commands(commands)
    except Exception as e: logger.error(f"Failed to set bot commands: {e}")

async def main():
    if "YOUR_TELEGRAM_TOKEN" in TOKEN or not TOKEN or len(TOKEN.split(":")[0]) < 8 :
        logger.critical("CRITICAL: TELEGRAM_TOKEN is not set correctly or is a placeholder.")
        return
    
    persistence = PicklePersistence(filepath="bot_data.pkl")
    application = Application.builder().token(TOKEN).persistence(persistence).build()
    await set_bot_commands(application)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", open_menu_command))
    application.add_handler(CommandHandler("usage", usage_command))
    application.add_handler(CommandHandler("subscribe", subscribe_info_command))
    application.add_handler(CommandHandler("get_news_bonus", get_news_bonus_info_command))
    application.add_handler(CommandHandler("help", help_command))

    application.add_handler(MessageHandler(filters.Text(["üìã –ú–µ–Ω—é"]), open_menu_command))
    
    application.add_handler(CallbackQueryHandler(button_callback))

    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("Starting bot application...")
    try: await application.run_polling()
    except Exception as e: logger.critical(f"Polling error: {e}\n{traceback.format_exc()}")

if __name__ == "__main__":
    try: asyncio.run(main())
    except KeyboardInterrupt: logger.info("Bot stopped by user.")
    except Exception as e: logger.critical(f"main() error: {e}\n{traceback.format_exc()}")
