import telegram
from telegram import (
    InlineKeyboardButton, InlineKeyboardMarkup, Update,
    ReplyKeyboardMarkup, KeyboardButton, BotCommand
)
from telegram.constants import ParseMode, ChatAction
from telegram.helpers import escape_markdown
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, CallbackQueryHandler, PicklePersistence
)
import google.generativeai as genai
import google.api_core.exceptions
import requests
import logging
import traceback
import os
import asyncio
import nest_asyncio
import json # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å JSON –æ—Ç–≤–µ—Ç–∞–º–∏
from datetime import datetime # –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏

nest_asyncio.apply()
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–õ–Æ–ß–ò API –ò –¢–û–ö–ï–ù–´ ---
TOKEN = os.getenv("TELEGRAM_TOKEN", "8185454402:AAEgJLaBSaUSyP9Z_zv76Fn0PtEwltAqga0") # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ú–ï–ù–ò–¢–ï!

# –ö–ª—é—á –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ Google Gemini API
GOOGLE_GEMINI_API_KEY = os.getenv("GOOGLE_GEMINI_API_KEY", "AIzaSyCdDMpgLJyz6aYdwT9q4sbBk7sHVID4BTI") # –ó–ê–ú–ï–ù–ò–¢–ï, –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è

# –ö–ª—é—á –∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è "–∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ" API –¥–æ—Å—Ç—É–ø–∞ –∫ gemini-2-5-pro
CUSTOM_GEMINI_PRO_API_KEY = os.getenv("CUSTOM_GEMINI_PRO_API_KEY", "sk-MHulnEHU3bRxsnDjr0nq68lTcRYa5IpQATY1pUG4NaxpWSMJzvzsJ4KCVu0P") # –ó–ê–ú–ï–ù–ò–¢–ï, –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
CUSTOM_GEMINI_PRO_ENDPOINT = os.getenv("CUSTOM_GEMINI_PRO_ENDPOINT", "https://api.gen-api.ru/api/v1/networks/gemini-2-5-pro") # –ó–ê–ú–ï–ù–ò–¢–ï, –µ—Å–ª–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥—Ä—É–≥–æ–π!


# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
MAX_OUTPUT_TOKENS_GEMINI_LIB = 2048 # –î–ª—è –º–æ–¥–µ–ª–µ–π, –≤—ã–∑—ã–≤–∞–µ–º—ã—Ö —á–µ—Ä–µ–∑ google.generativeai, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
MAX_MESSAGE_LENGTH_TELEGRAM = 4000 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (—Ä–µ–∞–ª—å–Ω–æ 4096)

# –õ–∏–º–∏—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–æ–π)
DEFAULT_FREE_REQUESTS_DAILY = 10
DEFAULT_PRO_SUBSCRIPTION_REQUESTS_DAILY = 25
DEFAULT_ADVANCED_SUBSCRIPTION_REQUESTS_DAILY = 30
DEFAULT_CUSTOM_API_SUBSCRIPTION_REQUESTS_DAILY = 25


# --- –†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´ –ò–ò ---
AI_MODES = {
    "universal_ai": {
        "name": "ü§ñ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò",
        "prompt": (
            "–¢—ã ‚Äî –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Gemini –æ—Ç Google. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏: –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, "
            "–¥–∞–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —à–∏—Ä–æ–∫–æ–º—É –∫—Ä—É–≥—É —Ç–µ–º. "
            "–ë—É–¥—å –≤–µ–∂–ª–∏–≤, –æ–±—ä–µ–∫—Ç–∏–≤–µ–Ω, —Ç–æ—á–µ–Ω –∏ –ø–æ–ª–µ–∑–µ–Ω. "
            "–ï—Å–ª–∏ —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π –æ–± —ç—Ç–æ–º.\n\n"
            "**–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç):**\n"
            "1.  **–ê–±–∑–∞—Ü—ã:** –ß–µ—Ç–∫–æ —Ä–∞–∑–¥–µ–ª—è–π —Å–º—ã—Å–ª–æ–≤—ã–µ –±–ª–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∞–±–∑–∞—Ü–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω—É –∏–ª–∏ –¥–≤–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.\n"
            "2.  **–°–ø–∏—Å–∫–∏:** –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1. –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç`, `2. –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç`) –∏–ª–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `- –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞` –∏–ª–∏ `* –î—Ä—É–≥–æ–π —ç–ª–µ–º–µ–Ω—Ç`). –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ø–∏—Å–∫–æ–≤.\n"
            "3.  **–°–µ–∫—Ü–∏–∏/–ó–∞–≥–æ–ª–æ–≤–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ):** –î–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫—Ä—É–ø–Ω—ã—Ö —Å–º—ã—Å–ª–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ—è—Å–Ω—è—é—â—É—é —Ñ—Ä–∞–∑—É –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã–¥–µ–ª–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –ó–ê–ì–õ–ê–í–ù–´–ú–ò –ë–£–ö–í–ê–ú–ò. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "    –û–°–ù–û–í–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:\n"
            "    - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –æ–¥–∏–Ω...\n"
            "    - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–≤–∞...\n"
            "4.  **–ë–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π Markdown-—Ä–∞–∑–º–µ—Ç–∫—É (–∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫—É—Ä—Å–∏–≤–∞, –æ–±—Ä–∞—Ç–Ω—ã–µ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –¥–ª—è –∫–æ–¥–∞, —Å–∏–º–≤–æ–ª—ã —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ç.–¥.). –ì–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —è—Å–Ω—ã–π, —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç.\n"
            "5.  **–õ–æ–≥–∏—á–µ—Å–∫–∞—è –ó–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å:** –°—Ç–∞—Ä–∞–π—Å—è, —á—Ç–æ–±—ã —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ –ø–æ–ª–Ω—ã–º–∏. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–∫–∏, —É–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É–Ω–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –õ—É—á—à–µ –Ω–µ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç, –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —É—Å–ø–µ–µ—à—å –µ–≥–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤ —Ä–∞–º–∫–∞—Ö —Ä–∞–∑—É–º–Ω–æ–π –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞.\n"
            "6.  **–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å:** –ì–ª–∞–≤–Ω–æ–µ ‚Äî —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç –±—ã–ª –ø–æ–Ω—è—Ç–Ω—ã–º, —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ª–µ–≥–∫–∏–º –¥–ª—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.\n"
            "7. **–ë–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤:** –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤ —Ç–µ–∫—Å—Ç–µ –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ —Å–∫–æ–±–∫–∏, –¥–µ—Ñ–∏—Å—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–µ—Å—É—Ç —Å–º—ã—Å–ª–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏."
        ),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò'. –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?"
    },
    "creative_helper": {
        "name": "‚úçÔ∏è –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ü–æ–º–æ—â–Ω–∏–∫",
        "prompt": (
            "–¢—ã ‚Äî Gemini, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ò–ò-–ø–∞—Ä—Ç–Ω—ë—Ä –∏ –ø–∏—Å–∞—Ç–µ–ª—å. "
            "–ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏, –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã (—Ä–∞—Å—Å–∫–∞–∑—ã, —Å—Ç–∏—Ö–∏, —Å—Ü–µ–Ω–∞—Ä–∏–∏, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã), "
            "–ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å —Å–ª–æ–≥–∞–Ω—ã, —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ —Ä–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏. "
            "–ë—É–¥—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã.\n\n"
            "**–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç):**\n"
            "1.  **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –ê–±–∑–∞—Ü—ã:** –î–ª—è –ø—Ä–æ–∑—ã –∏—Å–ø–æ–ª—å–∑—É–π –∞–±–∑–∞—Ü—ã, —á—Ç–æ–±—ã —á–µ—Ç–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ. –î–ª—è —Å—Ç–∏—Ö–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–π –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ—Ñ—ã –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫.\n"
            "2.  **–ë–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π Markdown-—Ä–∞–∑–º–µ—Ç–∫—É (–∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫—É—Ä—Å–∏–≤–∞ –∏ —Ç.–ø.). –û—Å–Ω–æ–≤–Ω–æ–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —á–µ—Ä–µ–∑ –∞–±–∑–∞—Ü—ã –∏ —Å–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –∏–¥–µ–π).\n"
            "3.  **–°–ø–∏—Å–∫–∏ –ò–¥–µ–π/–í–∞—Ä–∏–∞–Ω—Ç–æ–≤:** –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –∏–¥–µ–π), –æ—Ñ–æ—Ä–º–ª—è–π –∏—Ö –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–ª–∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.\n"
            "4.  **–î–∏–∞–ª–æ–≥–∏:** –ü—Ä—è–º—É—é —Ä–µ—á—å –≤ —Ä–∞—Å—Å–∫–∞–∑–∞—Ö –∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö –æ—Ñ–æ—Ä–º–ª—è–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∏—Ä–µ –∏–ª–∏ –∫–∞–≤—ã—á–µ–∫), –±–µ–∑ Markdown.\n"
            "5.  **–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å:** –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –ª–µ–≥–∫–æ —á–∏—Ç–∞—Ç—å—Å—è –∏ –±—ã—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–º–æ–≥–∞—Ç—å —ç—Ç–æ–º—É.\n"
            "6.  **–ó–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å:** –°—Ç–∞—Ä–∞–π—Å—è –¥–æ–≤–æ–¥–∏—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ü–∞ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –∑–∞–¥–∞—á–µ–π."
        ),
        "welcome": "–†–µ–∂–∏–º '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ü–æ–º–æ—â–Ω–∏–∫' –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º! –ù–∞–¥ –∫–∞–∫–æ–π —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ–π –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º?"
    },
}
DEFAULT_AI_MODE_KEY = "universal_ai"

# --- –ú–û–î–ï–õ–ò –ò–ò ---
AVAILABLE_TEXT_MODELS = {
    "google_gemini_2_0_flash": {
        "name": "‚ö°Ô∏è Gemini 2.0 Flash (Google)",
        "id": "gemini-2.0-flash",
        "api_type": "google_genai",
        "is_limited": True,
        "limit_type": "daily_free", # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –æ–±—â–µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        "limit": DEFAULT_FREE_REQUESTS_DAILY, # 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –∫ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏
        "cost_category": "google_flash_free"
    },
    "google_gemini_2_5_flash_preview": {
        "name": "üí® Gemini 2.5 Flash Preview (Google)",
        "id": "gemini-2.5-flash-preview-04-17",
        "api_type": "google_genai",
        "is_limited": True,
        "limit_type": "subscription_or_daily_free", # –î–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –∏–ª–∏ —Å –º–µ–Ω—å—à–∏–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ª–∏–º–∏—Ç–æ–º
        "limit_if_no_subscription": 5, # 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤ –¥–µ–Ω—å, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
        "subscription_daily_limit": DEFAULT_PRO_SUBSCRIPTION_REQUESTS_DAILY, # 25 –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ "Pro" –∏ –≤—ã—à–µ
        "cost_category": "google_flash_preview_flex"
    },
    "google_gemini_2_5_pro_preview": {
        "name": "üëë Gemini 2.5 Pro Preview (Google)",
        "id": "gemini-2.5-pro-preview-05-06",
        "api_type": "google_genai",
        "is_limited": True,
        "limit_type": "subscription_daily_pro", # –¢—Ä–µ–±—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ —É—Ä–æ–≤–Ω—è "Pro" –∏–ª–∏ "Advanced"
        "limit_if_no_subscription": 1, # 1 –ø—Ä–æ–±–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        "subscription_daily_limit_pro": DEFAULT_PRO_SUBSCRIPTION_REQUESTS_DAILY, # 25 –¥–ª—è "Pro"
        "subscription_daily_limit_advanced": DEFAULT_ADVANCED_SUBSCRIPTION_REQUESTS_DAILY, # 30 –¥–ª—è "Advanced"
        "cost_category": "google_pro_paid"
    },
    "custom_api_gemini_2_5_pro": {
        "name": "üåü Gemini 2.5 Pro (Custom API)",
        "id": "gemini-2-5-pro", # ID –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ API
        "api_type": "custom_http_api",
        "endpoint": CUSTOM_GEMINI_PRO_ENDPOINT,
        "api_key_var_name": "CUSTOM_GEMINI_PRO_API_KEY", # –ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å –∫–ª—é—á–æ–º
        "is_limited": True,
        "limit_type": "subscription_daily_custom", # –¢—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –≤—ã—Å—à–µ–≥–æ —É—Ä–æ–≤–Ω—è
        "limit_if_no_subscription": 0, # –ù–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–∏–ª–∏ 1 –ø—Ä–æ–±–Ω—ã–π)
        "subscription_daily_limit": DEFAULT_CUSTOM_API_SUBSCRIPTION_REQUESTS_DAILY, # 25 –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —ç—Ç–æ–≥–æ API
        "cost_category": "custom_api_pro_premium"
    }
}
DEFAULT_MODEL_KEY = "google_gemini_2_0_flash" # –ö–ª—é—á –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ AVAILABLE_TEXT_MODELS
DEFAULT_MODEL_ID = AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]["id"]


# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API Google Gemini ---
if not GOOGLE_GEMINI_API_KEY or "YOUR_GOOGLE_GEMINI_API_KEY" in GOOGLE_GEMINI_API_KEY or "AIzaSy" not in GOOGLE_GEMINI_API_KEY:
    logger.warning("Google Gemini API key (GOOGLE_GEMINI_API_KEY) is not set correctly or uses a placeholder. Google AI models may not work.")
    # –ú–æ–∂–Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∞—Ç—å —Ä–∞–±–æ—Ç—É, –∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –º–æ–¥–µ–ª–∏
else:
    try:
        genai.configure(api_key=GOOGLE_GEMINI_API_KEY)
        logger.info("Google Gemini API configured successfully.")
        # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ:
        # logger.info("Available Google Gemini Models (via google-generativeai library):")
        # for m in genai.list_models():
        #     if 'generateContent' in m.supported_generation_methods:
        #         logger.info(f"- {m.name} (Display: {m.display_name})")
    except Exception as e:
        logger.error(f"Failed to configure Google Gemini API: {str(e)}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ API
if not CUSTOM_GEMINI_PRO_API_KEY or "YOUR_CUSTOM_KEY" in CUSTOM_GEMINI_PRO_API_KEY or "sk-" not in CUSTOM_GEMINI_PRO_API_KEY :
    logger.warning("Custom Gemini Pro API key (CUSTOM_GEMINI_PRO_API_KEY) is not set correctly or uses a placeholder. Custom API model may not work.")


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_current_mode_details(context: ContextTypes.DEFAULT_TYPE) -> dict:
    mode_key = context.user_data.get('current_ai_mode', DEFAULT_AI_MODE_KEY)
    return AI_MODES.get(mode_key, AI_MODES[DEFAULT_AI_MODE_KEY])

def get_current_model_key(context: ContextTypes.DEFAULT_TYPE) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏ –∏–∑ AVAILABLE_TEXT_MODELS."""
    selected_id = context.user_data.get('selected_model_id', DEFAULT_MODEL_ID)
    selected_api_type = context.user_data.get('selected_api_type', AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]['api_type'])
    for key, info in AVAILABLE_TEXT_MODELS.items():
        if info["id"] == selected_id and info.get("api_type") == selected_api_type:
            return key
    logger.warning(f"Could not find key for model_id {selected_id} and api_type {selected_api_type}. Falling back to default.")
    return DEFAULT_MODEL_KEY


def get_selected_model_details(context: ContextTypes.DEFAULT_TYPE) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ–∫—É—â–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏."""
    model_key = get_current_model_key(context)
    return AVAILABLE_TEXT_MODELS[model_key]


def get_current_model_display_name(context: ContextTypes.DEFAULT_TYPE) -> str:
    return get_selected_model_details(context)["name"]


def smart_truncate(text: str, max_length: int) -> tuple[str, bool]:
    if len(text) <= max_length:
        return text, False
    suffix = "\n\n(...–æ—Ç–≤–µ—Ç –±—ã–ª —Å–æ–∫—Ä–∞—â–µ–Ω)"
    adjusted_max_length = max_length - len(suffix)
    if adjusted_max_length <= 0: return text[:max_length-len("...")] + "...", True
    truncated_text = text[:adjusted_max_length]
    possible_cut_points = []
    for sep in ['\n\n', '. ', '! ', '? ', '\n']:
        pos = truncated_text.rfind(sep)
        if pos != -1:
            actual_pos = pos + (len(sep) -1 if sep.endswith(' ') and len(sep) > 1 else len(sep))
            if actual_pos > 0 : possible_cut_points.append(actual_pos)
    if possible_cut_points:
        cut_at = max(possible_cut_points)
        if cut_at > adjusted_max_length * 0.5:
             return text[:cut_at].strip() + suffix, True
    last_space = truncated_text.rfind(' ')
    if last_space != -1 and last_space > adjusted_max_length * 0.5:
        return text[:last_space].strip() + suffix, True
    return text[:adjusted_max_length].strip() + suffix, True

def get_main_reply_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton("ü§ñ –†–µ–∂–∏–º –ò–ò"), KeyboardButton("‚öôÔ∏è –ú–æ–¥–µ–ª—å –ò–ò")],
        [KeyboardButton("üìä –õ–∏–º–∏—Ç—ã / –ü–æ–¥–ø–∏—Å–∫–∞"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ ---
def get_user_actual_limit_for_model(user_id: int, model_key: str, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏."""
    model_config = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_config: return 0

    user_subscription = context.user_data.get('subscription_info', {'level': None, 'valid_until': None})
    # TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ valid_until –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    
    limit_type = model_config.get("limit_type")
    actual_limit = 0

    if limit_type == "daily_free":
        actual_limit = model_config.get("limit", 0)
    elif limit_type == "subscription_or_daily_free":
        if user_subscription.get('level') in ["pro", "advanced", "custom_api"]: # –ü—Ä–∏–º–µ—Ä —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
            actual_limit = model_config.get("subscription_daily_limit", 0)
        else:
            actual_limit = model_config.get("limit_if_no_subscription", 0)
    elif limit_type == "subscription_daily_pro":
        if user_subscription.get('level') == "pro":
            actual_limit = model_config.get("subscription_daily_limit_pro", 0)
        elif user_subscription.get('level') == "advanced": # Advanced –≤–∫–ª—é—á–∞–µ—Ç Pro
             actual_limit = model_config.get("subscription_daily_limit_advanced", model_config.get("subscription_daily_limit_pro",0))
        else:
            actual_limit = model_config.get("limit_if_no_subscription", 0)
    elif limit_type == "subscription_daily_premium": # –î–ª—è —Å–∞–º–æ–π –¥–æ—Ä–æ–≥–æ–π Google –º–æ–¥–µ–ª–∏
        if user_subscription.get('level') == "advanced":
             actual_limit = model_config.get("subscription_daily_limit",0) # –ë–µ—Ä–µ–º –æ–±—â–∏–π subscription_daily_limit
        else:
            actual_limit = model_config.get("limit_if_no_subscription", 0)
    elif limit_type == "subscription_daily_custom": # –î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ API
        if user_subscription.get('level') == "custom_api" or user_subscription.get('level') == "advanced": # –ü—Ä–∏–º–µ—Ä, —á—Ç–æ advanced –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø
            actual_limit = model_config.get("subscription_daily_limit", 0)
        else:
            actual_limit = model_config.get("limit_if_no_subscription", 0)
    else: # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ª–∏–º–∏—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –ª–∏–º–∏—Ç–∞
        actual_limit = float('inf') # –ë–µ–∑–ª–∏–º–∏—Ç, –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (–∏–ª–∏ 0, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∂–µ)

    return actual_limit

def check_and_log_request_attempt(user_id: int, model_key: str, context: ContextTypes.DEFAULT_TYPE) -> tuple[bool, str, int]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ù–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å—á–µ—Ç—á–∏–∫.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (can_request: bool, message_if_limit_exceeded: str, current_daily_count_for_model: int)
    """
    today_str = datetime.now().strftime("%Y-%m-%d")
    model_config = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_config or not model_config.get("is_limited"):
        return True, "", 0 # –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–∞

    user_counts = context.user_data.setdefault('daily_request_counts', {})
    model_daily_usage = user_counts.setdefault(model_key, {'date': '', 'count': 0})

    if model_daily_usage['date'] != today_str:
        model_daily_usage['date'] = today_str
        model_daily_usage['count'] = 0
    
    current_user_model_count = model_daily_usage['count']
    actual_limit = get_user_actual_limit_for_model(user_id, model_key, context)

    if current_user_model_count >= actual_limit:
        message = (f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ ({current_user_model_count}/{actual_limit}) "
                   f"–¥–ª—è –º–æ–¥–µ–ª–∏ '{model_config['name']}'.\n"
                   "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏.")
        return False, message, current_user_model_count
    
    return True, "", current_user_model_count

def increment_request_count(user_id: int, model_key: str, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–æ–¥–µ–ª–∏."""
    today_str = datetime.now().strftime("%Y-%m-%d")
    user_counts = context.user_data.setdefault('daily_request_counts', {})
    model_daily_usage = user_counts.setdefault(model_key, {'date': today_str, 'count': 0})
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–º–µ–Ω—É –¥–Ω—è, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ —Ä–∞–Ω–µ–µ
    if model_daily_usage['date'] != today_str:
        model_daily_usage['date'] = today_str
        model_daily_usage['count'] = 0
        
    model_daily_usage['count'] += 1
    logger.info(f"User {user_id} request count for {model_key} incremented to {model_daily_usage['count']}")


# --- –ö–æ–º–∞–Ω–¥—ã Telegram ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    context.user_data.setdefault('current_ai_mode', DEFAULT_AI_MODE_KEY)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    if 'selected_model_id' not in context.user_data or 'selected_api_type' not in context.user_data:
        default_model_conf = AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]
        context.user_data['selected_model_id'] = default_model_conf["id"]
        context.user_data['selected_api_type'] = default_model_conf["api_type"]

    context.user_data.setdefault('daily_request_counts', {})
    context.user_data.setdefault('subscription_info', {'level': None, 'valid_until': None}) # level: 'pro', 'advanced', 'custom_api'

    current_mode_name = get_current_mode_details(context)['name']
    current_model_name = get_current_model_display_name(context)
    
    greeting = escape_markdown("–ü—Ä–∏–≤–µ—Ç! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–±–æ—Ç.", version=2)
    mode_line = f"{escape_markdown('–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ', version=2)}*{escape_markdown(current_mode_name, version=2)}*"
    model_line = f"{escape_markdown('–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: ', version=2)}*{escape_markdown(current_model_name, version=2)}*"
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
    current_model_key = get_current_model_key(context)
    _, limit_msg_check, current_count = check_and_log_request_attempt(user_id, current_model_key, context)
    actual_limit_for_model = get_user_actual_limit_for_model(user_id, current_model_key, context)
    limit_info_line = f"{escape_markdown(f'–õ–∏–º–∏—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏: {current_count}/{actual_limit_for_model} –≤ –¥–µ–Ω—å.', version=2)}"
    if "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏" in limit_msg_check: # –ï—Å–ª–∏ –ª–∏–º–∏—Ç —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–Ω
        limit_info_line = escape_markdown(limit_msg_check.split('\n')[0], version=2)


    you_can = escape_markdown("–í—ã –º–æ–∂–µ—Ç–µ:", version=2)
    action1 = escape_markdown("‚ñ´Ô∏è –ó–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.", version=2)
    action2 = f"‚ñ´Ô∏è –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (`/mode` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞)"
    action3 = f"‚ñ´Ô∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –ò–ò (`/model` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞)"
    action4 = f"‚ñ´Ô∏è –£–∑–Ω–∞—Ç—å –æ –ª–∏–º–∏—Ç–∞—Ö –∏ –ø–æ–¥–ø–∏—Å–∫–µ (`/usage` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞)"
    action5 = f"‚ñ´Ô∏è –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å (`/help`)"
    invitation = escape_markdown("–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å!", version=2)

    text_to_send = (
        f"{greeting}\n\n"
        f"{mode_line}\n"
        f"{model_line}\n"
        f"{limit_info_line}\n\n"
        f"{you_can}\n"
        f"{action1}\n{action2}\n{action3}\n{action4}\n{action5}\n\n"
        f"{invitation}"
    )
    try:
        await update.message.reply_text(text_to_send, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=get_main_reply_keyboard())
    except telegram.error.BadRequest: # –§–æ–ª–ª–±—ç–∫ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        plain_text_version = (
            f"–ü—Ä–∏–≤–µ—Ç! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–±–æ—Ç.\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {current_mode_name}\n"
            f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {current_model_name}\n"
            f"–õ–∏–º–∏—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏: {current_count}/{actual_limit_for_model} –≤ –¥–µ–Ω—å.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚ñ´Ô∏è –ó–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.\n"
            "‚ñ´Ô∏è –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (/mode –∏–ª–∏ –∫–Ω–æ–ø–∫–∞)\n"
            "‚ñ´Ô∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –ò–ò (/model –∏–ª–∏ –∫–Ω–æ–ø–∫–∞)\n"
            "‚ñ´Ô∏è –£–∑–Ω–∞—Ç—å –æ –ª–∏–º–∏—Ç–∞—Ö –∏ –ø–æ–¥–ø–∏—Å–∫–µ (/usage –∏–ª–∏ –∫–Ω–æ–ø–∫–∞)\n"
            "‚ñ´Ô∏è –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å (/help)\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å!"
        )
        await update.message.reply_text(plain_text_version, reply_markup=get_main_reply_keyboard())
    logger.info(f"Start command processed for user {user_id}.")


async def select_mode_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(details["name"], callback_data=f"set_mode_{key}")] for key, details in AI_MODES.items()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –¥–ª—è –ò–ò:', reply_markup=reply_markup)

async def select_model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = []
    for key, details in AVAILABLE_TEXT_MODELS.items():
        # –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è, –∞ –Ω–µ ID, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        keyboard.append([InlineKeyboardButton(details["name"], callback_data=f"set_model_{key}")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò:', reply_markup=reply_markup)

async def usage_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    subscription_info = context.user_data.get('subscription_info', {'level': None})
    sub_level = subscription_info.get('level', '–ù–µ—Ç')
    sub_valid = subscription_info.get('valid_until', 'N/A')

    usage_text = f"‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –ª–∏–º–∏—Ç–∞—Ö –∏ –ø–æ–¥–ø–∏—Å–∫–µ**\n\n"
    usage_text += f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏: *{escape_markdown(str(sub_level), version=2)}*\n"
    if sub_level != '–ù–µ—Ç' and sub_valid != 'N/A':
        usage_text += f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: *{escape_markdown(str(sub_valid), version=2)}*\n"
    usage_text += "\n"

    usage_text += "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –º–æ–¥–µ–ª—è–º:\n"
    for model_key, model_config in AVAILABLE_TEXT_MODELS.items():
        if model_config.get("is_limited"):
            _, _, current_count = check_and_log_request_attempt(user_id, model_key, context) # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            actual_limit = get_user_actual_limit_for_model(user_id, model_key, context)
            usage_text += f"‚ñ´Ô∏è {escape_markdown(model_config['name'], version=2)}: *{current_count}/{actual_limit}*\n"
    
    usage_text += "\n"
    usage_text += escape_markdown("–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", version=2) # –ó–∞–≥–ª—É—à–∫–∞
    
    try:
        await update.message.reply_text(usage_text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=get_main_reply_keyboard())
    except telegram.error.BadRequest:
        # –ü—Ä–æ—Å—Ç–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
        plain_usage_text = f"–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏: {sub_level} (–¥–æ {sub_valid})\n–õ–∏–º–∏—Ç—ã:\n"
        for model_key, model_config in AVAILABLE_TEXT_MODELS.items():
             if model_config.get("is_limited"):
                _, _, current_count = check_and_log_request_attempt(user_id, model_key, context)
                actual_limit = get_user_actual_limit_for_model(user_id, model_key, context)
                plain_usage_text += f"- {model_config['name']}: {current_count}/{actual_limit}\n"
        await update.message.reply_text(plain_usage_text, reply_markup=get_main_reply_keyboard())


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ start, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏ –∏ —Ä–µ–∂–∏–º–µ)
    help_text_md = (
        f"{escape_markdown('ü§ñ –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–±–æ—Ç –Ω–∞ –±–∞–∑–µ –º–æ–¥–µ–ª–µ–π Gemini –æ—Ç Google.', version=2)}\n\n"
        f"{escape_markdown('–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:', version=2)}\n"
        f"`/start` {escape_markdown('- –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.', version=2)}\n"
        f"`/mode` {escape_markdown(' –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ', version=2)}`ü§ñ –†–µ–∂–∏–º –ò–ò` {escape_markdown('- —Å–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –ò–ò.', version=2)}\n"
        f"`/model` {escape_markdown(' –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ', version=2)}`‚öôÔ∏è –ú–æ–¥–µ–ª—å –ò–ò` {escape_markdown('- –≤—ã–±–æ—Ä –æ–¥–Ω–æ–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Gemini.', version=2)}\n"
        f"`/usage` {escape_markdown(' –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ', version=2)}`üìä –õ–∏–º–∏—Ç—ã / –ü–æ–¥–ø–∏—Å–∫–∞` {escape_markdown('- –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –ª–∏–º–∏—Ç–∞—Ö.', version=2)}\n"
        f"`/help` {escape_markdown(' –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ', version=2)}`‚ùì –ü–æ–º–æ—â—å` {escape_markdown('- —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.', version=2)}\n\n"
        f"{escape_markdown('–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –±–æ—Ç—É!', version=2)}"
    )
    try:
        await update.message.reply_text(help_text_md, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=get_main_reply_keyboard())
    except telegram.error.BadRequest:
        await update.message.reply_text(
            "–Ø –ò–ò-–±–æ—Ç. –ö–æ–º–∞–Ω–¥—ã: /start, /mode, /model, /usage, /help. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.", 
            reply_markup=get_main_reply_keyboard()
        )


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–ª–ª–±—ç–∫
    data = query.data
    user_id = query.from_user.id
    message_to_edit = query.message 
    new_text = ""
    plain_text_fallback = ""

    if data.startswith("set_mode_"):
        mode_key = data.split("set_mode_")[1]
        if mode_key in AI_MODES:
            context.user_data['current_ai_mode'] = mode_key
            mode_details = AI_MODES[mode_key]
            new_text = f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: *{escape_markdown(mode_details['name'],version=2)}*.\n{escape_markdown(mode_details['welcome'],version=2)}"
            plain_text_fallback = f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode_details['name']}.\n{mode_details['welcome']}"
            logger.info(f"User {user_id} changed AI mode to {mode_key}")
        else:
            new_text = escape_markdown("–û—à–∏–±–∫–∞: –¢–∞–∫–æ–π —Ä–µ–∂–∏–º –Ω–µ –Ω–∞–π–¥–µ–Ω.", version=2)
            plain_text_fallback = "–û—à–∏–±–∫–∞: –¢–∞–∫–æ–π —Ä–µ–∂–∏–º –Ω–µ –Ω–∞–π–¥–µ–Ω."
    
    elif data.startswith("set_model_"):
        model_key_from_callback = data.split("set_model_")[1] # –≠—Ç–æ –∫–ª—é—á –∏–∑ AVAILABLE_TEXT_MODELS
        if model_key_from_callback in AVAILABLE_TEXT_MODELS:
            selected_model_config = AVAILABLE_TEXT_MODELS[model_key_from_callback]
            context.user_data['selected_model_id'] = selected_model_config["id"]
            context.user_data['selected_api_type'] = selected_model_config["api_type"] # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø API

            model_name_md = escape_markdown(selected_model_config['name'], version=2)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            _, limit_msg_check, current_c = check_and_log_request_attempt(user_id, model_key_from_callback, context)
            actual_l = get_user_actual_limit_for_model(user_id, model_key_from_callback, context)
            limit_info_md = f"\n{escape_markdown(f'–õ–∏–º–∏—Ç: {current_c}/{actual_l} –≤ –¥–µ–Ω—å.', version=2)}"
            if "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏" in limit_msg_check:
                limit_info_md = f"\n{escape_markdown(limit_msg_check.splitlines()[0],version=2)}"


            new_text = f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: *{model_name_md}*.{limit_info_md}"
            plain_text_fallback = f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {selected_model_config['name']}. –õ–∏–º–∏—Ç: {current_c}/{actual_l} –≤ –¥–µ–Ω—å."
            logger.info(f"User {user_id} changed AI model to key: {model_key_from_callback} (ID: {selected_model_config['id']}, API: {selected_model_config['api_type']})")
        else:
            new_text = escape_markdown("–û—à–∏–±–∫–∞: –¢–∞–∫–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", version=2)
            plain_text_fallback = "–û—à–∏–±–∫–∞: –¢–∞–∫–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            
    if new_text:
        try:
            # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
            await message_to_edit.edit_text(text=new_text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=None)
        except telegram.error.BadRequest:
            logger.warning(f"Failed to edit message with MarkdownV2 in button_callback. Sending plain text. Text was: {new_text}")
            await message_to_edit.edit_text(text=plain_text_fallback, reply_markup=None)


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user_id = update.effective_user.id if update.effective_user else "UnknownUser"
    logger.info(f"Received message from user {user_id}: '{user_message}'")

    current_model_key = get_current_model_key(context) # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏
    selected_model_details = AVAILABLE_TEXT_MODELS[current_model_key] # –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏

    # --- –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–ê –ó–ê–ü–†–û–°–û–í ---
    can_request, limit_message, _ = check_and_log_request_attempt(user_id, current_model_key, context)
    if not can_request:
        await update.message.reply_text(limit_message, reply_markup=get_main_reply_keyboard())
        logger.info(f"User {user_id} limit exceeded for model_key {current_model_key}: {limit_message}")
        return
    # --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –õ–ò–ú–ò–¢–ê ---

    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    
    current_mode_details = get_current_mode_details(context)
    system_prompt_text = current_mode_details["prompt"]
    reply_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞." # –û—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    api_type = selected_model_details.get("api_type")

    request_successful = False # –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API

    if api_type == "google_genai":
        if not GOOGLE_GEMINI_API_KEY or "YOUR_GOOGLE_GEMINI_API_KEY" in GOOGLE_GEMINI_API_KEY or "AIzaSy" not in GOOGLE_GEMINI_API_KEY:
            reply_text = "–ö–ª—é—á API –¥–ª—è –º–æ–¥–µ–ª–µ–π Google Gemini –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        else:
            try:
                model_id_for_api = selected_model_details["id"]
                active_model = genai.GenerativeModel(model_id_for_api)
                logger.info(f"Using Google genai model: {model_id_for_api} for user {user_id}")
                
                generation_config = genai.types.GenerationConfig(temperature=0.75) # max_output_tokens –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                
                chat_history = [
                    {"role": "user", "parts": [system_prompt_text]},
                    {"role": "model", "parts": ["–ü–æ–Ω—è–ª. –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å."]}
                ]
                chat = active_model.start_chat(history=chat_history)
                response_gen = await chat.send_message_async(user_message, generation_config=generation_config)
                
                api_reply_text_google = response_gen.text

                prompt_tokens, completion_tokens = 0, 0
                if hasattr(response_gen, 'usage_metadata') and response_gen.usage_metadata:
                    usage = response_gen.usage_metadata
                    prompt_tokens = usage.prompt_token_count
                    completion_tokens = usage.candidates_token_count
                    logger.info(f"Google API Usage for {model_id_for_api}: Prompt Tokens: {prompt_tokens}, Completion Tokens: {completion_tokens}")

                if not api_reply_text_google or not api_reply_text_google.strip():
                    block_reason_msg = ""
                    if hasattr(response_gen, 'prompt_feedback') and response_gen.prompt_feedback and response_gen.prompt_feedback.block_reason:
                        block_reason_msg = f" –ü—Ä–∏—á–∏–Ω–∞: {response_gen.prompt_feedback.block_reason}."
                    reply_text = f"–ò–ò (Google) –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ–Ω –±—ã–ª –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω.{block_reason_msg} –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
                    logger.warning(f"Empty or blocked response from Google API. Model: {model_id_for_api}.{block_reason_msg}")
                else:
                    reply_text = api_reply_text_google
                    request_successful = True

            except google.api_core.exceptions.GoogleAPIError as e_google_api:
                error_message = str(e_google_api).lower()
                logger.error(f"GoogleAPIError for model {selected_model_details['id']}: {str(e_google_api)}\n{traceback.format_exc()}")
                reply_text = f"–û—à–∏–±–∫–∞ API Google Gemini: {type(e_google_api).__name__}."
                if "api key not valid" in error_message or "api key invalid" in error_message:
                    reply_text = "–û—à–∏–±–∫–∞: API –∫–ª—é—á –¥–ª—è Google –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                elif "billing account" in error_message or "enable billing" in error_message:
                    reply_text = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∏–ª–ª–∏–Ω–≥–æ–º –¥–ª—è API Google. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                elif "resource has been exhausted" in error_message: # –ö–≤–æ—Ç–∞
                    reply_text = "–ò—Å—á–µ—Ä–ø–∞–Ω–∞ –∫–≤–æ—Ç–∞ –¥–ª—è Google API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                # –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Google API
            except Exception as e_general_google:
                logger.error(f"General error processing Google Gemini model {selected_model_details['id']}: {str(e_general_google)}\n{traceback.format_exc()}")
                reply_text = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Google Gemini."

    elif api_type == "custom_http_api":
        api_key_var_name = selected_model_details.get("api_key_var_name")
        actual_api_key = globals().get(api_key_var_name) # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ –ø–æ –∏–º–µ–Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

        if not actual_api_key or "sk-" not in actual_api_key: # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ "sk-"
            reply_text = f"–ö–ª—é—á API –¥–ª—è '{selected_model_details['name']}' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
            logger.warning(f"API key from var '{api_key_var_name}' is missing or invalid for Custom API.")
        else:
            endpoint = selected_model_details["endpoint"]
            model_id_for_payload = selected_model_details["id"]

            messages_payload = [
                {"role": "user", "content": system_prompt_text},
                {"role": "user", "content": user_message}
            ]
            payload = {
                "model": model_id_for_payload,
                "messages": messages_payload,
                "is_sync": True,
                "temperature": 0.75
            }
            headers = {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'Authorization': f'Bearer {actual_api_key}'
            }
            logger.info(f"Sending request to Custom HTTP API. Endpoint: {endpoint}, Model: {model_id_for_payload}")

            try:
                api_response = requests.post(endpoint, json=payload, headers=headers, timeout=90)
                api_response.raise_for_status()
                response_data = api_response.json()
                logger.debug(f"Custom API raw response: {json.dumps(response_data, ensure_ascii=False, indent=2)}")

                # –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥ –≤–∞—à Custom API. –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ —É gen-api.ru
                if response_data.get("status") == "success" and "output" in response_data:
                    api_reply_text_custom = response_data.get("output")
                    if not api_reply_text_custom or not api_reply_text_custom.strip():
                        reply_text = f"–ò–ò ({selected_model_details['name']}) –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."
                    else:
                        reply_text = api_reply_text_custom
                        request_successful = True
                elif "detail" in response_data:
                    reply_text = f"–û—à–∏–±–∫–∞ Custom API ({selected_model_details['name']}): {response_data['detail']}"
                else: # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –¥—Ä—É–≥–∞—è –∏–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞/output
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –ø—Ä–æ—Å—Ç–æ –ª–µ–∂–∏—Ç –≤ –∫–æ—Ä–Ω–µ –∏–ª–∏ –≤ –∏–∑–≤–µ—Å—Ç–Ω–æ–º –ø–æ–ª–µ
                    possible_text = response_data.get("text") or response_data.get("message") or response_data.get("completion")
                    if isinstance(possible_text, str) and possible_text.strip():
                        reply_text = possible_text
                        request_successful = True
                        logger.info("Extracted text from custom API response from a non-standard field.")
                    else:
                        reply_text = f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Custom API ({selected_model_details['name']})."
                        logger.warning(f"Unexpected response structure or empty content from Custom API: {response_data}")
                
            except requests.exceptions.HTTPError as e_http:
                error_content = "No details in response."
                try: error_content = e_http.response.json()
                except json.JSONDecodeError: error_content = e_http.response.text
                logger.error(f"HTTPError for Custom API '{selected_model_details['name']}': {e_http}. Status: {e_http.response.status_code}. Content: {error_content}")
                reply_text = f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ ({e_http.response.status_code}) –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ '{selected_model_details['name']}'."
            except requests.exceptions.RequestException as e_req_custom:
                logger.error(f"RequestException for Custom API '{selected_model_details['name']}': {e_req_custom}")
                reply_text = f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ '{selected_model_details['name']}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            except Exception as e_custom_proc:
                logger.error(f"Error processing Custom API response for '{selected_model_details['name']}': {e_custom_proc}\n{traceback.format_exc()}")
                reply_text = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç '{selected_model_details['name']}'."
    else:
        reply_text = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø API: {api_type}"
        logger.error(f"Unsupported API type: {api_type} for model_key {current_model_key}")

    if request_successful and selected_model_details.get("is_limited"):
        increment_request_count(user_id, current_model_key, context)
            
    reply_text_for_sending, was_truncated = smart_truncate(reply_text, MAX_MESSAGE_LENGTH_TELEGRAM)
    await update.message.reply_text(reply_text_for_sending, reply_markup=get_main_reply_keyboard())
    if request_successful:
        logger.info(f"Sent successful response for model_key {current_model_key}. Truncated: {was_truncated}")


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ ---
async def set_bot_commands(application: Application):
    commands = [
        BotCommand("start", "üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ / –ò–Ω—Ñ–æ"),
        BotCommand("mode", "üß† –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –ò–ò"),
        BotCommand("model", "‚öôÔ∏è –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ò–ò"),
        BotCommand("usage", "üìä –õ–∏–º–∏—Ç—ã / –ü–æ–¥–ø–∏—Å–∫–∞"),
        BotCommand("help", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
    ]
    try:
        await application.bot.set_my_commands(commands)
        logger.info("Bot commands set successfully.")
    except Exception as e:
        logger.error(f"Failed to set bot commands: {e}")


async def main():
    if "YOUR_TELEGRAM_TOKEN" in TOKEN or not TOKEN:
        logger.critical("CRITICAL: TELEGRAM_TOKEN is not set or is a placeholder.")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π API –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø—Ä–∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –ø—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ genai

    persistence = PicklePersistence(filepath="bot_user_data.pkl") # –ò—Å–ø–æ–ª—å–∑—É–µ–º .pkl –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏

    application = Application.builder().token(TOKEN).persistence(persistence).build()

    await set_bot_commands(application)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("mode", select_mode_command))
    application.add_handler(CommandHandler("model", select_model_command))
    application.add_handler(CommandHandler("usage", usage_command))
    application.add_handler(CommandHandler("help", help_command))

    application.add_handler(MessageHandler(filters.Text(["ü§ñ –†–µ–∂–∏–º –ò–ò"]), select_mode_command))
    application.add_handler(MessageHandler(filters.Text(["‚öôÔ∏è –ú–æ–¥–µ–ª—å –ò–ò"]), select_model_command))
    application.add_handler(MessageHandler(filters.Text(["üìä –õ–∏–º–∏—Ç—ã / –ü–æ–¥–ø–∏—Å–∫–∞"]), usage_command))
    application.add_handler(MessageHandler(filters.Text(["‚ùì –ü–æ–º–æ—â—å"]), help_command))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_callback))

    logger.info("Starting bot with multiple Gemini models and API support...")
    await application.run_polling()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user (KeyboardInterrupt)")
    except Exception as e_main:
        logger.critical(f"Critical error in main execution: {e_main}\n{traceback.format_exc()}")
