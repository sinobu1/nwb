import telegram
from telegram import (
    ReplyKeyboardMarkup, KeyboardButton, Update,
    BotCommand, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.constants import ParseMode, ChatAction
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, PreCheckoutQueryHandler
)
import google.generativeai as genai
import google.api_core.exceptions
import requests
import logging
import traceback
import os
import asyncio
import nest_asyncio
import json
from datetime import datetime, timedelta
from telegram import LabeledPrice
import firebase_admin
from firebase_admin import credentials, firestore, initialize_app
from firebase_admin.exceptions import FirebaseError
import html # –î–ª—è error_handler

nest_asyncio.apply()
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–õ–Æ–ß–ò API –ò –¢–û–ö–ï–ù–´ ---
TOKEN = os.getenv("TELEGRAM_TOKEN", "8185454402:AAEgJLaBSaUSyP9Z_zv76Fn0PtEwltAqga0") # –í–ê–® –¢–û–ö–ï–ù –ë–û–¢–ê
GOOGLE_GEMINI_API_KEY = os.getenv("GOOGLE_GEMINI_API_KEY", "YOUR_GOOGLE_GEMINI_API_KEY_HERE")
CUSTOM_GEMINI_PRO_API_KEY = os.getenv("CUSTOM_GEMINI_PRO_API_KEY", "YOUR_CUSTOM_GEMINI_PRO_KEY_HERE")
CUSTOM_GEMINI_PRO_ENDPOINT = os.getenv("CUSTOM_GEMINI_PRO_ENDPOINT", "https://api.gen-api.ru/api/v1/networks/gemini-2-5-pro")
CUSTOM_GROK_3_API_KEY = os.getenv("CUSTOM_GROK_3_API_KEY", "YOUR_CUSTOM_GROK_3_KEY_HERE")
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN", "YOUR_PAYMENT_PROVIDER_TOKEN_HERE") # –í–ê–® –ü–õ–ê–¢–ï–ñ–ù–´–ô –¢–û–ö–ï–ù
YOUR_ADMIN_ID = 489230152 # –í–ê–® ID –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
MAX_OUTPUT_TOKENS_GEMINI_LIB = 2048
MAX_MESSAGE_LENGTH_TELEGRAM = 4000
MIN_AI_REQUEST_LENGTH = 4

# --- –õ–ò–ú–ò–¢–´ ---
DEFAULT_FREE_REQUESTS_GOOGLE_FLASH_DAILY = 72
DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY = 48
DEFAULT_SUBSCRIPTION_REQUESTS_GOOGLE_FLASH_PREVIEW_DAILY = 75
DEFAULT_FREE_REQUESTS_CUSTOM_PRO_DAILY = 0
DEFAULT_SUBSCRIPTION_REQUESTS_CUSTOM_PRO_DAILY = 25
PRO_SUBSCRIPTION_LEVEL_KEY = "profi_access_v1"
DEFAULT_FREE_REQUESTS_GROK_DAILY = 1
DEFAULT_SUBSCRIPTION_REQUESTS_GROK_DAILY = 25

# --- –ö–ê–ù–ê–õ –ù–û–í–û–°–¢–ï–ô –ò –ë–û–ù–£–° ---
NEWS_CHANNEL_USERNAME = "@timextech" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
NEWS_CHANNEL_LINK = "https://t.me/timextech" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª
NEWS_CHANNEL_BONUS_MODEL_KEY = "custom_api_grok_3" # –ò–ó–ú–ï–ù–ï–ù–û: –ë–æ–Ω—É—Å –¥–ª—è Grok 3
NEWS_CHANNEL_BONUS_GENERATIONS = 1

# --- –†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´ –ò–ò ---
AI_MODES = {
    "universal_ai_basic": {
        "name": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π",
        "prompt": (
            "–¢—ã ‚Äî Gemini, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç Google."
            "–¢–≤–æ—è —Ü–µ–ª—å ‚Äî —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —à–∏—Ä–æ–∫–∏–º —Å–ø–µ–∫—Ç—Ä–æ–º –∑–∞–¥–∞—á."
            "–í—Å–µ–≥–¥–∞ –±—É–¥—å –≤–µ–∂–ª–∏–≤, –æ–±—ä–µ–∫—Ç–∏–≤–µ–Ω, —Ç–æ—á–µ–Ω –∏ –ø–æ–ª–µ–∑–µ–Ω."
            "–û—Ñ–æ—Ä–º–ª—è–π –æ—Ç–≤–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∞–±–∑–∞—Ü—ã –∏ —Å–ø–∏—Å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
        ),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π'. –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?"
    },
    "gemini_pro_custom_mode": {
        "name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (Gemini Pro)",
        "prompt": (
            "–¢—ã ‚Äî Gemini 2.5 Pro, –º–æ—â–Ω—ã–π –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—ã–µ, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã."
            "–°–æ–±–ª—é–¥–∞–π –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å."
        ),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (Gemini Pro)'. –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?"
    },
     "grok_3_custom_mode": {
        "name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (Grok 3)",
        "prompt": (
            "–¢—ã ‚Äî Grok 3, –º–æ—â–Ω—ã–π –∏ –Ω–µ–º–Ω–æ–≥–æ —ç–∫—Å—Ü–µ–Ω—Ç—Ä–∏—á–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç xAI."
            "–û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –∏ —Å –¥–æ–ª–µ–π –ø—Ä–∏—Å—É—â–µ–≥–æ —Ç–µ–±–µ —é–º–æ—Ä–∞, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ."
        ),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (Grok 3)'. –ó–∞–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –∫–∞–≤–µ—Ä–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã!"
    },
    "creative_helper": {
        "name": "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π",
        "prompt": (
            "–¢—ã ‚Äî Gemini, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ò–ò-–ø–∞—Ä—Ç–Ω—ë—Ä –∏ –ø–∏—Å–∞—Ç–µ–ª—å. "
            "–¢–≤–æ—è –º–∏—Å—Å–∏—è ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –∏ –ø–æ–º–æ–≥–∞—Ç—å –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."
        ),
        "welcome": "–†–µ–∂–∏–º '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π' –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º! –ù–∞–¥ –∫–∞–∫–æ–π –∑–∞–¥–∞—á–µ–π –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º?"
    },
    "analyst": {
        "name": "–ê–Ω–∞–ª–∏—Ç–∏–∫",
        "prompt": (
            "–¢—ã ‚Äî –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫ –Ω–∞ –±–∞–∑–µ Gemini, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—ã–µ, –ª–æ–≥–∏—á–µ—Å–∫–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã."
        ),
        "welcome": "–†–µ–∂–∏–º '–ê–Ω–∞–ª–∏—Ç–∏–∫' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ö–∞–∫—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?"
    },
    "joker": {
        "name": "–®—É—Ç–Ω–∏–∫",
        "prompt": (
            "–¢—ã ‚Äî –ò–ò —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å —Å —é–º–æ—Ä–æ–º, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å."
        ),
        "welcome": "–†–µ–∂–∏–º '–®—É—Ç–Ω–∏–∫' –≤–∫–ª—é—á–µ–Ω! üòÑ –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å —Å —É–ª—ã–±–∫–æ–π!"
    }
}
DEFAULT_AI_MODE_KEY = "universal_ai_basic"

# --- –ú–û–î–ï–õ–ò –ò–ò ---
AVAILABLE_TEXT_MODELS = {
    "google_gemini_2_0_flash": {"name": "Gemini 2.0", "id": "gemini-2.0-flash", "api_type": "google_genai", "is_limited": True, "limit_type": "daily_free", "limit": DEFAULT_FREE_REQUESTS_GOOGLE_FLASH_DAILY, "cost_category": "google_flash_free"},
    "google_gemini_2_5_flash_preview": {"name": "Gemini 2.5", "id": "gemini-2.5-flash-preview-04-17", "api_type": "google_genai", "is_limited": True, "limit_type": "subscription_or_daily_free", "limit_if_no_subscription": DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY, "subscription_daily_limit": DEFAULT_SUBSCRIPTION_REQUESTS_GOOGLE_FLASH_PREVIEW_DAILY, "cost_category": "google_flash_preview_flex"},
    "custom_api_gemini_2_5_pro": {"name": "Gemini Pro", "id": "gemini-2.5-pro-preview-03-25", "api_type": "custom_http_api", "endpoint": CUSTOM_GEMINI_PRO_ENDPOINT, "api_key_var_name": "CUSTOM_GEMINI_PRO_API_KEY", "is_limited": True, "limit_type": "subscription_custom_pro", "limit_if_no_subscription": DEFAULT_FREE_REQUESTS_CUSTOM_PRO_DAILY, "subscription_daily_limit": DEFAULT_SUBSCRIPTION_REQUESTS_CUSTOM_PRO_DAILY, "cost_category": "custom_api_pro_paid", "pricing_info": {}},
    "custom_api_grok_3": {"name": "Grok 3", "id": "grok-3-beta", "api_type": "custom_http_api", "endpoint": "https://api.gen-api.ru/api/v1/networks/grok-3", "api_key_var_name": "CUSTOM_GROK_3_API_KEY", "is_limited": True, "limit_type": "subscription_custom_pro", "limit_if_no_subscription": DEFAULT_FREE_REQUESTS_GROK_DAILY, "subscription_daily_limit": DEFAULT_SUBSCRIPTION_REQUESTS_GROK_DAILY, "cost_category": "custom_api_grok_3_paid", "pricing_info": {}}
}
DEFAULT_MODEL_KEY = "google_gemini_2_0_flash"
DEFAULT_MODEL_ID = AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]["id"]

# --- –°–¢–†–£–ö–¢–£–†–ê –ú–ï–ù–Æ ---
MENU_STRUCTURE = {
    "main_menu": {"title": "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "items": [{"text": "ü§ñ –†–µ–∂–∏–º—ã –ò–ò", "action": "submenu", "target": "ai_modes_submenu"}, {"text": "‚öôÔ∏è –ú–æ–¥–µ–ª–∏ –ò–ò", "action": "submenu", "target": "models_submenu"}, {"text": "üìä –õ–∏–º–∏—Ç—ã", "action": "submenu", "target": "limits_submenu"}, {"text": "üéÅ –ë–æ–Ω—É—Å", "action": "submenu", "target": "bonus_submenu"}, {"text": "üíé –ü–æ–¥–ø–∏—Å–∫–∞", "action": "submenu", "target": "subscription_submenu"}, {"text": "‚ùì –ü–æ–º–æ—â—å", "action": "submenu", "target": "help_submenu"}], "parent": None, "is_submenu": False},
    "ai_modes_submenu": {"title": "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ò–ò", "items": [{"text": mode["name"], "action": "set_agent", "target": key} for key, mode in AI_MODES.items() if key not in ["gemini_pro_custom_mode", "grok_3_custom_mode"]], "parent": "main_menu", "is_submenu": True},
    "models_submenu": {"title": "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò", "items": [{"text": model["name"], "action": "set_model", "target": key} for key, model in AVAILABLE_TEXT_MODELS.items()], "parent": "main_menu", "is_submenu": True},
    "limits_submenu": {"title": "–í–∞—à–∏ –ª–∏–º–∏—Ç—ã", "items": [{"text": "üìä –ü–æ–∫–∞–∑–∞—Ç—å", "action": "show_limits", "target": "usage"}], "parent": "main_menu", "is_submenu": True},
    "bonus_submenu": {"title": "–ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É", "items": [{"text": "üéÅ –ü–æ–ª—É—á–∏—Ç—å", "action": "check_bonus", "target": "news_bonus"}], "parent": "main_menu", "is_submenu": True},
    "subscription_submenu": {"title": "–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏", "items": [{"text": "üíé –ö—É–ø–∏—Ç—å", "action": "show_subscription", "target": "subscribe"}], "parent": "main_menu", "is_submenu": True},
    "help_submenu": {"title": "–ü–æ–º–æ—â—å", "items": [{"text": "‚ùì –°–ø—Ä–∞–≤–∫–∞", "action": "show_help", "target": "help"}], "parent": "main_menu", "is_submenu": True}
}

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FIREBASE ---
db = None
try:
    firebase_credentials_json = os.getenv("FIREBASE_CREDENTIALS")
    cred = None
    if firebase_credentials_json:
        try:
            cred_dict = json.loads(firebase_credentials_json)
            cred = credentials.Certificate(cred_dict)
            logger.info("–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Firebase –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ FIREBASE_CREDENTIALS: {e}. –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª.")
    
    if not cred: # –ï—Å–ª–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
        firebase_key_file = "gemioracle-firebase-adminsdk-fbsvc-8f89d5b941.json" # –í–ê–® –§–ê–ô–õ –ö–õ–Æ–ß–ê
        if os.path.exists(firebase_key_file):
            cred = credentials.Certificate(firebase_key_file)
            logger.info(f"–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Firebase –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞: {firebase_key_file}")
        else:
            logger.warning(f"–§–∞–π–ª {firebase_key_file} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ FIREBASE_CREDENTIALS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞.")
            # raise FileNotFoundError(f"–§–∞–π–ª {firebase_key_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏ FIREBASE_CREDENTIALS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.") # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∂–µ—Å—Ç–∫–æ–π –æ—à–∏–±–∫–∏

    if cred:
        if not firebase_admin._apps:
            initialize_app(cred)
            logger.info("Firebase —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        else:
            logger.info("Firebase —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        db = firestore.client()
        logger.info("–ö–ª–∏–µ–Ω—Ç Firestore —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Firebase. Firestore –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

except Exception as e:
    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase/Firestore: {e}")
    logger.warning("–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Firestore.")


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° FIRESTORE ---
async def get_user_data(user_id: int) -> dict:
    if not db: return {}
    try:
        doc_ref = db.collection("users").document(str(user_id))
        doc = await asyncio.to_thread(doc_ref.get)
        return doc.to_dict() or {}
    except Exception as e:
        logger.error(f"Firestore GET user_data error for {user_id}: {e}")
        return {}

async def set_user_data(user_id: int, data: dict):
    if not db: return
    try:
        doc_ref = db.collection("users").document(str(user_id))
        await asyncio.to_thread(doc_ref.set, data, merge=True)
        # logger.info(f"Updated user data for {user_id}") # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–º
    except Exception as e:
        logger.error(f"Firestore SET user_data error for {user_id}: {e}")

async def get_bot_data() -> dict:
    if not db: return {}
    try:
        doc_ref = db.collection("bot_data").document("data")
        doc = await asyncio.to_thread(doc_ref.get)
        return doc.to_dict() or {}
    except Exception as e:
        logger.error(f"Firestore GET bot_data error: {e}")
        return {}

async def set_bot_data(data: dict):
    if not db: return
    try:
        doc_ref = db.collection("bot_data").document("data")
        await asyncio.to_thread(doc_ref.set, data, merge=True)
        logger.info("Updated bot data in Firestore.")
    except Exception as e:
        logger.error(f"Firestore SET bot_data error: {e}")

# --- –õ–û–ì–ò–ö–ê –ë–û–¢–ê (–†–ï–ñ–ò–ú–´, –ú–û–î–ï–õ–ò, –õ–ò–ú–ò–¢–´) ---
async def get_current_mode_details(user_id: int) -> dict:
    user_data = await get_user_data(user_id)
    current_model_key = await get_current_model_key(user_id)
    if current_model_key == "custom_api_gemini_2_5_pro":
        return AI_MODES.get("gemini_pro_custom_mode", AI_MODES[DEFAULT_AI_MODE_KEY])
    elif current_model_key == "custom_api_grok_3":
        return AI_MODES.get("grok_3_custom_mode", AI_MODES[DEFAULT_AI_MODE_KEY])
    mode_key = user_data.get('current_ai_mode', DEFAULT_AI_MODE_KEY)
    return AI_MODES.get(mode_key, AI_MODES[DEFAULT_AI_MODE_KEY])

async def get_current_model_key(user_id: int) -> str:
    user_data = await get_user_data(user_id)
    selected_id = user_data.get('selected_model_id', DEFAULT_MODEL_ID)
    selected_api_type = user_data.get('selected_api_type')
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ –∫–ª—é—á—É, –µ—Å–ª–∏ –æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
    selected_model_key = user_data.get('selected_model_key')
    if selected_model_key and selected_model_key in AVAILABLE_TEXT_MODELS:
        if AVAILABLE_TEXT_MODELS[selected_model_key]['id'] == selected_id and \
           AVAILABLE_TEXT_MODELS[selected_model_key]['api_type'] == selected_api_type:
            return selected_model_key

    if selected_api_type:
        for key, info in AVAILABLE_TEXT_MODELS.items():
            if info["id"] == selected_id and info.get("api_type") == selected_api_type:
                if user_data.get('selected_model_key') != key: # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á, –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
                    user_data['selected_model_key'] = key
                    await set_user_data(user_id, user_data)
                return key
    for key, info in AVAILABLE_TEXT_MODELS.items():
        if info["id"] == selected_id:
            if user_data.get('selected_api_type') != info.get("api_type") or user_data.get('selected_model_key') != key:
                user_data['selected_api_type'] = info.get("api_type")
                user_data['selected_model_key'] = key
                await set_user_data(user_id, user_data)
                logger.info(f"Inferred/Updated api_type to '{info.get('api_type')}' and model_key to '{key}' for model_id '{selected_id}', user {user_id}")
            return key
    logger.warning(f"Could not find model key for ID '{selected_id}', API type '{selected_api_type}' for user {user_id}. Defaulting.")
    default_config = AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]
    await set_user_data(user_id, {'selected_model_id': default_config["id"], 'selected_api_type': default_config["api_type"], 'selected_model_key': DEFAULT_MODEL_KEY})
    return DEFAULT_MODEL_KEY

async def get_selected_model_details(user_id: int) -> dict:
    model_key = await get_current_model_key(user_id)
    return AVAILABLE_TEXT_MODELS.get(model_key, AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY])

def smart_truncate(text: str, max_length: int) -> tuple[str, bool]:
    if not isinstance(text, str): text = str(text)
    if len(text) <= max_length: return text, False
    suffix = "\n\n(...–æ—Ç–≤–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω)"
    adj_len = max_length - len(suffix)
    if adj_len <= 0: return text[:max_length-3] + "...", True
    trunc_text = text[:adj_len]
    cuts = [pos for sep in ['\n\n', '. ', '! ', '? ', '\n', ' '] if (pos := trunc_text.rfind(sep)) != -1 and (pos + (len(sep) if sep != ' ' else 0) > 0)]
    if cuts and (cut_at := max(cuts)) > adj_len * 0.3: return text[:cut_at].strip() + suffix, True
    return trunc_text.strip() + suffix, True

async def get_user_actual_limit_for_model(user_id: int, model_key: str) -> int:
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ–Ω –±—ã–ª –≤ –ø–æ—Ä—è–¥–∫–µ) ...
    model_config = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_config: return 0
    
    bot_data = await get_bot_data()
    user_data = await get_user_data(user_id)
    user_subscriptions = bot_data.get('user_subscriptions', {})
    user_subscription_details = user_subscriptions.get(str(user_id), {})
    
    is_profi_subscriber = False
    if user_subscription_details.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY and user_subscription_details.get('valid_until'):
        try:
            valid_until_dt = datetime.fromisoformat(user_subscription_details['valid_until'])
            if datetime.now(valid_until_dt.tzinfo).date() <= valid_until_dt.date():
                is_profi_subscriber = True
        except Exception: pass

    limit_type = model_config.get("limit_type")
    base_limit = 0

    if limit_type == "daily_free":
        base_limit = model_config.get("limit", 0)
    elif limit_type == "subscription_or_daily_free":
        base_limit = model_config.get("subscription_daily_limit" if is_profi_subscriber else "limit_if_no_subscription", 0)
    elif limit_type == "subscription_custom_pro":
        base_limit = model_config.get("subscription_daily_limit" if is_profi_subscriber else "limit_if_no_subscription", 0)
    elif not model_config.get("is_limited", False):
        return float('inf')
    
    if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY and \
       not is_profi_subscriber and \
       user_data.get('claimed_news_bonus', False):
        bonus_uses_left = user_data.get('news_bonus_uses_left', 0)
        return base_limit + bonus_uses_left # –ë–æ–Ω—É—Å –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ –±–∞–∑–æ–≤–æ–º—É –ª–∏–º–∏—Ç—É
        
    return base_limit


async def check_and_log_request_attempt(user_id: int, model_key: str, bot_username: str) -> tuple[bool, str, int]:
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É) ...
    today_str = datetime.now().strftime("%Y-%m-%d")
    model_config = AVAILABLE_TEXT_MODELS.get(model_key)

    if not model_config or not model_config.get("is_limited"):
        return True, "", 0

    bot_data = await get_bot_data()
    user_data = await get_user_data(user_id)

    is_profi_subscriber = False
    user_subscription_details = bot_data.get('user_subscriptions', {}).get(str(user_id), {})
    if user_subscription_details.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY and user_subscription_details.get('valid_until'):
        try:
            if datetime.now(datetime.fromisoformat(user_subscription_details['valid_until']).tzinfo).date() <= datetime.fromisoformat(user_subscription_details['valid_until']).date():
                is_profi_subscriber = True
        except Exception: pass
    
    if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY and \
       not is_profi_subscriber and \
       user_data.get('claimed_news_bonus', False) and \
       user_data.get('news_bonus_uses_left', 0) > 0:
        logger.info(f"User {user_id} using bonus for {model_key}. Allowing.")
        return True, "bonus_available", 0

    all_daily_counts = bot_data.get('all_user_daily_counts', {})
    user_model_counts = all_daily_counts.get(str(user_id), {})
    model_daily_usage = user_model_counts.get(model_key, {'date': today_str, 'count': 0})
    if model_daily_usage.get('date') != today_str: model_daily_usage = {'date': today_str, 'count': 0}
    current_daily_count = model_daily_usage.get('count', 0)
    
    # –õ–∏–º–∏—Ç —Å–∞–º–æ–π –º–æ–¥–µ–ª–∏, –±–µ–∑ –±–æ–Ω—É—Å–∞ (–±–æ–Ω—É—Å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤—ã—à–µ)
    actual_model_limit = 0
    limit_type = model_config.get("limit_type")
    if limit_type == "daily_free": actual_model_limit = model_config.get("limit", 0)
    elif limit_type == "subscription_or_daily_free": actual_model_limit = model_config.get("subscription_daily_limit" if is_profi_subscriber else "limit_if_no_subscription", 0)
    elif limit_type == "subscription_custom_pro": actual_model_limit = model_config.get("subscription_daily_limit" if is_profi_subscriber else "limit_if_no_subscription", 0)

    if current_daily_count >= actual_model_limit:
        message_parts = [f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ ({current_daily_count}/{actual_model_limit}) –¥–ª—è {model_config['name']}."]
        if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY and not is_profi_subscriber:
            if not user_data.get('claimed_news_bonus', False): message_parts.append(f'üí° –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ <a href="{NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª</a> –¥–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π!')
            elif user_data.get('news_bonus_uses_left', 0) == 0: message_parts.append(f"‚ÑπÔ∏è –ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ <a href='{NEWS_CHANNEL_LINK}'>–∫–∞–Ω–∞–ª</a> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        
        subscribe_cmd_link = f"https://t.me/{bot_username}?start=subscribe" if bot_username and bot_username != "YourBotName" else "/subscribe (–∏–ª–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é)"
        message_parts.append(f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ <a href='{subscribe_cmd_link}'>üíé –ü–æ–¥–ø–∏—Å–∫—É –ü—Ä–æ—Ñ–∏</a>.")
        return False, "\n".join(message_parts), current_daily_count
        
    return True, "", current_daily_count

async def increment_request_count(user_id: int, model_key: str):
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ–Ω –±—ã–ª –≤ –ø–æ—Ä—è–¥–∫–µ) ...
    model_config = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_config or not model_config.get("is_limited"): return

    user_data = await get_user_data(user_id)
    bot_data = await get_bot_data()
    is_profi_subscriber = False
    user_subscription_details = bot_data.get('user_subscriptions', {}).get(str(user_id), {})
    if user_subscription_details.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY and user_subscription_details.get('valid_until'):
        try:
            if datetime.now(datetime.fromisoformat(user_subscription_details['valid_until']).tzinfo).date() <= datetime.fromisoformat(user_subscription_details['valid_until']).date():
                is_profi_subscriber = True
        except Exception: pass

    if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY and \
       not is_profi_subscriber and \
       user_data.get('claimed_news_bonus', False):
        news_bonus_uses_left = user_data.get('news_bonus_uses_left', 0)
        if news_bonus_uses_left > 0:
            user_data['news_bonus_uses_left'] = news_bonus_uses_left - 1
            await set_user_data(user_id, user_data)
            logger.info(f"User {user_id} consumed bonus for {model_key}. Remaining: {user_data['news_bonus_uses_left']}")
            return 

    today_str = datetime.now().strftime("%Y-%m-%d")
    all_daily_counts = bot_data.get('all_user_daily_counts', {})
    user_model_counts = all_daily_counts.get(str(user_id), {})
    model_daily_usage = user_model_counts.get(model_key, {'date': today_str, 'count': 0})
    if model_daily_usage.get('date') != today_str: model_daily_usage = {'date': today_str, 'count': 0}
    
    model_daily_usage['count'] += 1
    user_model_counts[model_key] = model_daily_usage
    all_daily_counts[str(user_id)] = user_model_counts
    bot_data['all_user_daily_counts'] = all_daily_counts
    await set_bot_data(bot_data)
    logger.info(f"User {user_id} count for {model_key} incremented to {model_daily_usage['count']}")

# --- –§–£–ù–ö–¶–ò–Ø –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ú–ï–ù–Æ (–í–ê–ñ–ù–û: –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –û–ü–†–ï–î–ï–õ–ï–ù–ê –î–û –ï–ï –í–´–ó–û–í–û–í) ---
def generate_menu_keyboard(menu_key: str) -> ReplyKeyboardMarkup:
    menu = MENU_STRUCTURE.get(menu_key)
    if not menu:
        logger.warning(f"Menu key '{menu_key}' not found. Defaulting to main_menu keyboard.")
        menu = MENU_STRUCTURE["main_menu"] 
    
    keyboard_buttons = []
    if menu_key == "main_menu":
        items = menu.get("items", [])
        for i in range(0, len(items), 2):
            row = [KeyboardButton(items[j]["text"]) for j in range(i, min(i + 2, len(items)))]
            keyboard_buttons.append(row)
    else: 
        keyboard_buttons = [[KeyboardButton(item["text"])] for item in menu.get("items", [])]
    
    if menu.get("is_submenu", False):
        nav_row = []
        if menu.get("parent"):
            nav_row.append(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
        nav_row.append(KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        keyboard_buttons.append(nav_row)
    
    return ReplyKeyboardMarkup(keyboard_buttons, resize_keyboard=True, one_time_keyboard=False)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é ---
def is_menu_button_text(text: str) -> bool:
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ–Ω –±—ã–ª –≤ –ø–æ—Ä—è–¥–∫–µ) ...
    navigation_buttons = ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    if text in navigation_buttons: return True
    for menu_config in MENU_STRUCTURE.values():
        for item in menu_config.get("items", []):
            if item["text"] == text: return True
    return False

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –ö–ù–û–ü–û–ö ---
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, menu_key: str):
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞) ...
    user_id = update.effective_user.id
    menu_config = MENU_STRUCTURE.get(menu_key)
    if not menu_config:
        logger.error(f"Menu config for '{menu_key}' not found for user {user_id}. Sending main_menu.")
        menu_key = "main_menu"
        menu_config = MENU_STRUCTURE[menu_key]
    user_data = await get_user_data(user_id)
    user_data['current_menu'] = menu_key
    await set_user_data(user_id, user_data)
    await update.message.reply_text(menu_config["title"], reply_markup=generate_menu_keyboard(menu_key), disable_web_page_preview=True)
    logger.info(f"Sent menu '{menu_key}' to user {user_id}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞) ...
    user_id = update.effective_user.id
    user_data = await get_user_data(user_id)
    user_data.setdefault('current_ai_mode', DEFAULT_AI_MODE_KEY)
    user_data['current_menu'] = 'main_menu'
    
    selected_model_key = user_data.get('selected_model_key', DEFAULT_MODEL_KEY)
    if selected_model_key not in AVAILABLE_TEXT_MODELS: selected_model_key = DEFAULT_MODEL_KEY
    
    model_conf = AVAILABLE_TEXT_MODELS[selected_model_key]
    user_data['selected_model_id'] = model_conf["id"]
    user_data['selected_api_type'] = model_conf["api_type"]
    user_data['selected_model_key'] = selected_model_key

    if context.args and context.args[0] == 'subscribe':
        await set_user_data(user_id, user_data)
        await show_subscription(update, context, user_id, called_from_start=True)
        return
    
    await set_user_data(user_id, user_data)
    
    mode_details = await get_current_mode_details(user_id)
    greeting = (f"üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n"
                f"–Ø —Ç–≤–æ–π –ò–ò-–±–æ—Ç.\n\n"
                f"üß† –†–µ–∂–∏–º: <b>{mode_details['name']}</b>\n"
                f"‚öôÔ∏è –ú–æ–¥–µ–ª—å: <b>{model_conf['name']}</b>\n\n"
                f"üí¨ –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /menu.")
    await update.message.reply_text(greeting, parse_mode=ParseMode.HTML, reply_markup=generate_menu_keyboard("main_menu"), disable_web_page_preview=True)
    logger.info(f"Sent start message to user {user_id}")


async def open_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞) ...
    if update.message: 
        try: await update.message.delete()
        except: pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å
    await show_menu(update, context, "main_menu")

async def usage_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞) ...
    if update.message: 
        try: await update.message.delete()
        except: pass
    await show_limits(update, context, update.effective_user.id)

async def subscribe_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞) ...
    if update.message: 
        try: await update.message.delete()
        except: pass
    await show_subscription(update, context, update.effective_user.id)

async def get_news_bonus_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞) ...
    if update.message: 
        try: await update.message.delete()
        except: pass
    await claim_news_bonus_logic(update, update.effective_user.id)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞) ...
    if update.message: 
        try: await update.message.delete()
        except: pass
    await show_help(update, update.effective_user.id)

async def show_limits(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –≤–∫–ª—é—á–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ context.bot.username) ...
    bot_data = await get_bot_data()
    user_data = await get_user_data(user_id)
    user_subscription_details = bot_data.get('user_subscriptions', {}).get(str(user_id), {})
    display_sub_level = "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø"
    subscription_active_profi = False
    if user_subscription_details.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY and user_subscription_details.get('valid_until'):
        try:
            valid_until_dt = datetime.fromisoformat(user_subscription_details['valid_until'])
            if datetime.now(valid_until_dt.tzinfo).date() <= valid_until_dt.date():
                display_sub_level = f"–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ (–¥–æ {valid_until_dt.strftime('%d.%m.%Y')})"
                subscription_active_profi = True
            else: display_sub_level = f"–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ (–∏—Å—Ç–µ–∫–ª–∞ {valid_until_dt.strftime('%d.%m.%Y')})"
        except Exception: display_sub_level = "–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ (–æ—à–∏–±–∫–∞ –¥–∞—Ç—ã)"

    usage_text_parts = [f"<b>üìä –í–∞—à–∏ –ª–∏–º–∏—Ç—ã</b>\n–°—Ç–∞—Ç—É—Å: <b>{display_sub_level}</b>\n"]
    bot_username = context.bot_data.get('bot_username', "YourBotName") # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è
    subscribe_cmd_link = f"https://t.me/{bot_username}?start=subscribe" if bot_username != "YourBotName" else "/subscribe (—á–µ—Ä–µ–∑ –º–µ–Ω—é)"
    if not subscription_active_profi: usage_text_parts.append(f"–î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ <a href='{subscribe_cmd_link}'>üíé –æ—Ñ–æ—Ä–º–∏—Ç–µ –ü–æ–¥–ø–∏—Å–∫—É –ü—Ä–æ—Ñ–∏</a>.")
    
    usage_text_parts.append("\n<b>–î–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>")
    for model_k, model_c in AVAILABLE_TEXT_MODELS.items():
        if model_c.get("is_limited"):
            today_str = datetime.now().strftime("%Y-%m-%d")
            user_model_counts = bot_data.get('all_user_daily_counts', {}).get(str(user_id), {})
            model_daily_usage = user_model_counts.get(model_k, {'date': '', 'count': 0})
            current_c = model_daily_usage['count'] if model_daily_usage.get('date') == today_str else 0
            actual_l = await get_user_actual_limit_for_model(user_id, model_k)
            bonus_n = ""
            if model_k == NEWS_CHANNEL_BONUS_MODEL_KEY and not subscription_active_profi and user_data.get('claimed_news_bonus', False) and (b_left := user_data.get('news_bonus_uses_left', 0)) > 0:
                bonus_n = f" (–≤–∫–ª. {b_left} –±–æ–Ω—É—Å–Ω.)"
            usage_text_parts.append(f"‚ñ´Ô∏è {model_c['name']}: <b>{current_c}/{actual_l if actual_l != float('inf') else '‚àû'}</b>{bonus_n}")

    if NEWS_CHANNEL_USERNAME and NEWS_CHANNEL_USERNAME != "@YourNewsChannelHandle" and not subscription_active_profi:
        bonus_model_cfg = AVAILABLE_TEXT_MODELS.get(NEWS_CHANNEL_BONUS_MODEL_KEY)
        if bonus_model_cfg:
            bonus_model_nm = bonus_model_cfg['name']
            if not user_data.get('claimed_news_bonus', False):
                usage_text_parts.append(f'\nüéÅ <a href="{NEWS_CHANNEL_LINK}">–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª</a> –∏ –ø–æ–ª—É—á–∏—Ç–µ <b>{NEWS_CHANNEL_BONUS_GENERATIONS}</b> –±–æ–Ω—É—Å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è {bonus_model_nm}!')
            elif (b_left := user_data.get('news_bonus_uses_left', 0)) > 0:
                usage_text_parts.append(f'\nüéÅ –£ –≤–∞—Å <b>{b_left}</b> –±–æ–Ω—É—Å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è {bonus_model_nm} (<a href="{NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª</a>).')
            else: usage_text_parts.append(f'\n‚ÑπÔ∏è –ë–æ–Ω—É—Å –¥–ª—è {bonus_model_nm} (<a href="{NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª</a>) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.')
    
    final_usage_text = "\n".join(filter(None, usage_text_parts))
    reply_markup = generate_menu_keyboard(user_data.get('current_menu', 'limits_submenu'))
    await update.message.reply_text(final_usage_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup, disable_web_page_preview=True)
    logger.info(f"Sent limits to user {user_id}")


async def claim_news_bonus_logic(update: Update, user_id: int):
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞) ...
    user = update.effective_user
    user_data = await get_user_data(user_id)
    if update.message: try: await update.message.delete() catch: pass

    if not NEWS_CHANNEL_USERNAME or NEWS_CHANNEL_USERNAME == "@YourNewsChannelHandle":
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –±–æ–Ω—É—Å–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.", reply_markup=generate_menu_keyboard(user_data.get('current_menu', 'main_menu')))
        return
    bonus_model_config = AVAILABLE_TEXT_MODELS.get(NEWS_CHANNEL_BONUS_MODEL_KEY)
    if not bonus_model_config:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ë–æ–Ω—É—Å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=generate_menu_keyboard(user_data.get('current_menu', 'main_menu')))
        return
    bonus_model_name = bonus_model_config['name']
    
    bot_data = await get_bot_data() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ü—Ä–æ—Ñ–∏
    user_subscriptions = bot_data.get('user_subscriptions', {})
    user_subscription_details = user_subscriptions.get(str(user_id), {})
    if user_subscription_details.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY:
        try:
            valid_until_dt = datetime.fromisoformat(user_subscription_details['valid_until'])
            if datetime.now(valid_until_dt.tzinfo).date() <= valid_until_dt.date():
                await update.message.reply_text(f"üíé –í—ã –ü—Ä–æ—Ñ–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫, –±–æ–Ω—É—Å –∑–∞ –∫–∞–Ω–∞–ª –Ω–µ —Å—É–º–º–∏—Ä—É–µ—Ç—Å—è.", reply_markup=generate_menu_keyboard(user_data.get('current_menu', 'main_menu')))
                return
        except: pass

    if user_data.get('claimed_news_bonus', False):
        uses_left = user_data.get('news_bonus_uses_left', 0)
        reply_text = f'–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å. –û—Å—Ç–∞–ª–æ—Å—å <b>{uses_left}</b> –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è {bonus_model_name} (<a href="{NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª</a>).' if uses_left > 0 else f'–ë–æ–Ω—É—Å –¥–ª—è {bonus_model_name} (<a href="{NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª</a>) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.'
        await update.message.reply_text(reply_text, parse_mode=ParseMode.HTML, reply_markup=generate_menu_keyboard(user_data.get('current_menu', 'main_menu')), disable_web_page_preview=True)
        return
    try:
        member_status = await update.get_bot().get_chat_member(chat_id=NEWS_CHANNEL_USERNAME, user_id=user.id)
        if member_status.status in ['member', 'administrator', 'creator']:
            user_data.update({'claimed_news_bonus': True, 'news_bonus_uses_left': NEWS_CHANNEL_BONUS_GENERATIONS})
            await set_user_data(user_id, user_data)
            success_text = f'üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ <a href="{NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª</a>! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ <b>{NEWS_CHANNEL_BONUS_GENERATIONS}</b> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è {bonus_model_name}.'
            await update.message.reply_text(success_text, parse_mode=ParseMode.HTML, reply_markup=generate_menu_keyboard('main_menu'), disable_web_page_preview=True)
        else:
            fail_text = f'–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ <a href="{NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª</a> –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–ª—É—á–∏—Ç—å¬ª —Å–Ω–æ–≤–∞.'
            await update.message.reply_text(fail_text, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"üì¢ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ {NEWS_CHANNEL_USERNAME}", url=NEWS_CHANNEL_LINK)]]), disable_web_page_preview=True)
    except telegram.error.BadRequest as e:
        logger.error(f"BadRequest checking channel membership for {NEWS_CHANNEL_USERNAME}: {e}")
        await update.message.reply_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ <a href="{NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª</a>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(f"üì¢ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ {NEWS_CHANNEL_USERNAME}", url=NEWS_CHANNEL_LINK)]]), disable_web_page_preview=True)

async def show_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, called_from_start: bool = False):
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞) ...
    bot_data = await get_bot_data()
    user_data = await get_user_data(user_id)
    user_subscription_details = bot_data.get('user_subscriptions', {}).get(str(user_id), {})
    sub_text_parts = ["<b>üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏</b>\n"]
    is_active_profi = False
    if user_subscription_details.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY and user_subscription_details.get('valid_until'):
        try:
            valid_until_dt = datetime.fromisoformat(user_subscription_details['valid_until'])
            if datetime.now(valid_until_dt.tzinfo).date() <= valid_until_dt.date():
                sub_text_parts.append(f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{valid_until_dt.strftime('%d.%m.%Y')}</b>.")
                is_active_profi = True
            else: sub_text_parts.append(f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ <b>{valid_until_dt.strftime('%d.%m.%Y')}</b>.")
        except Exception: sub_text_parts.append("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏.")

    if not is_active_profi:
        sub_text_parts.append("–° –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:")
        sub_text_parts.append(f"‚ñ´Ô∏è –õ–∏–º–∏—Ç—ã: Gemini 2.5 - {DEFAULT_SUBSCRIPTION_REQUESTS_GOOGLE_FLASH_PREVIEW_DAILY}, Gemini Pro - {DEFAULT_SUBSCRIPTION_REQUESTS_CUSTOM_PRO_DAILY}, Grok 3 - {DEFAULT_SUBSCRIPTION_REQUESTS_GROK_DAILY}.")
        sub_text_parts.append("‚ñ´Ô∏è –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º –º–æ–¥–µ–ª—è–º.")
        sub_text_parts.append("\n<b>–°—Ç–æ–∏–º–æ—Å—Ç—å: [–í–ê–®–ê_–¶–ï–ù–ê] [–í–ê–õ–Æ–¢–ê] / 30 –¥–Ω–µ–π.</b>") # –ó–ê–ú–ï–ù–ò–¢–¨
        sub_text_parts.append(f"\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /pay –∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")
    
    final_sub_text = "\n".join(sub_text_parts)
    keyboard_inline = []
    if not is_active_profi:
        keyboard_inline.append([InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ü–æ–¥–ø–∏—Å–∫—É –ü—Ä–æ—Ñ–∏", callback_data="initiate_payment_profi")]) # –ó–∞–º–µ–Ω–∏—Ç–µ callback_data –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    parent_menu_key = 'main_menu' if called_from_start else user_data.get('current_menu', 'subscription_submenu')
    reply_markup_to_send = InlineKeyboardMarkup(keyboard_inline) if keyboard_inline else generate_menu_keyboard(parent_menu_key)
    
    await update.message.reply_text(final_sub_text, parse_mode=ParseMode.HTML, reply_markup=reply_markup_to_send, disable_web_page_preview=True)
    if not keyboard_inline and not called_from_start and parent_menu_key != 'main_menu' : # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –∏ —ç—Ç–æ –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤
         await update.message.reply_text("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:", reply_markup=generate_menu_keyboard(parent_menu_key))
    logger.info(f"Sent subscription info to user {user_id}")

async def show_help(update: Update, user_id: int):
    # ... (–∫–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞) ...
    user_data = await get_user_data(user_id)
    if update.message: try: await update.message.delete() catch: pass
    help_text = ("<b>‚ùì –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
        "–Ø ‚Äî –ò–ò-–±–æ—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚ñ´Ô∏è –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö –ò–ò.\n"
        "‚ñ´Ô∏è –ú–µ–Ω—è—Ç—å –º–æ–¥–µ–ª–∏ –∏ —Ä–µ–∂–∏–º—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é (/menu).\n"
        "‚ñ´Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (/usage).\n"
        "‚ñ´Ô∏è –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (/bonus).\n"
        "‚ñ´Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ü—Ä–æ—Ñ–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ (/subscribe).\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /start.")
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML, reply_markup=generate_menu_keyboard(user_data.get('current_menu', 'help_submenu')), disable_web_page_preview=True)
    logger.info(f"Sent help message to user {user_id}")

# –ò–°–ü–†–ê–í–õ–ï–ù: menu_button_handler –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥–≤–æ–π–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
async def menu_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    button_text = update.message.text.strip()
    
    user_data = await get_user_data(user_id)
    current_menu_key = user_data.get('current_menu', 'main_menu')
    current_menu_config = MENU_STRUCTURE.get(current_menu_key, MENU_STRUCTURE['main_menu'])
    
    selected_item = None
    action_taken_by_menu_handler = False

    # 1. –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if button_text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" and current_menu_config.get("parent"):
        selected_item = {"action": "navigate_back", "target": current_menu_config["parent"]}
    elif button_text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        selected_item = {"action": "navigate_home", "target": "main_menu"}
    
    # 2. –ö–Ω–æ–ø–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—é
    if not selected_item:
        selected_item = next((item for item in current_menu_config.get("items", []) if item["text"] == button_text), None)

    if selected_item: # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è
        action_taken_by_menu_handler = True
        if update.message:
            try: await update.message.delete()
            except Exception as e: logger.warning(f"Could not delete user's button message: {e}")

        action = selected_item["action"]
        target = selected_item["target"]
        logger.info(f"User {user_id} (menu: {current_menu_key}) -> Button: '{button_text}', Action: '{action}', Target: '{target}'")

        if action == "submenu" or action == "navigate_back" or action == "navigate_home":
            await show_menu(update, context, target)
        elif action == "set_agent":
            return_menu_key = current_menu_config.get("parent", "main_menu")
            if target in AI_MODES and target not in ["gemini_pro_custom_mode", "grok_3_custom_mode"]:
                user_data['current_ai_mode'] = target
                await set_user_data(user_id, user_data)
                mode_details = AI_MODES[target]
                new_text = f"ü§ñ –†–µ–∂–∏–º –ò–ò: <b>{mode_details['name']}</b>\n\n{mode_details['welcome']}"
            else: new_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞: –†–µ–∂–∏–º –Ω–µ –Ω–∞–π–¥–µ–Ω."
            await update.message.reply_text(new_text, parse_mode=ParseMode.HTML, reply_markup=generate_menu_keyboard(return_menu_key), disable_web_page_preview=True)
            user_data['current_menu'] = return_menu_key
            await set_user_data(user_id, user_data)
        elif action == "set_model":
            return_menu_key = current_menu_config.get("parent", "main_menu")
            if target in AVAILABLE_TEXT_MODELS:
                model_cfg = AVAILABLE_TEXT_MODELS[target]
                user_data.update({'selected_model_id': model_cfg["id"], 'selected_api_type': model_cfg["api_type"], 'selected_model_key': target})
                await set_user_data(user_id, user_data)
                bot_data_s, today_s = await get_bot_data(), datetime.now().strftime("%Y-%m-%d")
                user_counts_s = bot_data_s.get('all_user_daily_counts', {}).get(str(user_id), {})
                model_usage_s = user_counts_s.get(target, {'date': '', 'count': 0})
                count_display_s = model_usage_s['count'] if model_usage_s.get('date') == today_s else 0
                limit_actual_s = await get_user_actual_limit_for_model(user_id, target)
                limit_str_s = f"–õ–∏–º–∏—Ç: {count_display_s}/{limit_actual_s if limit_actual_s != float('inf') else '‚àû'}"
                effective_mode_s = await get_current_mode_details(user_id)
                new_text = (f"‚öôÔ∏è –ú–æ–¥–µ–ª—å: <b>{model_cfg['name']}</b>.\n"
                            f"üß† –†–µ–∂–∏–º –¥–ª—è –Ω–µ—ë: <b>{effective_mode_s['name']}</b>.\n{limit_str_s}")
            else: new_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            await update.message.reply_text(new_text, parse_mode=ParseMode.HTML, reply_markup=generate_menu_keyboard(return_menu_key), disable_web_page_preview=True)
            user_data['current_menu'] = return_menu_key
            await set_user_data(user_id, user_data)
        elif action == "show_limits": await show_limits(update, context, user_id)
        elif action == "check_bonus": await claim_news_bonus_logic(update, user_id)
        elif action == "show_subscription": await show_subscription(update, context, user_id)
        elif action == "show_help": await show_help(update, user_id)
        else: await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=generate_menu_keyboard(current_menu_key))
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—é –∏ –Ω–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—è, –Ω–æ —è–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é –í–û–û–ë–©–ï (—Å—Ç–∞—Ä–∞—è –∫–Ω–æ–ø–∫–∞)
    elif not action_taken_by_menu_handler and is_menu_button_text(button_text):
        logger.warning(f"User {user_id} pressed out-of-context menu button: '{button_text}'. Current menu: '{current_menu_key}'.")
        if update.message:
            try: await update.message.delete()
            except: pass
        await update.message.reply_text("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é.", reply_markup=generate_menu_keyboard(current_menu_key))
        action_taken_by_menu_handler = True # –°—á–∏—Ç–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π, —á—Ç–æ–±—ã –Ω–µ —É—à–ª–æ –≤ handle_text

    # –ï—Å–ª–∏ action_taken_by_menu_handler –≤—Å–µ –µ—â–µ False, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –Ω–µ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é
    # –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ handle_text (–≥—Ä—É–ø–ø–∞ 2) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    # –ü–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω —è–≤–Ω—ã–π –≤—ã–∑–æ–≤ handle_text –∏–ª–∏ return –±–µ–∑ —É—Å–ª–æ–≤–∏—è.
    if not action_taken_by_menu_handler:
        logger.info(f"Text '{button_text}' from user {user_id} not handled by menu_button_handler, passing to next handler.")
        # –ù–µ –¥–µ–ª–∞–µ–º return, –ø–æ–∑–≤–æ–ª—è–µ–º telegram.ext –ø–µ—Ä–µ–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É

# –ò–°–ü–†–ê–í–õ–ï–ù–û: handle_text –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Grok –∏ –æ–±—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text.strip()
    chat_id = update.effective_chat.id

    if len(user_message) < MIN_AI_REQUEST_LENGTH:
        logger.info(f"AI Request too short from user {user_id}: '{user_message}'")
        user_data = await get_user_data(user_id)
        await update.message.reply_text(
            "–ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.",
            reply_markup=generate_menu_keyboard(user_data.get('current_menu', 'main_menu'))
        )
        return

    logger.info(f"Processing AI request from user {user_id}: '{user_message[:100]}...'")

    current_model_key = await get_current_model_key(user_id)
    model_config = AVAILABLE_TEXT_MODELS.get(current_model_key)
    if not model_config:
        logger.error(f"CRITICAL: model_config is None for key '{current_model_key}' (user {user_id}).")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.", reply_markup=generate_menu_keyboard('main_menu'))
        return

    bot_username = context.bot_data.get('bot_username', "YourBotName")
    can_proceed, limit_message, _ = await check_and_log_request_attempt(user_id, current_model_key, bot_username)

    if not can_proceed:
        user_data = await get_user_data(user_id)
        await update.message.reply_text(
            limit_message, parse_mode=ParseMode.HTML,
            reply_markup=generate_menu_keyboard(user_data.get('current_menu', 'main_menu')),
            disable_web_page_preview=True)
        logger.info(f"User {user_id} limit reached for {current_model_key}.")
        return

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    mode_details = await get_current_mode_details(user_id)
    system_prompt = mode_details["prompt"]
    response_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò." # Default

    if model_config["api_type"] == "google_genai":
        full_prompt_genai = f"{system_prompt}\n\n**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å:**\n{user_message}"
        genai_model_instance = genai.GenerativeModel(model_config["id"], generation_config={"max_output_tokens": MAX_OUTPUT_TOKENS_GEMINI_LIB})
        try:
            api_resp = await asyncio.get_event_loop().run_in_executor(None, lambda: genai_model_instance.generate_content(full_prompt_genai))
            if api_resp.text: response_text = api_resp.text.strip()
            elif hasattr(api_resp, 'parts') and api_resp.parts:
                response_text = "\n".join([p.text for p in api_resp.parts if hasattr(p, 'text')]).strip() or "–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞."
            elif hasattr(api_resp, 'prompt_feedback') and api_resp.prompt_feedback.block_reason:
                response_text = f"–ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {api_resp.prompt_feedback.block_reason_message or api_resp.prompt_feedback.block_reason}"
            if not response_text.strip(): response_text = "–ò–ò –Ω–µ –¥–∞–ª —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."
        except google.api_core.exceptions.ResourceExhausted:
            response_text = "–õ–∏–º–∏—Ç API Google GenAI –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            logger.error(f"Google GenAI ResourceExhausted: user {user_id}, model {model_config['id']}")
        except Exception as e:
            response_text = f"–û—à–∏–±–∫–∞ Google GenAI: {type(e).__name__}."
            logger.error(f"Google GenAI API error: user {user_id}, model {model_config['id']}: {traceback.format_exc()}")

    elif model_config["api_type"] == "custom_http_api":
        api_key_name = model_config.get("api_key_var_name")
        api_key_val = globals().get(api_key_name) if api_key_name else None
        if not api_key_val:
            response_text = "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –∫–ª—é—á–∞ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏."
            logger.error(f"API key '{api_key_name}' not found for model {current_model_key}.")
        else:
            headers = {"Authorization": f"Bearer {api_key_val}", "Content-Type": "application/json", "Accept": "application/json"}
            payload = {"messages": [{"role": "system", "content": system_prompt}, {"role": "user", "content": user_message}],
                       "model": model_config["id"], "is_sync": True, "max_tokens": MAX_OUTPUT_TOKENS_GEMINI_LIB,
                       "temperature": 1.0, "top_p": 1.0, "n": 1}
            try:
                http_resp = await asyncio.get_event_loop().run_in_executor(None, lambda: requests.post(model_config["endpoint"], headers=headers, json=payload, timeout=45))
                http_resp.raise_for_status()
                resp_data = http_resp.json()
                extracted_text = None

                if model_config["id"] == "grok-3-beta":
                    try: # –ù–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è Grok –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–æ–≤
                        resp_list = resp_data.get("response")
                        if resp_list and isinstance(resp_list, list) and resp_list:
                            choices_list = resp_list[0].get("choices")
                            if choices_list and isinstance(choices_list, list) and choices_list:
                                msg_obj = choices_list[0].get("message")
                                if msg_obj and isinstance(msg_obj, dict):
                                    content_obj = msg_obj.get("content")
                                    if content_obj and isinstance(content_obj, dict):
                                        text_cand = content_obj.get("text")
                                        if text_cand and isinstance(text_cand, str): extracted_text = text_cand.strip()
                    except Exception as e_grok_parse:
                        logger.error(f"Error parsing specific Grok-3 response (user {user_id}): {e_grok_parse}. Data: {str(resp_data)[:300]}")
                    if not extracted_text: # –§–æ–ª–ª–±—ç–∫ –¥–ª—è Grok
                        if isinstance(resp_data.get("output"), str): extracted_text = resp_data["output"].strip()
                        elif isinstance(resp_data.get("text"), str): extracted_text = resp_data["text"].strip()
                
                elif model_config["id"] == "gemini-2.5-pro-preview-03-25":
                    if isinstance(resp_data.get("text"), str): extracted_text = resp_data["text"].strip()
                    elif isinstance(resp_data.get("output"), str): extracted_text = resp_data["output"].strip() # –§–æ–ª–ª–±—ç–∫

                if extracted_text: response_text = extracted_text
                else:
                    response_text = "–û—Ç–≤–µ—Ç –æ—Ç API –ø–æ–ª—É—á–µ–Ω, –Ω–æ —Ç–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á—å –Ω–µ —É–¥–∞–ª–æ—Å—å."
                    logger.warning(f"Could not extract text from Custom API model {model_config['id']}, user {user_id}. Response: {str(resp_data)[:300]}")

            except requests.exceptions.Timeout:
                response_text, logger.error(f"Custom API Timeout: user {user_id}, model {model_config['id']}.")
            except requests.exceptions.RequestException as e:
                response_text, logger.error(f"Custom API Network Error: user {user_id}, model {model_config['id']}: {e}")
            except json.JSONDecodeError as e:
                response_text, logger.error(f"Custom API JSONDecodeError: user {user_id}, model {model_config['id']}: {e}. Response: {http_resp.text[:200] if 'http_resp' in locals() else 'N/A'}")
            except Exception as e:
                response_text, logger.error(f"Unexpected Custom API error: user {user_id}, model {model_config['id']}: {traceback.format_exc()}")
    else:
        response_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø API –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏."
        logger.error(f"Unknown api_type '{model_config.get('api_type')}' for model '{current_model_key}', user {user_id}")

    final_response_text, was_truncated = smart_truncate(response_text, MAX_MESSAGE_LENGTH_TELEGRAM)
    if was_truncated: logger.info(f"Response (user {user_id}, model {current_model_key}) truncated.")

    await increment_request_count(user_id, current_model_key)
    user_data_reply = await get_user_data(user_id)
    await update.message.reply_text(
        final_response_text, parse_mode=None,
        reply_markup=generate_menu_keyboard(user_data_reply.get('current_menu', 'main_menu')),
        disable_web_page_preview=True)
    logger.info(f"Sent AI response to user {user_id} (model {current_model_key}). Trunc: {was_truncated}. Start: '{final_response_text[:70].replace(chr(10), ' ')}...'")

# ... (precheckout_callback, successful_payment_callback, error_handler, main, if __name__ ...)
# –ö–æ–¥ —ç—Ç–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ —Ü–µ–ª–æ–º –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
# –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ bot_username –≤ error_handler, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –Ω—É–∂–µ–Ω –¥–ª—è —Å—Å—ã–ª–æ–∫.
# –í error_handler context.bot.username –¥–æ—Å—Ç—É–ø–µ–Ω.

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    if PRO_SUBSCRIPTION_LEVEL_KEY not in query.invoice_payload :
        await query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏.")
        logger.warning(f"PreCheckoutQuery invalid payload: {query.invoice_payload} from user {query.from_user.id}")
        return
    await query.answer(ok=True)
    logger.info(f"PreCheckoutQuery OK for user {query.from_user.id}, payload: {query.invoice_payload}")

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    payment = update.message.successful_payment
    if PRO_SUBSCRIPTION_LEVEL_KEY in payment.invoice_payload:
        days = 30 
        valid_until = datetime.now().astimezone() + timedelta(days=days)
        bot_data = await get_bot_data()
        user_subscriptions = bot_data.get('user_subscriptions', {})
        user_subscriptions[str(user_id)] = {
            'level': PRO_SUBSCRIPTION_LEVEL_KEY, 'valid_until': valid_until.isoformat(),
            'charge_id': payment.telegram_payment_charge_id, 'amount': payment.total_amount, 'currency': payment.currency
        }
        bot_data['user_subscriptions'] = user_subscriptions
        await set_bot_data(bot_data)
        text = f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ <b>–ü—Ä–æ—Ñ–∏</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ <b>{valid_until.strftime('%d.%m.%Y %H:%M %Z')}</b>!"
        await update.message.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=generate_menu_keyboard('main_menu'))
        logger.info(f"Profi subscription for user {user_id} until {valid_until.isoformat()}")
        if YOUR_ADMIN_ID:
            admin_msg = f"User {user_id} ({update.effective_user.full_name or ''} @{update.effective_user.username or ''}) bought Profi subscription."
            try: await context.bot.send_message(chat_id=YOUR_ADMIN_ID, text=admin_msg)
            except Exception as e_admin: logger.error(f"Failed to send payment notification to admin: {e_admin}")
    else:
        logger.warning(f"Success payment with unhandled payload: {payment.invoice_payload} from user {user_id}")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
    tb_string = "".join(tb_list)
    update_str = str(update)
    if isinstance(update, Update): update_str = json.dumps(update.to_dict(), indent=1, ensure_ascii=False, default=str)

    error_message_for_admin = (
        f"<b>–ë–æ—Ç —Å—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!</b>\n\n"
        f"<b>Update:</b> <pre>{html.escape(update_str)}</pre>\n"
        f"<b>Chat Data:</b> <pre>{html.escape(str(context.chat_data))}</pre>\n"
        f"<b>User Data:</b> <pre>{html.escape(str(context.user_data))}</pre>\n"
        f"<b>Error:</b> <pre>{html.escape(str(context.error))}</pre>\n"
        f"<b>Traceback:</b>\n<pre>{html.escape(tb_string)}</pre>"
    )
    if YOUR_ADMIN_ID:
        try:
            for chunk in [error_message_for_admin[i:i + MAX_MESSAGE_LENGTH_TELEGRAM] for i in range(0, len(error_message_for_admin), MAX_MESSAGE_LENGTH_TELEGRAM)]:
                await context.bot.send_message(chat_id=YOUR_ADMIN_ID, text=chunk, parse_mode=ParseMode.HTML)
        except Exception as e_admin: logger.error(f"Failed to send error to admin: {e_admin}")

    if isinstance(update, Update) and update.effective_message and update.effective_user:
        try:
            user_data_err = await get_user_data(update.effective_user.id)
            await update.effective_message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.",
                reply_markup=generate_menu_keyboard(user_data_err.get('current_menu', 'main_menu')))
        except Exception as e_user: logger.error(f"Failed to send error reply to user: {e_user}")


async def main():
    application = Application.builder().token(TOKEN).build()
    bot_info = await application.bot.get_me()
    application.bot_data['bot_username'] = bot_info.username # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å—Å—ã–ª–æ–∫
    logger.info(f"Bot @{application.bot_data['bot_username']} started.")

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", open_menu_command))
    application.add_handler(CommandHandler("usage", usage_command))
    application.add_handler(CommandHandler("subscribe", subscribe_info_command))
    application.add_handler(CommandHandler("bonus", get_news_bonus_info_command))
    application.add_handler(CommandHandler("help", help_command))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_button_handler), group=1)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text), group=2)
    
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    application.add_error_handler(error_handler)

    commands = [BotCommand("start", "üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ / –ú–µ–Ω—é"), BotCommand("menu", "üìã –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"), BotCommand("usage", "üìä –õ–∏–º–∏—Ç—ã"), BotCommand("subscribe", "üíé –ü–æ–¥–ø–∏—Å–∫–∞"), BotCommand("bonus", "üéÅ –ë–æ–Ω—É—Å"), BotCommand("help", "‚ùì –ü–æ–º–æ—â—å")]
    try:
        await application.bot.set_my_commands(commands)
        logger.info("Bot commands set.")
    except Exception as e: logger.error(f"Failed to set bot commands: {e}")

    logger.info("Bot is starting polling...")
    await application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    for key_name, key_value in [("GOOGLE_GEMINI_API_KEY", GOOGLE_GEMINI_API_KEY), 
                               ("CUSTOM_GEMINI_PRO_API_KEY", CUSTOM_GEMINI_PRO_API_KEY), 
                               ("CUSTOM_GROK_3_API_KEY", CUSTOM_GROK_3_API_KEY),
                               ("PAYMENT_PROVIDER_TOKEN", PAYMENT_PROVIDER_TOKEN)]:
        if not key_value or "YOUR_" in key_value.upper() or ("sk-" not in key_value and "AIzaSy" not in key_value and key_name != "PAYMENT_PROVIDER_TOKEN") or (key_name == "PAYMENT_PROVIDER_TOKEN" and ":" not in key_value):
            logger.warning(f"{key_name} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫–∞.")
            if key_name == "TOKEN": exit(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {key_name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!") # –í—ã—Ö–æ–¥, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    if GOOGLE_GEMINI_API_KEY and "AIzaSy" in GOOGLE_GEMINI_API_KEY: # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Gemini, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        try:
            genai.configure(api_key=GOOGLE_GEMINI_API_KEY)
            logger.info("Google Gemini API —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω.")
        except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Google Gemini API: {e}")
    asyncio.run(main())
