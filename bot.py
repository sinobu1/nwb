import telegram
from telegram import (
    ReplyKeyboardMarkup, KeyboardButton, Update,
    BotCommand, InlineKeyboardButton, InlineKeyboardMarkup,
    LabeledPrice
)
from telegram.constants import ParseMode, ChatAction
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, PreCheckoutQueryHandler, CallbackQueryHandler # –î–æ–±–∞–≤–ª–µ–Ω CallbackQueryHandler
)
import google.generativeai as genai
import google.api_core.exceptions
import requests # –û—Å—Ç–∞–≤–ª–µ–Ω, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ü–µ–ª–µ–π, –∏–Ω–∞—á–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
import logging
import traceback
import os
import asyncio
import nest_asyncio
import json
from datetime import datetime, timedelta, timezone
from typing import Optional, Dict, Any, Tuple, List # –£–ª—É—á—à–µ–Ω—ã –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤
import uuid

# Firebase
import firebase_admin
from firebase_admin import credentials, firestore, initialize_app
from firebase_admin.exceptions import FirebaseError
from google.cloud.firestore_v1.client import Client as FirestoreClient # –Ø–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏

nest_asyncio.apply()

# --- –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
# –ü—Ä–∏–Ω—Ü–∏–ø: –Ø—Å–Ω–æ—Å—Ç—å –∏ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
# –ü—Ä–∏–Ω—Ü–∏–ø: DRY (Don't Repeat Yourself) –∏ –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –≤–º–µ—Å—Ç–æ "–º–∞–≥–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–æ–∫" —É–ª—É—á—à–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∏ —É–ø—Ä–æ—â–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è.

# –ö–ª—é—á–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
CONFIG_TELEGRAM_TOKEN = "TELEGRAM_TOKEN"
CONFIG_GEMINI_API_KEY = "GOOGLE_GEMINI_API_KEY"
CONFIG_FIREBASE_CRED_PATH = "FIREBASE_CREDENTIALS_PATH"
CONFIG_FIREBASE_DB_URL = "FIREBASE_DATABASE_URL" # –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Realtime Database URL
CONFIG_ADMIN_USER_ID = "ADMIN_USER_ID"
CONFIG_FREE_DAILY_LIMIT = "FREE_DAILY_LIMIT"
CONFIG_BONUS_CHANNEL_ID = "BONUS_CHANNEL_ID"
CONFIG_BONUS_CHANNEL_LINK = "BONUS_CHANNEL_LINK"
CONFIG_PAYMENT_PROVIDER_TOKEN = "PAYMENT_PROVIDER_TOKEN"
CONFIG_PRICE_AMOUNT_RUB = "PRICE_AMOUNT_RUB" # –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (e.g., 10000 for 100 RUB)
CONFIG_PRICE_LABEL = "PRICE_LABEL"
CONFIG_PRICE_DESCRIPTION = "PRICE_DESCRIPTION"
CONFIG_CURRENCY = "RUB" # –í–∞–ª—é—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞

# –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π Firestore
FIRESTORE_USERS_COLLECTION = "users"
FIRESTORE_PAYMENTS_COLLECTION = "payments"

# –¢–µ–∫—Å—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–∏–º–µ—Ä—ã)
TEXT_MENU_BUTTON = "üìã –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"
TEXT_USAGE_BUTTON = "üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã"
TEXT_SUBSCRIBE_BUTTON = "üíé –û –ø–æ–¥–ø–∏—Å–∫–µ"
# ... –¥—Ä—É–≥–∏–µ —Ç–µ–∫—Å—Ç—ã

# Callback data –ø—Ä–µ—Ñ–∏–∫—Å—ã (–¥–ª—è Inline –∫–Ω–æ–ø–æ–∫)
CALLBACK_PREFIX_ACTION = "action:"
# ... –¥—Ä—É–≥–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã

# --- –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ---
# –ü—Ä–∏–Ω—Ü–∏–ø: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, KISS
# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
def load_config() -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Firebase credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_firebase_creds_path = os.path.join(os.path.dirname(__file__), "firebase_credentials.json")

    config = {
        CONFIG_TELEGRAM_TOKEN: os.getenv(CONFIG_TELEGRAM_TOKEN, "YOUR_TELEGRAM_TOKEN"), # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
        CONFIG_GEMINI_API_KEY: os.getenv(CONFIG_GEMINI_API_KEY, "YOUR_GEMINI_API_KEY"), # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á
        CONFIG_FIREBASE_CRED_PATH: os.getenv(CONFIG_FIREBASE_CRED_PATH, default_firebase_creds_path),
        CONFIG_FIREBASE_DB_URL: os.getenv(CONFIG_FIREBASE_DB_URL, ""), # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Firestore, —ç—Ç–æ –º–æ–∂–µ—Ç –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
        CONFIG_ADMIN_USER_ID: int(os.getenv(CONFIG_ADMIN_USER_ID, "0")), # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        CONFIG_FREE_DAILY_LIMIT: int(os.getenv(CONFIG_FREE_DAILY_LIMIT, 5)),
        CONFIG_BONUS_CHANNEL_ID: os.getenv(CONFIG_BONUS_CHANNEL_ID, ""),
        CONFIG_BONUS_CHANNEL_LINK: os.getenv(CONFIG_BONUS_CHANNEL_LINK, ""),
        CONFIG_PAYMENT_PROVIDER_TOKEN: os.getenv(CONFIG_PAYMENT_PROVIDER_TOKEN, "YOUR_PAYMENT_PROVIDER_TOKEN"),
        CONFIG_PRICE_AMOUNT_RUB: int(os.getenv(CONFIG_PRICE_AMOUNT_RUB, 10000)), # –ü—Ä–∏–º–µ—Ä: 100 —Ä—É–±–ª–µ–π
        CONFIG_PRICE_LABEL: os.getenv(CONFIG_PRICE_LABEL, "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞"),
        CONFIG_PRICE_DESCRIPTION: os.getenv(CONFIG_PRICE_DESCRIPTION, "–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ 30 –¥–Ω–µ–π"),
    }

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if "YOUR_" in config[CONFIG_TELEGRAM_TOKEN] or not config[CONFIG_TELEGRAM_TOKEN]:
        logger.critical(f"{CONFIG_TELEGRAM_TOKEN} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–æ–ª–∂–Ω—ã–º –æ–±—Ä–∞–∑–æ–º. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        raise ValueError(f"{CONFIG_TELEGRAM_TOKEN} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
    if "YOUR_" in config[CONFIG_GEMINI_API_KEY] or not config[CONFIG_GEMINI_API_KEY]:
        logger.warning(f"{CONFIG_GEMINI_API_KEY} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ.")
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞–∂–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏

    return config

CONFIG = load_config()

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FIREBASE ---
# –ü—Ä–∏–Ω—Ü–∏–ø: SRP (Single Responsibility Principle), –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
# –û—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase.
db: Optional[FirestoreClient] = None # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ Firestore

def initialize_firebase_app() -> Optional[FirestoreClient]:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Firebase –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç Firestore."""
    global db
    try:
        cred_path = CONFIG[CONFIG_FIREBASE_CRED_PATH]
        if not os.path.exists(cred_path):
            logger.error(f"–§–∞–π–ª Firebase credentials –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {cred_path}")
            return None

        cred = credentials.Certificate(cred_path)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–∂–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not firebase_admin._apps:
            firebase_options = {'databaseURL': CONFIG[CONFIG_FIREBASE_DB_URL]} if CONFIG[CONFIG_FIREBASE_DB_URL] else {}
            initialize_app(cred, options=firebase_options)
            logger.info("Firebase –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")
        else:
            logger.info("Firebase –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")

        db = firestore.client()
        logger.info("–ö–ª–∏–µ–Ω—Ç Firestore —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.")
        return db
    except FirebaseError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: {e}")
        logger.error(traceback.format_exc())
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: {e}")
        logger.error(traceback.format_exc())
    return None

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø GOOGLE GEMINI ---
# –ü—Ä–∏–Ω—Ü–∏–ø: SRP, –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
def configure_gemini_api():
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç Google Gemini API."""
    api_key = CONFIG[CONFIG_GEMINI_API_KEY]
    if api_key and "YOUR_" not in api_key and api_key.startswith("AIzaSy"):
        try:
            genai.configure(api_key=api_key)
            logger.info("Google Gemini API —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Google Gemini API: {e}")
            logger.error(traceback.format_exc())
    else:
        logger.warning(f"{CONFIG_GEMINI_API_KEY} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Gemini –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

# --- –£–¢–ò–õ–ò–¢–´ FIREBASE ---
# –ü—Ä–∏–Ω—Ü–∏–ø: DRY, SRP, –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å, –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Firestore, –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É—é—â–∏–µ –ª–æ–≥–∏–∫—É –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º.

async def get_user_data(user_id: int) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firestore."""
    if not db:
        logger.error("–ö–ª–∏–µ–Ω—Ç Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return None
    try:
        user_ref = db.collection(FIRESTORE_USERS_COLLECTION).document(str(user_id))
        doc = await asyncio.to_thread(user_ref.get) # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.to_thread –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        if doc.exists:
            return doc.to_dict()
        return None
    except FirebaseError as e:
        logger.error(f"Firebase –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    return None

async def update_user_data(user_id: int, data: Dict[str, Any], merge: bool = True) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore."""
    if not db:
        logger.error("–ö–ª–∏–µ–Ω—Ç Firestore –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return False
    try:
        user_ref = db.collection(FIRESTORE_USERS_COLLECTION).document(str(user_id))
        await asyncio.to_thread(user_ref.set, data, merge=merge)
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {data if not merge else '(merged)'}")
        return True
    except FirebaseError as e:
        logger.error(f"Firebase –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    return False

async def check_or_create_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Optional[Dict[str, Any]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."""
    if not update.effective_user:
        return None

    user_id = update.effective_user.id
    user_data = await get_user_data(user_id)

    if not user_data:
        new_user_data = {
            "user_id": user_id,
            "username": update.effective_user.username or "",
            "first_name": update.effective_user.first_name or "",
            "last_name": update.effective_user.last_name or "",
            "registration_date": firestore.SERVER_TIMESTAMP,
            "last_activity_date": firestore.SERVER_TIMESTAMP,
            "requests_today": 0,
            "subscription_until": None, # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            "is_bonus_claimed": False
        }
        if await update_user_data(user_id, new_user_data, merge=False):
            logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
            return new_user_data
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            return None
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        await update_user_data(user_id, {"last_activity_date": firestore.SERVER_TIMESTAMP})
        return user_data
    return user_data # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# --- –£–¢–ò–õ–ò–¢–´ GEMINI API ---
# –ü—Ä–∏–Ω—Ü–∏–ø: SRP, –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def generate_text_with_gemini(prompt: str) -> Optional[str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Google Gemini API."""
    if not genai._configured: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ API
        logger.warning("Gemini API –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return None
    try:
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –º–æ–¥–µ–ª—å, –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á
        # –ù–∞–ø—Ä–∏–º–µ—Ä, 'gemini-pro' –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á
        model = genai.GenerativeModel('gemini-1.5-flash-latest') # –∏–ª–∏ –¥—Ä—É–≥–∞—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
        response = await asyncio.to_thread(model.generate_content, prompt)
        return response.text
    except google.api_core.exceptions.GoogleAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Google Gemini API: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ Gemini: {e}")
    return None

# --- –£–¢–ò–õ–ò–¢–´ TELEGRAM (–ö–õ–ê–í–ò–ê–¢–£–†–´, –°–û–û–ë–©–ï–ù–ò–Ø) ---
# –ü—Ä–∏–Ω—Ü–∏–ø: DRY, –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å
def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    keyboard = [
        [InlineKeyboardButton(TEXT_USAGE_BUTTON, callback_data=f"{CALLBACK_PREFIX_ACTION}usage")],
        [InlineKeyboardButton(TEXT_SUBSCRIBE_BUTTON, callback_data=f"{CALLBACK_PREFIX_ACTION}subscribe_info")],
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    ]
    return InlineKeyboardMarkup(keyboard)

async def send_typing_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–ø–µ—á–∞—Ç–∞–µ—Ç...'."""
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
# –ü—Ä–∏–Ω—Ü–∏–ø: SRP, –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å, KISS
# –ö–∞–∂–¥—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É. –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–Ω–æ—Å–∏—Ç—Å—è –≤ —É—Ç–∏–ª–∏—Ç—ã.

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é."""
    user = update.effective_user
    if not user: return

    await check_or_create_user(update, context) # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start.")
    reply_text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n–Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
    await update.message.reply_html(reply_text, reply_markup=get_main_menu_keyboard())

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user = update.effective_user
    if not user: return

    await check_or_create_user(update, context)

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—Ä–æ—Å–∏–ª –º–µ–Ω—é.")
    await update.message.reply_html("üìã **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:**", reply_markup=get_main_menu_keyboard())

async def usage_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /usage. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.effective_user
    if not user: return

    user_data = await check_or_create_user(update, context)
    if not user_data:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    requests_today = user_data.get("requests_today", 0)
    daily_limit = CONFIG[CONFIG_FREE_DAILY_LIMIT]
    subscription_until_ts = user_data.get("subscription_until")
    subscription_status = "–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"

    if subscription_until_ts:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Timestamp Firebase –≤ datetime
        if isinstance(subscription_until_ts, datetime):
            subscription_until_dt = subscription_until_ts.replace(tzinfo=timezone.utc)
        else: # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ google.cloud.firestore_v1.base_document.SERVER_TIMESTAMP –∏–ª–∏ —É–∂–µ datetime
             # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ datetime, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π timestamp Firestore
                subscription_until_dt = datetime.fromtimestamp(subscription_until_ts.seconds, tz=timezone.utc)
            except AttributeError: # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ Timestamp –æ–±—ä–µ–∫—Ç
                 subscription_until_dt = None


        if subscription_until_dt and subscription_until_dt > datetime.now(timezone.utc):
            subscription_status = f"–∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {subscription_until_dt.strftime('%d.%m.%Y %H:%M')} UTC"
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ª–∏–º–∏—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–º–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
            # –≠—Ç–æ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –ª–æ–≥–∏–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
            # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫:
            limit_text = f"–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞! –õ–∏–º–∏—Ç—ã –Ω–µ –¥–µ–π—Å—Ç–≤—É—é—Ç."
        else:
            limit_text = f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {requests_today} –∏–∑ {daily_limit} (–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö)."
    else:
        limit_text = f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {requests_today} –∏–∑ {daily_limit} (–±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö)."


    reply_text = (
        f"üìä **–í–∞—à–∏ –ª–∏–º–∏—Ç—ã:**\n\n"
        f"{limit_text}\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: {subscription_status}"
    )
    await update.message.reply_html(reply_text)


async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã."""
    user = update.effective_user
    if not user: return

    await check_or_create_user(update, context)

    price_label = CONFIG[CONFIG_PRICE_LABEL]
    price_description = CONFIG[CONFIG_PRICE_DESCRIPTION]
    price_amount = CONFIG[CONFIG_PRICE_AMOUNT_RUB] # –≤ –∫–æ–ø–µ–π–∫–∞—Ö
    currency = CONFIG[CONFIG_CURRENCY]

    reply_text = (
        f"üíé **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ:**\n\n"
        f"–ü–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞!\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price_amount / 100:.2f} {currency} –Ω–∞ 30 –¥–Ω–µ–π.\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."
    )

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
    payload = f"subscribe_payload_{user.id}_{uuid.uuid4()}" # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π payload –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    
    # –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã
    keyboard = [[InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", pay=True)]] # pay=True –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫ –¥–ª—è –∏–Ω–≤–æ–π—Å–æ–≤
                                                                        # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –∏–Ω–≤–æ–π—Å –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–≤–æ–π—Å
    # await context.bot.send_invoice(...)
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–∏–º–µ—Ä–∞, –ø–æ–∫–∞–∂–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
    # –∏–ª–∏ –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑–æ–≤–µ—Ç send_invoice
    
    payment_button = InlineKeyboardButton(
        f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {price_amount / 100:.2f} {currency}",
        callback_data=f"{CALLBACK_PREFIX_ACTION}pay_subscription"
    )
    reply_markup = InlineKeyboardMarkup([[payment_button]])

    await update.message.reply_html(reply_text, reply_markup=reply_markup)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    user = update.effective_user
    if not user: return
    await check_or_create_user(update, context)
    
    help_text = (
        "‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:**\n\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/usage - –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã\n"
        "/subscribe - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        # –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É." # (—É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    )
    await update.message.reply_html(help_text)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ---
async def message_handler_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.effective_user
    if not user or not update.message or not update.message.text:
        return

    user_input = update.message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç: '{user_input}'")

    user_data = await check_or_create_user(update, context)
    if not user_data:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    requests_today = user_data.get("requests_today", 0)
    daily_limit = CONFIG[CONFIG_FREE_DAILY_LIMIT]
    subscription_until_ts = user_data.get("subscription_until")
    is_subscribed = False

    if subscription_until_ts:
        if isinstance(subscription_until_ts, datetime):
            subscription_until_dt = subscription_until_ts.replace(tzinfo=timezone.utc)
        else:
            try:
                subscription_until_dt = datetime.fromtimestamp(subscription_until_ts.seconds, tz=timezone.utc)
            except AttributeError:
                subscription_until_dt = None
        
        if subscription_until_dt and subscription_until_dt > datetime.now(timezone.utc):
            is_subscribed = True

    if not is_subscribed and requests_today >= daily_limit:
        await update.message.reply_text(
            "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. "
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É (/subscribe) –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞."
        )
        return

    await send_typing_action(update, context) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç "–¥—É–º–∞–µ—Ç"

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é Gemini
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞. –ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã.
    prompt = f"–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_input}"
    bot_response = await generate_text_with_gemini(prompt)

    if bot_response:
        await update.message.reply_text(bot_response)
        if not is_subscribed: # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await update_user_data(user.id, {"requests_today": requests_today + 1})
    else:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK QUERIES (Inline –∫–Ω–æ–ø–∫–∏) ---
async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer() # –í–∞–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ "–≥—Ä—É–∑–∏—Ç—å—Å—è"

    user = update.effective_user
    if not user or not query.data: return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É —Å callback_data: {query.data}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É)
    await check_or_create_user(update, context)

    # –†–∞–∑–±–æ—Ä callback_data
    if query.data.startswith(CALLBACK_PREFIX_ACTION):
        action = query.data.split(CALLBACK_PREFIX_ACTION, 1)[1]

        if action == "usage":
            # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –ª–æ–≥–∏–∫–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–∞
            # –î–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–¥–∏–º "—Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è usage_command
            class MockMessage:
                async def reply_html(self, text, reply_markup=None):
                    await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
                async def reply_text(self, text, reply_markup=None): # –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ usage_command –∏—Å–ø–æ–ª—å–∑—É–µ—Ç reply_text
                    await query.edit_message_text(text=text, reply_markup=reply_markup)


            mock_update = Update(update.update_id, message=MockMessage(), effective_user=user, callback_query=query)
            await usage_command(mock_update, context) # –í—ã–∑—ã–≤–∞–µ–º –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É

        elif action == "subscribe_info":
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
            class MockMessageSub:
                async def reply_html(self, text, reply_markup=None):
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º. –ï—Å–ª–∏ –Ω–µ—Ç (—Ä–µ–¥–∫–æ –¥–ª—è callback), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ.
                    try:
                        await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
                    except telegram.error.BadRequest as e:
                        if "message is not modified" in str(e).lower():
                            pass # –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                        elif "message to edit not found" in str(e).lower() or query.message is None:
                             if query.message: # –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–Ω–æ–ø–∫–∏
                                await query.message.reply_html(text=text, reply_markup=reply_markup)
                             else: # –ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≤ —á–∞—Ç (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–ª—è callback)
                                await context.bot.send_message(chat_id=user.id, text=text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)

                        else:
                            raise e # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ BadRequest

            mock_update_sub = Update(update.update_id, message=MockMessageSub(), effective_user=user, callback_query=query)
            await subscribe_command(mock_update_sub, context)

        elif action == "pay_subscription":
            # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞
            await send_payment_invoice(update, context)

        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ callback_data
        else:
            await query.edit_message_text(text=f"–î–µ–π—Å—Ç–≤–∏–µ '{action}' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    else:
        await query.edit_message_text(text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")


# --- –ü–õ–ê–¢–ï–ñ–ò ---
async def send_payment_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–≤–æ–π—Å –Ω–∞ –æ–ø–ª–∞—Ç—É."""
    chat_id = update.effective_chat.id if update.effective_chat else update.effective_user.id
    user_id = update.effective_user.id

    title = CONFIG[CONFIG_PRICE_LABEL]
    description = CONFIG[CONFIG_PRICE_DESCRIPTION]
    payload = f"sub_{user_id}_{int(datetime.now().timestamp())}" # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π payload
    provider_token = CONFIG[CONFIG_PAYMENT_PROVIDER_TOKEN]
    currency = CONFIG[CONFIG_CURRENCY]
    price = CONFIG[CONFIG_PRICE_AMOUNT_RUB] # –¶–µ–Ω–∞ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –≤–∞–ª—é—Ç—ã (–∫–æ–ø–µ–π–∫–∏ –¥–ª—è RUB)

    if not provider_token or "YOUR_" in provider_token:
        logger.error("–¢–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —ç—Ç–æ callback –æ—Ç –∫–Ω–æ–ø–∫–∏
        if update.callback_query:
            await update.callback_query.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        elif update.message: # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞
            await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    prices = [LabeledPrice(label=title, amount=price)]

    try:
        await context.bot.send_invoice(
            chat_id, title, description, payload, provider_token, currency, prices,
            # photo_url='URL_TO_YOUR_PRODUCT_IMAGE', # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            # photo_size=128, # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            # photo_width=128, # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            # photo_height=128, # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            # need_name=True, # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ª–∏ –∏–º—è
            # need_phone_number=True, # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            # need_email=True, # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            # need_shipping_address=False, # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            # send_phone_number_to_provider=True, # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            # send_email_to_provider=True, # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            # is_flexible=False # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏
        )
        logger.info(f"–ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —Å payload: {payload}")
    except telegram.error.TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–≤–æ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        if update.callback_query:
            await update.callback_query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        elif update.message:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç pre-checkout –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    query = update.pre_checkout_query
    if not query: return

    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å payload, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –∏ —Ç.–¥.
    # –ù–∞–ø—Ä–∏–º–µ—Ä, query.invoice_payload
    logger.info(f"PreCheckoutQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {query.from_user.id} —Å payload: {query.invoice_payload}")

    # –ï—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
    await query.answer(ok=True)
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞, –æ—Ç–≤–µ—á–∞–µ–º —Å –æ—à–∏–±–∫–æ–π:
    # await query.answer(ok=False, error_message="–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.")

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ."""
    message = update.message
    if not message or not message.successful_payment: return

    user_id = message.from_user.id
    payment_info = message.successful_payment
    logger.info(
        f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: "
        f"–°—É–º–º–∞: {payment_info.total_amount / 100} {payment_info.currency}, "
        f"Payload: {payment_info.invoice_payload}, "
        f"Telegram Payment ID: {payment_info.telegram_payment_charge_id}, "
        f"Provider Payment ID: {payment_info.provider_payment_charge_id}"
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π
    subscription_end_date = datetime.now(timezone.utc) + timedelta(days=30)
    user_update_data = {
        "subscription_until": subscription_end_date,
        "last_payment_date": firestore.SERVER_TIMESTAMP,
        "last_payment_amount": payment_info.total_amount,
        "last_payment_currency": payment_info.currency,
        "requests_today": 0 # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
    }
    if await update_user_data(user_id, user_update_data):
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {subscription_end_date.isoformat()}")
        await message.reply_text(
            f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {subscription_end_date.strftime('%d.%m.%Y %H:%M')} UTC."
        )
    else:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
        # –í–∞–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç —Å–ª—É—á–∞–π: –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
        await message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏)
    if db:
        try:
            payment_record = {
                "user_id": user_id,
                "telegram_user_id": message.from_user.id, # –î–ª—è —Å–≤—è–∑–∫–∏, –µ—Å–ª–∏ user_id –Ω–µ Telegram ID
                "username": message.from_user.username or "",
                "amount": payment_info.total_amount,
                "currency": payment_info.currency,
                "invoice_payload": payment_info.invoice_payload,
                "telegram_payment_charge_id": payment_info.telegram_payment_charge_id,
                "provider_payment_charge_id": payment_info.provider_payment_charge_id,
                "payment_date": firestore.SERVER_TIMESTAMP,
                "order_info": payment_info.order_info.to_dict() if payment_info.order_info else None
            }
            await asyncio.to_thread(
                db.collection(FIRESTORE_PAYMENTS_COLLECTION).document(payment_info.telegram_payment_charge_id).set,
                payment_record
            )
            logger.info(f"–ó–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ {payment_info.telegram_payment_charge_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Firestore.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ –≤ Firestore: {e}")


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ---
# –ü—Ä–∏–Ω—Ü–∏–ø: –ß–µ—Ç–∫–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å, –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ."""
    logger.error(msg="–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)

    # –°–æ–±–∏—Ä–∞–µ–º traceback –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
    tb_string = "".join(tb_list)
    logger.error(f"Traceback:\n{tb_string}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π)
    user_message = "üòï –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è –≤ –ø—Ä–æ–±–ª–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å API Gemini, –º–æ–∂–Ω–æ –¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(context.error, google.api_core.exceptions.GoogleAPIError):
        user_message = "–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
    elif isinstance(context.error, telegram.error.NetworkError):
         user_message = "–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    if isinstance(update, Update) and update.effective_message:
        try:
            await update.effective_message.reply_text(user_message)
        except telegram.error.TelegramError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    elif isinstance(update, Update) and update.callback_query and update.callback_query.message:
        try:
            await update.callback_query.message.reply_text(user_message)
        except telegram.error.TelegramError as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (callback): {e}")


    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    admin_user_id = CONFIG[CONFIG_ADMIN_USER_ID]
    if admin_user_id and admin_user_id != 0: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–¥–∞–Ω
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            error_details_for_admin = f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:\n"
            error_details_for_admin += f"–¢–∏–ø: {type(context.error).__name__}\n"
            error_details_for_admin += f"–°–æ–æ–±—â–µ–Ω–∏–µ: {context.error}\n"
            if isinstance(update, Update):
                if update.effective_user:
                    error_details_for_admin += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.id} (@{update.effective_user.username})\n"
                if update.effective_message and update.effective_message.text:
                     error_details_for_admin += f"–°–æ–æ–±—â–µ–Ω–∏–µ: {update.effective_message.text[:200]}\n" # –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
                elif update.callback_query and update.callback_query.data:
                     error_details_for_admin += f"Callback: {update.callback_query.data}\n"

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
            max_len = 4000
            if len(tb_string) + len(error_details_for_admin) > max_len:
                available_space_for_tb = max_len - len(error_details_for_admin) - 20 # 20 –¥–ª—è –∑–∞–ø–∞—Å–∞
                truncated_tb = tb_string[:available_space_for_tb] + "\n... (traceback truncated)"
                admin_message_text = error_details_for_admin + "\n" + truncated_tb
            else:
                admin_message_text = error_details_for_admin + "\n" + tb_string

            await context.bot.send_message(chat_id=admin_user_id, text=admin_message_text[:4096]) # Telegram –ª–∏–º–∏—Ç
        except Exception as e_admin:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e_admin}")


# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
async def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    global db # –î–µ–ª–∞–µ–º db –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è main

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
    db = initialize_firebase_app()
    if not db:
        logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Firebase. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
        # –ú–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ª–∏ –±–æ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ë–î
        # return # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞ –±–µ–∑ –ë–î –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞

    # 2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Gemini API
    configure_gemini_api()

    # 3. –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Application
    # –ü—Ä–∏–Ω—Ü–∏–ø: –Ø—Å–Ω–æ—Å—Ç—å
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º context_types –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
    # persistence = PicklePersistence(filepath="bot_data_persistence") # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏
    application = (
        Application.builder()
        .token(CONFIG[CONFIG_TELEGRAM_TOKEN])
        # .persistence(persistence) # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ persistence
        .build()
    )

    # 4. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    # –ü—Ä–∏–Ω—Ü–∏–ø: –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å, SRP
    # –ö–∞–∂–¥—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Å–≤–æ–∏–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º.
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CommandHandler("usage", usage_command))
    application.add_handler(CommandHandler("subscribe", subscribe_command))
    application.add_handler(CommandHandler("help", help_command))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler_text))
    application.add_handler(CallbackQueryHandler(button_callback_handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))


    # 5. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    application.add_error_handler(error_handler)

    # 6. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    # –ü—Ä–∏–Ω—Ü–∏–ø: –£–¥–æ–±—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot_commands = [
        BotCommand("start", "üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("menu", "üìã –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
        BotCommand("usage", "üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã"),
        BotCommand("subscribe", "üíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ"),
        BotCommand("help", "‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É"),
    ]
    try:
        await application.bot.set_my_commands(bot_commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: {e}")

    # 7. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞ (polling)...")
    # allowed_updates –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    await application.run_polling(allowed_updates=Update.ALL_TYPES, timeout=30)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except ValueError as e: # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.critical(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        logger.critical(traceback.format_exc())
