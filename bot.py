import telegram
from telegram import (
    ReplyKeyboardMarkup, KeyboardButton, Update,
    BotCommand, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.constants import ParseMode, ChatAction
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, PreCheckoutQueryHandler
)
import google.generativeai as genai
import google.api_core.exceptions
import requests
import logging
import traceback
import os
import asyncio
import nest_asyncio
import json
from datetime import datetime, timedelta
from telegram import LabeledPrice
from typing import Optional
import uuid
import firebase_admin
from firebase_admin import credentials, firestore, initialize_app
from firebase_admin.exceptions import FirebaseError
from google.cloud.firestore_v1 import AsyncClient

nest_asyncio.apply()
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–õ–Æ–ß–ò API –ò –¢–û–ö–ï–ù–´ ---
TOKEN = os.getenv("TELEGRAM_TOKEN", "8185454402:AAEgJLaBSaUSyP9Z_zv76Fn0PtEwltAqga0")
GOOGLE_GEMINI_API_KEY = os.getenv("GOOGLE_GEMINI_API_KEY", "AIzaSyCdDMpgLJyz6aYdwT9q4sbBk7sHVID4BTI")
CUSTOM_GEMINI_PRO_API_KEY = os.getenv("CUSTOM_GEMINI_PRO_API_KEY", "sk-MHulnEHU3bRxsnDjr0nq68lTcRYa5IpQATY1pUG4NaxpWSMJzvzsJ4KCVu0P")
CUSTOM_GEMINI_PRO_ENDPOINT = os.getenv("CUSTOM_GEMINI_PRO_ENDPOINT", "https://api.gen-api.ru/api/v1/networks/gemini-2-5-pro")
CUSTOM_GROK_3_API_KEY = os.getenv("CUSTOM_GROK_3_API_KEY", "sk-MHulnEHU3bRxsnDjr0nq68lTcRYa5IpQATY1pUG4NaxpWSMJzvzsJ4KCVu0P")
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN", "390540012:LIVE:70602")
YOUR_ADMIN_ID = 489230152

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
MAX_OUTPUT_TOKENS_GEMINI_LIB = 2048
MAX_MESSAGE_LENGTH_TELEGRAM = 4000
MIN_AI_REQUEST_LENGTH = 4  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò

# --- –õ–ò–ú–ò–¢–´ ---
DEFAULT_FREE_REQUESTS_GOOGLE_FLASH_DAILY = 72
DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY = 48
DEFAULT_SUBSCRIPTION_REQUESTS_GOOGLE_FLASH_PREVIEW_DAILY = 75
DEFAULT_FREE_REQUESTS_CUSTOM_PRO_DAILY = 0
DEFAULT_SUBSCRIPTION_REQUESTS_CUSTOM_PRO_DAILY = 25
PRO_SUBSCRIPTION_LEVEL_KEY = "profi_access_v1"
DEFAULT_FREE_REQUESTS_GROK_DAILY = 3
DEFAULT_SUBSCRIPTION_REQUESTS_GROK_DAILY = 25

# --- –ö–ê–ù–ê–õ –ù–û–í–û–°–¢–ï–ô –ò –ë–û–ù–£–° ---
NEWS_CHANNEL_USERNAME = "@timextech"
NEWS_CHANNEL_LINK = "https://t.me/timextech"
NEWS_CHANNEL_BONUS_MODEL_KEY = "custom_api_gemini_2_5_pro"
NEWS_CHANNEL_BONUS_GENERATIONS = 1

# --- –ê–ì–ï–ù–¢–´ –ò–ò ---
AI_MODES = {
    "universal_ai_basic": {
        "name": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π",
        "prompt": (
            "–¢—ã ‚Äî Gemini, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç Google."
            "–¢–≤–æ—è —Ü–µ–ª—å ‚Äî —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —à–∏—Ä–æ–∫–∏–º —Å–ø–µ–∫—Ç—Ä–æ–º –∑–∞–¥–∞—á:"
            "–æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, –æ–±—ä—è—Å–Ω—è—Ç—å,"
            "–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
            "–í—Å–µ–≥–¥–∞ –±—É–¥—å –≤–µ–∂–ª–∏–≤, –æ–±—ä–µ–∫—Ç–∏–≤–µ–Ω, —Ç–æ—á–µ–Ω –∏ –ø–æ–ª–µ–∑–µ–Ω."
            "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π, –µ—Å–ª–∏ —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏."
            "–û–§–û–†–ú–õ–ï–ù–ò–ï –û–¢–í–ï–¢–ê:"
            "1. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ —è—Å–Ω–æ—Å—Ç—å: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º, —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ª–µ–≥–∫–∏–º –¥–ª—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è. –ß–µ—Ç–∫–æ —Ä–∞–∑–¥–µ–ª—è–π —Å–º—ã—Å–ª–æ–≤—ã–µ –±–ª–æ–∫–∏ –∞–±–∑–∞—Ü–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è –æ–¥–Ω—É –∏–ª–∏ –¥–≤–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –Ω–∏–º–∏."
            "2. –°–ø–∏—Å–∫–∏: –î–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä 1., 2., –∏–ª–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä -, *, —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏."
            "3. –ó–∞–≥–æ–ª–æ–≤–∫–∏: –î–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Å–º—ã—Å–ª–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –ø–æ—è—Å–Ω—è—é—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –º–æ–∂–Ω–æ –ó–ê–ì–õ–ê–í–ù–´–ú–ò –ë–£–ö–í–ê–ú–ò."
            "4. –ß–∏—Å—Ç–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞: –ì–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —è—Å–Ω—ã–π, —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏, –Ω–µ –Ω–µ—Å—É—â–µ–π —Å–º—ã—Å–ª–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ–º–æ–π –≥—Ä–∞–º–º–∞—Ç–∏–∫–æ–π."
            "5. –ü–æ–ª–Ω–æ—Ç–∞: –°—Ç–∞—Ä–∞–π—Å—è –¥–∞–≤–∞—Ç—å –ø–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É–Ω–∫—Ç—ã —Å–ø–∏—Å–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–π –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Å–º–æ–∂–µ—à—å –µ–≥–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å."
        ),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π'. –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?"
    },
    "gemini_pro_custom_mode": {
        "name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
        "prompt": (
            "–¢—ã ‚Äî Gemini 2.5 Pro, –º–æ—â–Ω—ã–π –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—ã–µ, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
            "–°–æ–±–ª—é–¥–∞–π –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –∏ –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å."
            "–§–æ—Ä–º—É–ª–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —è—Å–Ω–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∞–±–∑–∞—Ü—ã –∏ —Å–ø–∏—Å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
            "–ï—Å–ª–∏ —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —É–∫–∞–∂–∏ —ç—Ç–æ."
        ),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'. –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?"
    },
    "creative_helper": {
        "name": "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π",
        "prompt": (
            "–¢—ã ‚Äî Gemini, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ò–ò-–ø–∞—Ä—Ç–Ω—ë—Ä –∏ –ø–∏—Å–∞—Ç–µ–ª—å. "
            "–¢–≤–æ—è –º–∏—Å—Å–∏—è ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å, –ø–æ–º–æ–≥–∞—Ç—å –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–µ–∫—Å—Ç—ã, –∏–¥–µ–∏, —Å—Ü–µ–Ω–∞—Ä–∏–∏, —Å—Ç–∏—Ö–∏ –∏ —Ç.–¥.) –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–º—ã—Å–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
            "–ë—É–¥—å —Å–º–µ–ª—ã–º –≤ –∏–¥–µ—è—Ö, –ø—Ä–µ–¥–ª–∞–≥–∞–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –Ω–æ –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞–π—Å—è –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–∏–∫–∏ –∏ –∑–¥—Ä–∞–≤–æ–≥–æ —Å–º—ã—Å–ª–∞."
            "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: 1. –ê–±–∑–∞—Ü—ã: –î–ª—è –ø—Ä–æ–∑—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–π ‚Äî —á–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∞–±–∑–∞—Ü—ã."
            "2. –°—Ç–∏—Ö–∏: –°–æ–±–ª—é–¥–∞–π —Å—Ç—Ä–æ—Ñ—ã –∏ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –∑–∞–¥–∞–Ω–∏–µ–º."
            "3. –î–∏–∞–ª–æ–≥–∏: –û—Ñ–æ—Ä–º–ª—è–π –¥–∏–∞–ª–æ–≥–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –æ–±—Ä–∞–∑–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: - –ü—Ä–∏–≤–µ—Ç! - —Å–∫–∞–∑–∞–ª –æ–Ω. –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."
            "4. –Ø–∑—ã–∫: –ò—Å–ø–æ–ª—å–∑—É–π –±–æ–≥–∞—Ç—ã–π –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ."
            "6. –ó–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å: –°—Ç–∞—Ä–∞–π—Å—è –¥–æ–≤–æ–¥–∏—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ü–∞ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –∑–∞–¥–∞—á–µ–π."
        ),
        "welcome": "–ê–≥–µ–Ω—Ç '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π' –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º! –ù–∞–¥ –∫–∞–∫–æ–π –∑–∞–¥–∞—á–µ–π –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º?"
    },
    "analyst": {
        "name": "–ê–Ω–∞–ª–∏—Ç–∏–∫",
        "prompt": (
            "–¢—ã ‚Äî –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫ –Ω–∞ –±–∞–∑–µ Gemini, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Ñ–∞–∫—Ç–æ–≤ –∏ —Ç—Ä–µ–Ω–¥–æ–≤."
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—ã–µ, –ª–æ–≥–∏—á–µ—Å–∫–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ –±–∏–∑–Ω–µ—Å-–≤–æ–ø—Ä–æ—Å–æ–≤."
            "–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥:"
            "1. –ê–Ω–∞–ª–∏–∑: –†–∞–∑–±–µ—Ä–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã."
            "2. –í—ã–≤–æ–¥—ã: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —á–µ—Ç–∫–∏–µ –≤—ã–≤–æ–¥—ã –∏–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
            "3. –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –û–±—ä—è—Å–Ω–∏ —Å–≤–æ–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è."
            "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —É–∫–∞–∂–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
        ),
        "welcome": "–ê–≥–µ–Ω—Ç '–ê–Ω–∞–ª–∏—Ç–∏–∫' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ö–∞–∫—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?"
    },
    "joker": {
        "name": "–®—É—Ç–Ω–∏–∫",
        "prompt": (
            "–¢—ã ‚Äî –ò–ò —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ Gemini."
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã —Å –ª–µ–≥–∫–æ—Å—Ç—å—é, –æ—Å—Ç—Ä–æ—É–º–∏–µ–º –∏ —é–º–æ—Ä–æ–º, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∏ —ç—Ç–æ–º –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å."
            "–î–æ–±–∞–≤–ª—è–π —à—É—Ç–∫–∏, –∞–Ω–µ–∫–¥–æ—Ç—ã –∏–ª–∏ –∑–∞–±–∞–≤–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –Ω–æ –æ—Å—Ç–∞–≤–∞–π—Å—è –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–∏–ª–∏—á–∏—è."
            "–§–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –≤–µ—Å–µ–ª—ã–º–∏ –∏ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–º–∏."
        ),
        "welcome": "–ê–≥–µ–Ω—Ç '–®—É—Ç–Ω–∏–∫' –≤–∫–ª—é—á–µ–Ω! üòÑ –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å —Å —É–ª—ã–±–∫–æ–π!"
    }
}
DEFAULT_AI_MODE_KEY = "universal_ai_basic"

# --- –ú–û–î–ï–õ–ò –ò–ò ---
AVAILABLE_TEXT_MODELS = {
    "google_gemini_2_0_flash": {
        "name": "Gemini 2.0",
        "id": "gemini-2.0-flash",
        "api_type": "google_genai",
        "is_limited": True,
        "limit_type": "daily_free",
        "limit": DEFAULT_FREE_REQUESTS_GOOGLE_FLASH_DAILY,
        "cost_category": "google_flash_free"
    },
    "google_gemini_2_5_flash_preview": {
        "name": "Gemini 2.5",
        "id": "gemini-2.5-flash-preview-04-17",
        "api_type": "google_genai",
        "is_limited": True,
        "limit_type": "subscription_or_daily_free",
        "limit_if_no_subscription": DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY,
        "subscription_daily_limit": DEFAULT_SUBSCRIPTION_REQUESTS_GOOGLE_FLASH_PREVIEW_DAILY,
        "cost_category": "google_flash_preview_flex"
    },
    "custom_api_gemini_2_5_pro": {
        "name": "Gemini Pro",
        "id": "gemini-2.5-pro-preview-03-25",
        "api_type": "custom_http_api",
        "endpoint": CUSTOM_GEMINI_PRO_ENDPOINT,
        "api_key_var_name": "CUSTOM_GEMINI_PRO_API_KEY",
        "is_limited": True,
        "limit_type": "subscription_custom_pro",
        "limit_if_no_subscription": DEFAULT_FREE_REQUESTS_CUSTOM_PRO_DAILY,
        "subscription_daily_limit": DEFAULT_SUBSCRIPTION_REQUESTS_CUSTOM_PRO_DAILY,
        "cost_category": "custom_api_pro_paid",
        "pricing_info": {}
    },
    "custom_api_grok_3": {
        "name": "Grok 3",
        "id": "grok-3-beta",
        "api_type": "custom_http_api",
        "endpoint": "https://api.gen-api.ru/api/v1/networks/grok-3",
        "api_key_var_name": "CUSTOM_GROK_3_API_KEY",
        "is_limited": True,
        "limit_type": "subscription_custom_pro",
        "limit_if_no_subscription": DEFAULT_FREE_REQUESTS_GROK_DAILY,
        "subscription_daily_limit": DEFAULT_SUBSCRIPTION_REQUESTS_GROK_DAILY,
        "cost_category": "custom_api_grok_3_paid",
        "pricing_info": {}
    }
}
DEFAULT_MODEL_KEY = "google_gemini_2_0_flash"
DEFAULT_MODEL_ID = AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]["id"]

# --- –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ú–ï–ù–Æ –î–õ–Ø –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
MENU_STRUCTURE = {
    "main_menu": {
        "title": "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "items": [
            {"text": "ü§ñ –ê–≥–µ–Ω—Ç—ã –ò–ò", "action": "submenu", "target": "ai_modes_submenu"},
            {"text": "‚öôÔ∏è –ú–æ–¥–µ–ª–∏ –ò–ò", "action": "submenu", "target": "models_submenu"},
            {"text": "üìä –õ–∏–º–∏—Ç—ã", "action": "submenu", "target": "limits_submenu"},
            {"text": "üéÅ –ë–æ–Ω—É—Å", "action": "submenu", "target": "bonus_submenu"},
            {"text": "üíé –ü–æ–¥–ø–∏—Å–∫–∞", "action": "submenu", "target": "subscription_submenu"},
            {"text": "‚ùì –ü–æ–º–æ—â—å", "action": "submenu", "target": "help_submenu"}
        ],
        "parent": None,
        "is_submenu": False
    },
    "ai_modes_submenu": {
        "title": "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç –ò–ò",
        "items": [
            {"text": mode["name"], "action": "set_agent", "target": key}
            for key, mode in AI_MODES.items()
            if key != "gemini_pro_custom_mode"
        ],
        "parent": "main_menu",
        "is_submenu": True
    },
    "models_submenu": {
        "title": "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò",
        "items": [
            {"text": model["name"], "action": "set_model", "target": key}
            for key, model in AVAILABLE_TEXT_MODELS.items()
        ],
        "parent": "main_menu",
        "is_submenu": True
    },
    "limits_submenu": {
        "title": "–í–∞—à–∏ –ª–∏–º–∏—Ç—ã",
        "items": [
            {"text": "üìä –ü–æ–∫–∞–∑–∞—Ç—å", "action": "show_limits", "target": "usage"}
        ],
        "parent": "main_menu",
        "is_submenu": True
    },
    "bonus_submenu": {
        "title": "–ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É",
        "items": [
            {"text": "üéÅ –ü–æ–ª—É—á–∏—Ç—å", "action": "check_bonus", "target": "news_bonus"}
        ],
        "parent": "main_menu",
        "is_submenu": True
    },
    "subscription_submenu": {
        "title": "–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏",
        "items": [
            {"text": "üíé –ö—É–ø–∏—Ç—å", "action": "show_subscription", "target": "subscribe"}
        ],
        "parent": "main_menu",
        "is_submenu": True
    },
    "help_submenu": {
        "title": "–ü–æ–º–æ—â—å",
        "items": [
            {"text": "‚ùì –°–ø—Ä–∞–≤–∫–∞", "action": "show_help", "target": "help"}
        ],
        "parent": "main_menu",
        "is_submenu": True
    }
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
try:
    firebase_credentials = os.getenv("FIREBASE_CREDENTIALS")
    if firebase_credentials:
        try:
            cred_dict = json.loads(firebase_credentials)
            cred = credentials.Certificate(cred_dict)
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ FIREBASE_CREDENTIALS: {e}")
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç FIREBASE_CREDENTIALS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ JSON –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    else:
        logger.warning("FIREBASE_CREDENTIALS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª")
        if os.path.exists("gemioracle-firebase-adminsdk-fbsvc-8f89d5b941.json"):
            cred = credentials.Certificate("gemioracle-firebase-adminsdk-fbsvc-8f89d5b941.json")
        else:
            raise FileNotFoundError("–§–∞–π–ª gemioracle-firebase-adminsdk-fbsvc-8f89d5b941.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏ FIREBASE_CREDENTIALS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Firebase
    try:
        initialize_app(cred)
        logger.info("Firebase —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except ValueError as e:
        if "already exists" in str(e).lower():
            logger.info("Firebase —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
        else:
            raise
    except FirebaseError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: {e}")
        raise

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Firestore –∏–∑ firebase_admin
    db = firestore.client()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    logger.info("Firestore –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase/Firestore: {e}")
    raise

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Firestore ---
async def get_user_data(user_id: int) -> dict:
    doc_ref = db.collection("users").document(str(user_id))
    doc = await asyncio.to_thread(doc_ref.get)  # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    return doc.to_dict() or {}

async def set_user_data(user_id: int, data: dict):
    doc_ref = db.collection("users").document(str(user_id))
    await asyncio.to_thread(doc_ref.set, data, merge=True)  # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    logger.info(f"Updated user data for {user_id}: {data}")

async def get_bot_data() -> dict:
    doc_ref = db.collection("bot_data").document("data")
    doc = await asyncio.to_thread(doc_ref.get)  # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    return doc.to_dict() or {}

async def set_bot_data(data: dict):
    doc_ref = db.collection("bot_data").document("data")
    await asyncio.to_thread(doc_ref.set, data, merge=True)  # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    logger.info(f"Updated bot data: {data}")

async def get_current_mode_details(user_id: int) -> dict:
    user_data = await get_user_data(user_id)
    current_model_key = await get_current_model_key(user_id)
    mode_key = user_data.get('current_ai_mode', DEFAULT_AI_MODE_KEY)
    # Reset to default if mode is invalid or grok_3_custom_mode
    if mode_key not in AI_MODES or mode_key == "grok_3_custom_mode":
        mode_key = DEFAULT_AI_MODE_KEY
        user_data['current_ai_mode'] = mode_key
        await set_user_data(user_id, user_data)
        logger.info(f"Reset invalid mode '{mode_key}' to default for user {user_id}")
    if current_model_key == "custom_api_gemini_2_5_pro":
        return AI_MODES.get("gemini_pro_custom_mode", AI_MODES[DEFAULT_AI_MODE_KEY])
    return AI_MODES.get(mode_key, AI_MODES[DEFAULT_AI_MODE_KEY])

async def get_current_model_key(user_id: int) -> str:
    user_data = await get_user_data(user_id)
    selected_id = user_data.get('selected_model_id', DEFAULT_MODEL_ID)
    selected_api_type = user_data.get('selected_api_type')

    if selected_api_type:
        for key, info in AVAILABLE_TEXT_MODELS.items():
            if info["id"] == selected_id and info.get("api_type") == selected_api_type:
                return key

    for key, info in AVAILABLE_TEXT_MODELS.items():
        if info["id"] == selected_id:
            if 'selected_api_type' not in user_data or user_data['selected_api_type'] != info.get("api_type"):
                user_data['selected_api_type'] = info.get("api_type")
                await set_user_data(user_id, user_data)
                logger.info(f"Inferred api_type to '{info.get('api_type')}' for model_id '{selected_id}'")
            return key

    logger.warning(f"Could not find key for model_id '{selected_id}'. Falling back to default.")
    default_model_config = AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]
    await set_user_data(user_id, {
        'selected_model_id': default_model_config["id"],
        'selected_api_type': default_model_config["api_type"]
    })
    return DEFAULT_MODEL_KEY

async def get_selected_model_details(user_id: int) -> dict:
    model_key = await get_current_model_key(user_id)
    return AVAILABLE_TEXT_MODELS.get(model_key, AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY])

def smart_truncate(text: str, max_length: int) -> tuple[str, bool]:
    if not isinstance(text, str):
        return str(text), False
    if len(text) <= max_length:
        return text, False
    suffix = "\n\n(...–æ—Ç–≤–µ—Ç –±—ã–ª —Å–æ–∫—Ä–∞—â–µ–Ω)"
    adjusted_max_length = max_length - len(suffix)
    if adjusted_max_length <= 0:
        return text[:max_length-len("...")] + "...", True
    truncated_text = text[:adjusted_max_length]
    possible_cut_points = []
    for sep in ['\n\n', '. ', '! ', '? ', '\n', ' ']:
        pos = truncated_text.rfind(sep)
        if pos != -1:
            actual_pos = pos + (len(sep) if sep != ' ' else 0)
            if actual_pos > 0:
                possible_cut_points.append(actual_pos)
    if possible_cut_points:
        cut_at = max(possible_cut_points)
        if cut_at > adjusted_max_length * 0.3:
            return text[:cut_at].strip() + suffix, True
    return text[:adjusted_max_length].strip() + suffix, True

async def get_user_actual_limit_for_model(user_id: int, model_key: str) -> int:
    model_config = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_config:
        return 0
    bot_data = await get_bot_data()
    user_subscriptions = bot_data.get('user_subscriptions', {})
    user_subscription_details = user_subscriptions.get(str(user_id), {})
    current_sub_level = None
    if user_subscription_details.get('valid_until'):
        try:
            valid_until_dt = datetime.fromisoformat(user_subscription_details['valid_until'])
            if datetime.now(valid_until_dt.tzinfo).date() <= valid_until_dt.date():
                current_sub_level = user_subscription_details.get('level')
        except Exception:
            pass

    limit_type = model_config.get("limit_type")
    if limit_type == "daily_free":
        return model_config.get("limit", 0)
    if limit_type == "subscription_or_daily_free":
        return model_config.get("subscription_daily_limit" if current_sub_level == PRO_SUBSCRIPTION_LEVEL_KEY else "limit_if_no_subscription", 0)
    if limit_type == "subscription_custom_pro":
        base_limit = model_config.get("subscription_daily_limit" if current_sub_level == PRO_SUBSCRIPTION_LEVEL_KEY else "limit_if_no_subscription", 0)
        user_data = await get_user_data(user_id)
        if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY and user_data.get('claimed_news_bonus', False):
            bonus_uses_left = user_data.get('news_bonus_uses_left', 0)
            return base_limit + bonus_uses_left
        return base_limit
    return model_config.get("limit", float('inf')) if not model_config.get("is_limited", False) else 0

async def check_and_log_request_attempt(user_id: int, model_key: str) -> tuple[bool, str, int]:
    today_str = datetime.now().strftime("%Y-%m-%d")
    model_config = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_config or not model_config.get("is_limited"):
        return True, "", 0

    bot_data = await get_bot_data()
    user_subscriptions = bot_data.get('user_subscriptions', {})
    user_subscription_details = user_subscriptions.get(str(user_id), {})
    is_profi_subscriber = False
    if model_config.get("limit_type") in ["subscription_or_daily_free", "subscription_custom_pro"]:
        if user_subscription_details.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY and user_subscription_details.get('valid_until'):
            try:
                if datetime.now(datetime.fromisoformat(user_subscription_details['valid_until']).tzinfo).date() <= datetime.fromisoformat(user_subscription_details['valid_until']).date():
                    is_profi_subscriber = True
            except Exception:
                pass

    user_data = await get_user_data(user_id)
    if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY and not is_profi_subscriber:
        if user_data.get('news_bonus_uses_left', 0) > 0:
            logger.info(f"User {user_id} has bonus for {model_key}. Allowing.")
            return True, "bonus_available", 0

    all_daily_counts = bot_data.get('all_user_daily_counts', {})
    user_model_counts = all_daily_counts.get(str(user_id), {})
    model_daily_usage = user_model_counts.get(model_key, {'date': '', 'count': 0})
    if model_daily_usage['date'] != today_str:
        model_daily_usage = {'date': today_str, 'count': 0}
        user_model_counts[model_key] = model_daily_usage
        all_daily_counts[str(user_id)] = user_model_counts
        bot_data['all_user_daily_counts'] = all_daily_counts
        await set_bot_data(bot_data)

    current_daily_count = model_daily_usage['count']
    actual_daily_limit = await get_user_actual_limit_for_model(user_id, model_key)

    if current_daily_count >= actual_daily_limit:
        message_parts = [f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ ({current_daily_count}/{actual_daily_limit}) –¥–ª—è {model_config['name']}."]
        if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY and not is_profi_subscriber:
            if not user_data.get('claimed_news_bonus', False):
                message_parts.append(f'üí° –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ <a href="{NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª</a> –¥–ª—è –±–æ–Ω—É—Å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!')
            elif user_data.get('news_bonus_uses_left', 0) == 0:
                message_parts.append(f"‚ÑπÔ∏è –ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω (<a href='{NEWS_CHANNEL_LINK}'>–∫–∞–Ω–∞–ª</a>).")
        message_parts.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –º–µ–Ω—é ¬´–ü–æ–¥–ø–∏—Å–∫–∞¬ª.")
        return False, "\n".join(message_parts), current_daily_count
    return True, "", current_daily_count

async def increment_request_count(user_id: int, model_key: str):
    model_config = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_config or not model_config.get("is_limited"):
        return

    user_data = await get_user_data(user_id)
    bot_data = await get_bot_data()

    if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY:
        is_profi_subscriber = False
        user_subscription_details = bot_data.get('user_subscriptions', {}).get(str(user_id), {})
        if user_subscription_details.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY and user_subscription_details.get('valid_until'):
            try:
                if datetime.now(datetime.fromisoformat(user_subscription_details['valid_until']).tzinfo).date() <= datetime.fromisoformat(user_subscription_details['valid_until']).date():
                    is_profi_subscriber = True
            except Exception:
                pass
        
        if not is_profi_subscriber:
            news_bonus_uses_left = user_data.get('news_bonus_uses_left', 0)
            if news_bonus_uses_left > 0:
                user_data['news_bonus_uses_left'] = news_bonus_uses_left - 1
                await set_user_data(user_id, user_data)
                logger.info(f"User {user_id} consumed bonus for {model_key}. Remaining: {user_data['news_bonus_uses_left']}")
                return

    today_str = datetime.now().strftime("%Y-%m-%d")
    all_daily_counts = bot_data.get('all_user_daily_counts', {})
    user_model_counts = all_daily_counts.get(str(user_id), {})
    model_daily_usage = user_model_counts.get(model_key, {'date': today_str, 'count': 0})
    if model_daily_usage['date'] != today_str:
        model_daily_usage = {'date': today_str, 'count': 0}
    model_daily_usage['count'] += 1
    user_model_counts[model_key] = model_daily_usage
    all_daily_counts[str(user_id)] = user_model_counts
    bot_data['all_user_daily_counts'] = all_daily_counts
    await set_bot_data(bot_data)
    logger.info(f"User {user_id} count for {model_key} incremented to {model_daily_usage['count']}")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é ---
def is_menu_button_text(text: str) -> bool:
    navigation_buttons = ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    if text in navigation_buttons:
        return True
    for menu_key, menu in MENU_STRUCTURE.items():
        for item in menu["items"]:
            if item["text"] == text:
                return True
    return False

# --- –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞–º–∏ ---
async def try_delete_user_message(update: Update, user_id: int):
    chat_id = update.effective_chat.id
    user_data = await get_user_data(user_id)
    user_command_message = user_data.get('user_command_message', {})
    message_id = user_command_message.get('message_id')
    timestamp = user_command_message.get('timestamp')

    if not message_id or not timestamp:
        return

    try:
        msg_time = datetime.fromisoformat(timestamp)
        if datetime.now(msg_time.tzinfo) - msg_time > timedelta(hours=48):
            logger.info(f"User message {message_id} is older than 48 hours, clearing")
            user_data.pop('user_command_message', None)
            await set_user_data(user_id, user_data)
            return
    except Exception:
        logger.warning("Invalid user message timestamp, clearing")
        user_data.pop('user_command_message', None)
        await set_user_data(user_id, user_data)
        return

    try:
        await update.get_bot().delete_message(chat_id=chat_id, message_id=message_id)
        logger.info(f"Deleted user message {message_id}")
        user_data.pop('user_command_message', None)
        await set_user_data(user_id, user_data)
    except telegram.error.BadRequest as e:
        logger.warning(f"Failed to delete user message {message_id}: {e}")
        user_data.pop('user_command_message', None)
        await set_user_data(user_id, user_data)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ–Ω—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ ---
def generate_menu_keyboard(menu_key: str) -> ReplyKeyboardMarkup:
    menu = MENU_STRUCTURE.get(menu_key)
    if not menu:
        return ReplyKeyboardMarkup([[]], resize_keyboard=True, one_time_keyboard=False)
    
    keyboard = []
    if menu_key == "main_menu":
        items = menu["items"]
        for i in range(0, len(items), 2):
            row = [KeyboardButton(items[j]["text"]) for j in range(i, min(i + 2, len(items)))]
            keyboard.append(row)
    else:
        keyboard = [[KeyboardButton(item["text"])] for item in menu["items"]]
    
    if menu["is_submenu"]:
        nav_row = []
        if menu["parent"]:
            nav_row.append(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
        nav_row.append(KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        keyboard.append(nav_row)
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

async def show_menu(update: Update, user_id: int, menu_key: str):
    menu = MENU_STRUCTURE.get(menu_key)
    if not menu:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –ú–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=generate_menu_keyboard("main_menu"))
        return
    
    user_data = await get_user_data(user_id)
    user_data['current_menu'] = menu_key
    await set_user_data(user_id, user_data)
    
    text = menu["title"]
    reply_markup = generate_menu_keyboard(menu_key)
    
    await update.message.reply_text(
        text,
        reply_markup=reply_markup,
        parse_mode=None,
        disable_web_page_preview=True
    )
    logger.info(f"Sent menu message for {menu_key}: {text}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = await get_user_data(user_id)
    user_data.setdefault('current_ai_mode', DEFAULT_AI_MODE_KEY)
    user_data.setdefault('current_menu', 'main_menu')
    default_model_conf = AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]
    user_data.setdefault('selected_model_id', default_model_conf["id"])
    user_data.setdefault('selected_api_type', default_model_conf["api_type"])
    await set_user_data(user_id, user_data)
    
    user_data['user_command_message'] = {
        'message_id': update.message.message_id,
        'timestamp': datetime.now().isoformat()
    }
    await set_user_data(user_id, user_data)
    
    current_model_key = await get_current_model_key(user_id)
    current_mode_name = (await get_current_mode_details(user_id))['name']
    current_model_name = AVAILABLE_TEXT_MODELS[current_model_key]['name']

    greeting = f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ò–ò-–±–æ—Ç –Ω–∞ –±–∞–∑–µ Gemini.\nüß† –ê–≥–µ–Ω—Ç: <b>{current_mode_name}</b>\n‚öôÔ∏è –ú–æ–¥–µ–ª—å: <b>{current_model_name}</b>\n\nüí¨ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ!"
    await update.message.reply_text(
        greeting,
        parse_mode=ParseMode.HTML,
        reply_markup=generate_menu_keyboard("main_menu"),
        disable_web_page_preview=True
    )
    logger.info(f"Sent start message for user {user_id}: {greeting}")

async def open_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = await get_user_data(user_id)
    user_data['user_command_message'] = {
        'message_id': update.message.message_id,
        'timestamp': datetime.now().isoformat()
    }
    await set_user_data(user_id, user_data)
    await try_delete_user_message(update, user_id)
    await show_menu(update, user_id, "main_menu")

async def usage_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = await get_user_data(user_id)
    user_data['user_command_message'] = {
        'message_id': update.message.message_id,
        'timestamp': datetime.now().isoformat()
    }
    await set_user_data(user_id, user_data)
    await try_delete_user_message(update, user_id)
    await show_limits(update, user_id)

async def subscribe_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = await get_user_data(user_id)
    user_data['user_command_message'] = {
        'message_id': update.message.message_id,
        'timestamp': datetime.now().isoformat()
    }
    await set_user_data(user_id, user_data)
    await try_delete_user_message(update, user_id)
    await show_subscription(update, user_id)

async def get_news_bonus_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = await get_user_data(user_id)
    user_data['user_command_message'] = {
        'message_id': update.message.message_id,
        'timestamp': datetime.now().isoformat()
    }
    await set_user_data(user_id, user_data)
    await try_delete_user_message(update, user_id)
    await claim_news_bonus_logic(update, user_id)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data = await get_user_data(user_id)
    user_data['user_command_message'] = {
        'message_id': update.message.message_id,
        'timestamp': datetime.now().isoformat()
    }
    await set_user_data(user_id, user_data)
    await try_delete_user_message(update, user_id)
    await show_help(update, user_id)

async def show_limits(update: Update, user_id: int):
    bot_data = await get_bot_data()
    user_data = await get_user_data(user_id)
    user_subscription_details = bot_data.get('user_subscriptions', {}).get(str(user_id), {})
    display_sub_level = "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø"
    subscription_active = False
    if user_subscription_details.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY and user_subscription_details.get('valid_until'):
        try:
            valid_until_dt = datetime.fromisoformat(user_subscription_details['valid_until'])
            if datetime.now(valid_until_dt.tzinfo).date() <= valid_until_dt.date():
                display_sub_level = f"–ü–æ–¥–ø–∏—Å–∫–∞ (–¥–æ {valid_until_dt.strftime('%Y-%m-%d')})"
                subscription_active = True
            else:
                display_sub_level = f"–ü–æ–¥–ø–∏—Å–∫–∞ (–∏—Å—Ç–µ–∫–ª–∞)"
        except Exception:
            display_sub_level = "–ü–æ–¥–ø–∏—Å–∫–∞ (–æ—à–∏–±–∫–∞ –¥–∞—Ç—ã)"

    usage_text_parts = [
        "<b>üìä –í–∞—à–∏ –ª–∏–º–∏—Ç—ã</b>",
        f"–°—Ç–∞—Ç—É—Å: <b>{display_sub_level}</b>",
        "",
        "–õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤:"
    ]
    for model_k, model_c in AVAILABLE_TEXT_MODELS.items():
        if model_c.get("is_limited"):
            today_str = datetime.now().strftime("%Y-%m-%d")
            user_model_counts = bot_data.get('all_user_daily_counts', {}).get(str(user_id), {})
            model_daily_usage = user_model_counts.get(model_k, {'date': '', 'count': 0})
            current_c_display = model_daily_usage['count'] if model_daily_usage['date'] == today_str else 0
            actual_l = await get_user_actual_limit_for_model(user_id, model_k)
            bonus_note = ""
            if model_k == NEWS_CHANNEL_BONUS_MODEL_KEY and user_data.get('claimed_news_bonus', False) and user_data.get('news_bonus_uses_left', 0) > 0:
                bonus_note = " (–≤–∫–ª. –±–æ–Ω—É—Å)"
            usage_text_parts.append(f"‚ñ´Ô∏è {model_c['name']}: <b>{current_c_display}/{actual_l}</b>{bonus_note}")

    if NEWS_CHANNEL_USERNAME and NEWS_CHANNEL_USERNAME != "@YourNewsChannelHandle":
        bonus_model_name = AVAILABLE_TEXT_MODELS.get(NEWS_CHANNEL_BONUS_MODEL_KEY, {}).get('name', "–±–æ–Ω—É—Å–Ω–æ–π –º–æ–¥–µ–ª–∏")
        bonus_info = ""
        if not user_data.get('claimed_news_bonus', False):
            bonus_info = f'üéÅ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ <a href="{NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª</a> –¥–ª—è <b>{NEWS_CHANNEL_BONUS_GENERATIONS}</b> –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ({bonus_model_name})!'
        elif (bonus_uses_left := user_data.get('news_bonus_uses_left', 0)) > 0:
            bonus_info = f'üéÅ –£ –≤–∞—Å <b>{bonus_uses_left}</b> –±–æ–Ω—É—Å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è {bonus_model_name} (<a href="{NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª</a>).'
        else:
            bonus_info = f'‚ÑπÔ∏è –ë–æ–Ω—É—Å –¥–ª—è {bonus_model_name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω (<a href="{NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª</a>).'
        usage_text_parts.append(bonus_info)

    if not subscription_active:
        usage_text_parts.append("–ë–æ–ª—å—à–µ –ª–∏–º–∏—Ç–æ–≤? –ú–µ–Ω—é ¬´–ü–æ–¥–ø–∏—Å–∫–∞¬ª.")

    final_usage_text = "\n".join(usage_text_parts)
    reply_markup = generate_menu_keyboard(user_data.get('current_menu', 'limits_submenu'))

    await update.message.reply_text(
        final_usage_text,
        parse_mode=ParseMode.HTML,
        reply_markup=reply_markup,
        disable_web_page_preview=True
    )
    logger.info(f"Sent limits message: {final_usage_text}")

async def claim_news_bonus_logic(update: Update, user_id: int):
    user = update.effective_user
    chat_id = update.effective_chat.id
    
    user_data = await get_user_data(user_id)
    user_data['user_command_message'] = {
        'message_id': update.message.message_id,
        'timestamp': datetime.now().isoformat()
    }
    await set_user_data(user_id, user_data)
    await try_delete_user_message(update, user_id)

    if not NEWS_CHANNEL_USERNAME or NEWS_CHANNEL_USERNAME == "@YourNewsChannelHandle":
        text = "–§—É–Ω–∫—Ü–∏—è –±–æ–Ω—É—Å–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞."
        await update.message.reply_text(
            text,
            reply_markup=generate_menu_keyboard(user_data.get('current_menu', 'main_menu')),
            parse_mode=None
        )
        logger.info(f"Sent bonus not configured message: {text}")
        return

    bonus_model_config = AVAILABLE_TEXT_MODELS.get(NEWS_CHANNEL_BONUS_MODEL_KEY)
    if not bonus_model_config:
        text = "–û—à–∏–±–∫–∞: –ë–æ–Ω—É—Å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        await update.message.reply_text(
            text,
            reply_markup=generate_menu_keyboard(user_data.get('current_menu', 'main_menu')),
            parse_mode=None
        )
        logger.info(f"Sent bonus model not found message: {text}")
        return

    bonus_model_name = bonus_model_config['name']

    if user_data.get('claimed_news_bonus', False):
        uses_left = user_data.get('news_bonus_uses_left', 0)
        if uses_left > 0:
            reply_text = f'–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ–Ω—É—Å. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å <b>{uses_left}</b> –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è {bonus_model_name} (<a href="{NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª</a>).'
        else:
            reply_text = f'–ë–æ–Ω—É—Å –¥–ª—è {bonus_model_name} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω (<a href="{NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª</a>).'
        await update.message.reply_text(
            reply_text,
            parse_mode=ParseMode.HTML,
            reply_markup=generate_menu_keyboard(user_data.get('current_menu', 'main_menu')),
            disable_web_page_preview=True
        )
        logger.info(f"Sent bonus already claimed message: {reply_text}")
        return

    try:
        member_status = await update.get_bot().get_chat_member(chat_id=NEWS_CHANNEL_USERNAME, user_id=user.id)
        if member_status.status in ['member', 'administrator', 'creator']:
            user_data['claimed_news_bonus'] = True
            user_data['news_bonus_uses_left'] = NEWS_CHANNEL_BONUS_GENERATIONS
            await set_user_data(user_id, user_data)
            success_text = f'üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ <a href="{NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª</a>! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ <b>{NEWS_CHANNEL_BONUS_GENERATIONS}</b> –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è {bonus_model_name}.'
            await update.message.reply_text(
                success_text,
                parse_mode=ParseMode.HTML,
                reply_markup=generate_menu_keyboard('main_menu'),
                disable_web_page_preview=True
            )
            logger.info(f"Sent bonus success message: {success_text}")
        else:
            fail_text = f'–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ <a href="{NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª</a> –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–ª—É—á–∏—Ç—å¬ª —Å–Ω–æ–≤–∞.'
            reply_markup_inline = InlineKeyboardMarkup([[
                InlineKeyboardButton(f"üì¢ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ {NEWS_CHANNEL_USERNAME}", url=NEWS_CHANNEL_LINK)
            ]])
            await update.message.reply_text(
                fail_text,
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup_inline,
                disable_web_page_preview=True
            )
            logger.info(f"Sent bonus subscription required message: {fail_text}")
    except telegram.error.BadRequest as e:
        error_text_response = str(e).lower()
        reply_message_on_error = f'–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ <a href="{NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª</a>. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        reply_markup_inline = InlineKeyboardMarkup([[
            InlineKeyboardButton(f"üì¢ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ {NEWS_CHANNEL_USERNAME}", url=NEWS_CHANNEL_LINK)
        ]])
        await update.message.reply_text(
            reply_message_on_error,
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup_inline,
            disable_web_page_preview=True
        )
        logger.error(f"BadRequest error checking channel membership: {e}")
        logger.info(f"Sent bonus error message: {reply_message_on_error}")

async def show_subscription(update: Update, user_id: int):
    bot_data = await get_bot_data()
    user_data = await get_user_data(user_id)
    user_subscription_details = bot_data.get('user_subscriptions', {}).get(str(user_id), {})
    sub_text_parts = ["<b>üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏</b>"]
    is_active = False
    if user_subscription_details.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY and user_subscription_details.get('valid_until'):
        try:
            valid_until_dt = datetime.fromisoformat(user_subscription_details['valid_until'])
            if datetime.now(valid_until_dt.tzinfo).date() <= valid_until_dt.date():
                sub_text_parts.append(f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{valid_until_dt.strftime('%Y-%m-%d')}</b>.")
                is_active = True
            else:
                sub_text_parts.append(f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ <b>{valid_until_dt.strftime('%Y-%m-%d')}</b>.")
        except Exception:
            sub_text_parts.append("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏.")

    if not is_active:
        sub_text_parts.append("\n–° –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:")
        sub_text_parts.append("‚ñ´Ô∏è –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –≤—Å–µ –º–æ–¥–µ–ª–∏ –ò–ò")
        sub_text_parts.append("‚ñ´Ô∏è –î–æ—Å—Ç—É–ø –∫ Gemini Pro")
        sub_text_parts.append("\n–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: /subscribe")

    final_sub_text = "\n".join(sub_text_parts)
    reply_markup = generate_menu_keyboard(user_data.get('current_menu', 'subscription_submenu'))

    await update.message.reply_text(
        final_sub_text,
        parse_mode=ParseMode.HTML,
        reply_markup=reply_markup,
        disable_web_page_preview=True
    )
    logger.info(f"Sent subscription message: {final_sub_text}")

async def show_help(update: Update, user_id: int):
    user_data = await get_user_data(user_id)
    user_data['user_command_message'] = {
        'message_id': update.message.message_id,
        'timestamp': datetime.now().isoformat()
    }
    await set_user_data(user_id, user_data)
    await try_delete_user_message(update, user_id)

    help_text = (
        "<b>‚ùì –ü–æ–º–æ—â—å</b>\n\n"
        "–Ø ‚Äî –ò–ò-–±–æ—Ç –Ω–∞ –±–∞–∑–µ Gemini. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚ñ´Ô∏è –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ä–∞–∑–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞—Ö –ò–ò\n"
        "‚ñ´Ô∏è –ú–µ–Ω—è—Ç—å –º–æ–¥–µ–ª–∏ –∏ –∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –º–µ–Ω—é\n"
        "‚ñ´Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "‚ñ´Ô∏è –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª\n"
        "‚ñ´Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚ñ´Ô∏è /start ‚Äî –ù–∞—á–∞—Ç—å\n"
        "‚ñ´Ô∏è /menu ‚Äî –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é\n"
        "‚ñ´Ô∏è /usage ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç—ã\n"
        "‚ñ´Ô∏è /subscribe ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ\n"
        "‚ñ´Ô∏è /bonus ‚Äî –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å\n"
        "‚ñ´Ô∏è /help ‚Äî –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    reply_markup = generate_menu_keyboard(user_data.get('current_menu', 'help_submenu'))

    await update.message.reply_text(
        help_text,
        parse_mode=ParseMode.HTML,
        reply_markup=reply_markup,
        disable_web_page_preview=True
    )
    logger.info(f"Sent help message: {help_text}")

async def menu_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    button_text = update.message.text.strip()
    user_data = await get_user_data(user_id)
    current_menu_key = user_data.get('current_menu', 'main_menu')
    current_menu = MENU_STRUCTURE.get(current_menu_key, MENU_STRUCTURE['main_menu'])

    if not is_menu_button_text(button_text):
        logger.info(f"Text '{button_text}' is not a menu button, skipping to handle_text")
        return

    user_data['user_command_message'] = {
        'message_id': update.message.message_id,
        'timestamp': datetime.now().isoformat()
    }
    await set_user_data(user_id, user_data)
    await try_delete_user_message(update, user_id)

    logger.info(f"Processing button '{button_text}' in menu '{current_menu_key}'")

    if button_text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        parent_menu = current_menu.get("parent")
        if parent_menu:
            await show_menu(update, user_id, parent_menu)
        else:
            await show_menu(update, user_id, "main_menu")
        return
    elif button_text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await show_menu(update, user_id, "main_menu")
        return

    selected_item = next((item for item in current_menu["items"] if item["text"] == button_text), None)
    if not selected_item:
        for menu_key, menu in MENU_STRUCTURE.items():
            selected_item = next((item for item in menu["items"] if item["text"] == button_text), None)
            if selected_item:
                logger.info(f"Button '{button_text}' found in menu '{menu_key}'")
                break

    if not selected_item:
        logger.warning(f"Button '{button_text}' not found in any menu. Current menu: {current_menu_key}")
        text = "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."
        await update.message.reply_text(
            text,
            reply_markup=generate_menu_keyboard(current_menu_key),
            parse_mode=None
        )
        logger.info(f"Sent unrecognized command message: {text}")
        return

    action = selected_item["action"]
    target = selected_item["target"]
    logger.info(f"Button '{button_text}' triggers action '{action}' with target '{target}'")

    if action == "submenu":
        await show_menu(update, user_id, target)
    elif action == "set_agent":
        return_menu = current_menu.get("parent", "main_menu")
        if target in AI_MODES and target != "gemini_pro_custom_mode":
            user_data['current_ai_mode'] = target
            await set_user_data(user_id, user_data)
            details = AI_MODES[target]
            new_text = f"ü§ñ –ê–≥–µ–Ω—Ç –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: <b>{details['name']}</b>\n\n{details['welcome']}"
        elif target == "gemini_pro_custom_mode":
            new_text = "–ê–≥–µ–Ω—Ç –¥–ª—è Gemini Pro –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        else:
            new_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
        await update.message.reply_text(
            new_text,
            parse_mode=ParseMode.HTML,
            reply_markup=generate_menu_keyboard(return_menu),
            disable_web_page_preview=True
        )
        logger.info(f"Sent set_agent message for {target}: {new_text}")
        user_data['current_menu'] = return_menu
        await set_user_data(user_id, user_data)
    elif action == "set_model":
        return_menu = current_menu.get("parent", "main_menu")
        if target in AVAILABLE_TEXT_MODELS:
            config = AVAILABLE_TEXT_MODELS[target]
            user_data.update({
                'selected_model_id': config["id"],
                'selected_api_type': config["api_type"]
            })
            # Reset current_ai_mode to default if selecting Grok 3
            if target == "custom_api_grok_3":
                user_data['current_ai_mode'] = DEFAULT_AI_MODE_KEY
            await set_user_data(user_id, user_data)
            bot_data = await get_bot_data()
            today_str = datetime.now().strftime("%Y-%m-%d")
            user_model_counts = bot_data.get('all_user_daily_counts', {}).get(str(user_id), {})
            model_daily_usage = user_model_counts.get(target, {'date': '', 'count': 0})
            current_c_display = model_daily_usage['count'] if model_daily_usage['date'] == today_str else 0
            actual_l = await get_user_actual_limit_for_model(user_id, target)
            limit_str = f'–õ–∏–º–∏—Ç: {current_c_display}/{actual_l} –≤ –¥–µ–Ω—å'
            new_text = f"‚öôÔ∏è –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: <b>{config['name']}</b>\n{limit_str}"
        else:
            new_text = "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        await update.message.reply_text(
            new_text,
            parse_mode=ParseMode.HTML,
            reply_markup=generate_menu_keyboard(return_menu),
            disable_web_page_preview=True
        )
        logger.info(f"Sent set_model message for {target}: {new_text}")
        user_data['current_menu'] = return_menu
        await set_user_data(user_id, user_data)
    elif action == "show_limits":
        await show_limits(update, user_id)
    elif action == "check_bonus":
        await claim_news_bonus_logic(update, user_id)
    elif action == "show_subscription":
        await show_subscription(update, user_id)
    elif action == "show_help":
        await show_help(update, user_id)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text.strip()
    chat_id = update.effective_chat.id

    if is_menu_button_text(user_message):
        logger.info(f"Text '{user_message}' is a menu button, skipping handle_text")
        return

    if len(user_message) < MIN_AI_REQUEST_LENGTH:
        logger.info(f"Text '{user_message}' is too short for AI request, ignoring")
        user_data = await get_user_data(user_id)
        await update.message.reply_text(
            "–ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.",
            reply_markup=generate_menu_keyboard(user_data.get('current_menu', 'main_menu')),
            parse_mode=None
        )
        logger.info(f"Sent short request message")
        return

    logger.info(f"Processing AI request: '{user_message}'")

    current_model_key = await get_current_model_key(user_id)
    model_config = AVAILABLE_TEXT_MODELS.get(current_model_key, AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY])
    can_proceed, limit_message, current_count = await check_and_log_request_attempt(user_id, current_model_key)

    if not can_proceed:
        user_data = await get_user_data(user_id)
        await update.message.reply_text(
            limit_message,
            parse_mode=ParseMode.HTML,
            reply_markup=generate_menu_keyboard(user_data.get('current_menu', 'main_menu')),
            disable_web_page_preview=True
        )
        logger.info(f"Sent limit reached message: {limit_message}")
        return

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    mode_details = await get_current_mode_details(user_id)
    system_prompt = mode_details["prompt"]
    full_prompt = f"{system_prompt}\n\n**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å:**\n{user_message}"

    if model_config["api_type"] == "google_genai":
        model = genai.GenerativeModel(
            model_name=model_config["id"],
            generation_config={"max_output_tokens": MAX_OUTPUT_TOKENS_GEMINI_LIB}
        )
        try:
            response = await asyncio.get_event_loop().run_in_executor(
                None, lambda: model.generate_content(full_prompt)
            )
            response_text = response.text.strip() if response.text else "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω."
        except google.api_core.exceptions.ResourceExhausted:
            response_text = "–õ–∏–º–∏—Ç API –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            logger.error(f"ResourceExhausted for user {user_id} with model {model_config['id']}")
        except Exception as e:
            response_text = f"–û—à–∏–±–∫–∞ API: {str(e)}"
            logger.error(f"API error for user {user_id}: {str(e)}")
    elif model_config["api_type"] == "custom_http_api":
        api_key = CUSTOM_GEMINI_PRO_API_KEY if model_config["id"] == "gemini-2.5-pro-preview-03-25" else CUSTOM_GROK_3_API_KEY
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
        payload = {
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_message}
            ],
            "model": model_config["id"],
            "is_sync": True,
            "max_tokens": MAX_OUTPUT_TOKENS_GEMINI_LIB,
            "temperature": 1.0,
            "top_p": 1.0,
            "n": 1
        }
        try:
            response = await asyncio.get_event_loop().run_in_executor(
                None, lambda: requests.post(model_config["endpoint"], headers=headers, json=payload, timeout=30)
            )
            response.raise_for_status()
            response_data = response.json()
            extracted_text = None

            if model_config["id"] == "grok-3-beta":
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è Grok
                for key in ["output", "text", "choices", "message", "content"]:
                    if key in response_data:
                        if key == "choices" and isinstance(response_data[key], list) and len(response_data[key]) > 0:
                            extracted_text = response_data[key][0].get("message", {}).get("content", "").strip()
                        elif key == "message" and isinstance(response_data[key], dict):
                            extracted_text = response_data[key].get("content", "").strip()
                        else:
                            extracted_text = str(response_data[key]).strip()
                        break
                if not extracted_text:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
                    if "message" in response_data and isinstance(response_data["message"], dict):
                        extracted_text = response_data["message"].get("content", "").strip()
                    elif "choices" in response_data and isinstance(response_data["choices"], list) and len(response_data["choices"]) > 0:
                        extracted_text = response_data["choices"][0].get("text", "").strip()
            elif model_config["id"] == "gemini-2.5-pro-preview-03-25":
                extracted_text = response_data.get("text", "").strip()

            if extracted_text:
                response_text = extracted_text
            else:
                response_text = "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω."
                logger.warning(f"Could not extract text for model {model_config['id']}. Response data: {response_data}")
        except requests.exceptions.RequestException as e:
            response_text = f"–û—à–∏–±–∫–∞ API: {str(e)}"
            logger.error(f"Request error for model {model_config['id']}: {str(e)}")
            logger.debug(f"Response content: {response.text if response else 'No response'}")
    else:
        response_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø API."
        logger.error(f"Unknown api_type for model {current_model_key}")

    response_text, was_truncated = smart_truncate(response_text, MAX_MESSAGE_LENGTH_TELEGRAM)
    if was_truncated:
        logger.info(f"Response for user {user_id} was truncated to {MAX_MESSAGE_LENGTH_TELEGRAM} characters")

    await increment_request_count(user_id, current_model_key)
    user_data = await get_user_data(user_id)
    await update.message.reply_text(
        response_text,
        parse_mode=None,
        reply_markup=generate_menu_keyboard(user_data.get('current_menu', 'main_menu')),
        disable_web_page_preview=True
    )
    logger.info(f"Sent AI response for request: '{user_message}': {response_text[:100]}...")

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    if query.invoice_payload != f"subscription_{PRO_SUBSCRIPTION_LEVEL_KEY}":
        await query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π payload –ø–æ–¥–ø–∏—Å–∫–∏.")
        return
    await query.answer(ok=True)

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    payment = update.message.successful_payment
    if payment.invoice_payload == f"subscription_{PRO_SUBSCRIPTION_LEVEL_KEY}":
        valid_until = datetime.now().astimezone() + timedelta(days=30)
        bot_data = await get_bot_data()
        bot_data.setdefault('user_subscriptions', {}).setdefault(str(user_id), {}).update({
            'level': PRO_SUBSCRIPTION_LEVEL_KEY,
            'valid_until': valid_until.isoformat()
        })
        await set_bot_data(bot_data)
        text = f"üéâ –ü–æ–¥–ø–∏—Å–∫–∞ <b>–ü—Ä–æ—Ñ–∏</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ <b>{valid_until.strftime('%Y-%m-%d')}</b>! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏."
        user_data = await get_user_data(user_id)
        await update.message.reply_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=generate_menu_keyboard('main_menu'),
            disable_web_page_preview=True
        )
        logger.info(f"Sent payment success message: {text}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error: {context.error}")
    if update and update.effective_chat:
        chat_id = update.effective_chat.id
        user_data = await get_user_data(update.effective_user.id)
        await context.bot.send_message(
            chat_id=chat_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
            reply_markup=generate_menu_keyboard('main_menu'),
            parse_mode=None
        )
        logger.info(f"Sent error handler message")

async def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", open_menu_command))
    app.add_handler(CommandHandler("usage", usage_command))
    app.add_handler(CommandHandler("subscribe", subscribe_info_command))
    app.add_handler(CommandHandler("bonus", get_news_bonus_info_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_button_handler), group=1)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text), group=2)
    app.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    app.add_error_handler(error_handler)

    commands = [
        BotCommand("menu", "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
        BotCommand("usage", "–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç—ã"),
        BotCommand("subscribe", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ"),
        BotCommand("bonus", "–ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å"),
        BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞")
    ]
    await app.bot.set_my_commands(commands)

    logger.info("Bot is starting...")
    await app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    # Configure Google Gemini API
    if not GOOGLE_GEMINI_API_KEY or "YOUR_GOOGLE_GEMINI_API_KEY" in GOOGLE_GEMINI_API_KEY or "AIzaSy" not in GOOGLE_GEMINI_API_KEY:
        logger.warning("Google Gemini API key is not set correctly.")
    else:
        try:
            genai.configure(api_key=GOOGLE_GEMINI_API_KEY)
            logger.info("Google Gemini API configured successfully.")
        except Exception as e:
            logger.error(f"Failed to configure Google Gemini API: {str(e)}")

    if not CUSTOM_GEMINI_PRO_API_KEY or "YOUR_CUSTOM_KEY" in CUSTOM_GEMINI_PRO_API_KEY or "sk-" not in CUSTOM_GEMINI_PRO_API_KEY:
        logger.warning("Custom Gemini Pro API key is not set correctly.")

    if not CUSTOM_GROK_3_API_KEY or "YOUR_CUSTOM_KEY" in CUSTOM_GROK_3_API_KEY or "sk-" not in CUSTOM_GROK_3_API_KEY:
        logger.warning("Custom Grok 3 API key is not set correctly.")

    asyncio.run(main())
