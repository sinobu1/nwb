import telegram
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from openai import OpenAI
import logging
import traceback

# Setup logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Telegram Bot Token from BotFather
TOKEN = "8185454402:AAEgJLaBSaUSyP9Z_zv76Fn0PtEwltAqga0"  # Your token
# xAI API Key
XAI_API_KEY = "xai-NPXckFDHJdFHkhllDynT99kusJx5FOLbXhZjdMbz7jSvCd0k0eWgp0eJutNUDQSLGSNw6f4DUZeO1ucz"  # Your key

# Initialize xAI client
try:
    xai_client = OpenAI(api_key=XAI_API_KEY, base_url="https://api.x.ai/v1")
    logger.info("xAI client initialized successfully")
except Exception as e:
    logger.error(f"Failed to initialize xAI client: {str(e)}")
    xai_client = None

# Start command
async def start(update, context):
    try:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø NeuroPal ‚Äî —É–º–Ω—ã–π –±–æ—Ç —Å Grok –æ—Ç xAI. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å–∏ —Å–æ–≤–µ—Ç—ã –∏–ª–∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è! üòÑ\n"
            "–ü—Ä–∏–º–µ—Ä: '–ì–¥–µ –ø–æ–µ—Å—Ç—å –Ω–∞ –¢–∞–≥–∞–Ω–∫–µ?' –∏–ª–∏ '–†–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É'."
        )
        logger.info(f"Start command received from {update.message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in start command: {str(e)}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

# Handle text messages
async def handle_message(update, context):
    user_message = update.message.text
    logger.info(f"Received message: {user_message}")
    
    # Static responses for Moscow
    if "–≥–¥–µ –ø–æ–µ—Å—Ç—å –Ω–∞ —Ç–∞–≥–∞–Ω–∫–µ" in user_message.lower():
        response = "–ü–æ–ø—Ä–æ–±—É–π '–ì—Ä–∞–±–ª–∏' –Ω–∞ –¢–∞–≥–∞–Ω–∫–µ ‚Äî —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ 500 ‚ÇΩ, –≤–∫—É—Å–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ. –ò–ª–∏ '–¢–µ—Ä–µ–º–æ–∫' ‚Äî –±–ª–∏–Ω—ã –æ—Ç 150 ‚ÇΩ."
        await update.message.reply_text(response)
        logger.info(f"Sent static response: {response}")
        return
    elif "—Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É" in user_message.lower():
        response = "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç —Ç—ë–º–Ω—É—é —Ç–µ–º—É? –ü–æ—Ç–æ–º—É —á—Ç–æ —Å–≤–µ—Ç–ª—ã–π —Ä–µ–∂–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ —Å—á—ë—Ç–µ –∑–∞ —Å–≤–µ—Ç! üòÑ"
        await update.message.reply_text(response)
        logger.info(f"Sent static response: {response}")
        return
    
    # Try Grok response
    if not xai_client:
        await update.message.reply_text("Grok –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å '–ì–¥–µ –ø–æ–µ—Å—Ç—å –Ω–∞ –¢–∞–≥–∞–Ω–∫–µ?' –∏–ª–∏ '–†–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É'.")
        logger.warning("xAI client is not initialized")
        return
    
    try:
        completion = xai_client.chat.completions.create(
            model="grok-3-latest",  # Try grok-3-latest, fallback to grok-beta if needed
            messages=[
                {"role": "system", "content": "–¢—ã NeuroPal, –ò–ò-–±–æ—Ç –¥–ª—è –ú–æ—Å–∫–≤—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–∞ –±–∞–∑–µ Grok –æ—Ç xAI. –û—Ç–≤–µ—á–∞–π –æ—Å—Ç—Ä–æ—É–º–Ω–æ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ-—Ä—É—Å—Å–∫–∏. –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≥–¥–µ –ø–æ–µ—Å—Ç—å') –ø—Ä–µ–¥–ª–∞–≥–∞–π –º–µ—Å—Ç–∞ –≤ –ú–æ—Å–∫–≤–µ."},
                {"role": "user", "content": user_message}
            ],
            max_tokens=100,
            temperature=0.7
        )
        response = completion.choices[0].message.content
        await update.message.reply_text(response)
        logger.info(f"Sent Grok response: {response}")
    except Exception as e:
        logger.error(f"Error in handle_message: {str(e)}\n{traceback.format_exc()}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ Grok: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ —Å–ø—Ä–æ—Å–∏ '–ì–¥–µ –ø–æ–µ—Å—Ç—å –Ω–∞ –¢–∞–≥–∞–Ω–∫–µ?'")

def main():
    try:
        application = Application.builder().token(TOKEN).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        logger.info("Starting bot...")
        application.run_polling()
    except Exception as e:
        logger.error(f"Error in main: {str(e)}\n{traceback.format_exc()}")

if __name__ == "__main__":
    main()