import telegram
from telegram.ext import Application, CommandHandler, MessageHandler, filters
import google.generativeai as genai
import requests
import logging
import traceback
import os

# Setup logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Telegram Bot Token from BotFather
TOKEN = os.getenv("TELEGRAM_TOKEN", "8185454402:AAEgJLaBSaUSyP9Z_zv76Fn0PtEwltAqga0")
# Gemini API Key
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyCdDMpgLJyz6aYdwT9q4sbBk7sHVID4BTI")
# Yandex Maps API Key
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY", "YOUR_YANDEX_API_KEY")

# Initialize Gemini client
try:
    genai.configure(api_key=GEMINI_API_KEY)
    gemini_model = genai.GenerativeModel("gemini-2.0-flash")
    logger.info("Gemini client initialized successfully")
except Exception as e:
    logger.error(f"Failed to initialize Gemini client: {str(e)}")
    gemini_model = None

# Start command
async def start(update, context):
    try:
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø NeuroPal ‚Äî —É–º–Ω—ã–π –±–æ—Ç –¥–ª—è –ú–æ—Å–∫–≤—ã –Ω–∞ Gemini 2.0. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å–∏ —Å–æ–≤–µ—Ç—ã –∏–ª–∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è! üòÑ\n"
            "–ü—Ä–∏–º–µ—Ä: '–ì–¥–µ –ø–æ–µ—Å—Ç—å –Ω–∞ –¢–∞–≥–∞–Ω–∫–µ?' –∏–ª–∏ '–†–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É'. –•–æ—á–µ—à—å –±–æ–ª—å—à–µ? –ü–æ–ø—Ä–æ–±—É–π /premium!"
        )
        logger.info(f"Start command received from {update.message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in start command: {str(e)}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

# Premium command
async def premium(update, context):
    try:
        await update.message.reply_text(
            "–ü—Ä–µ–º–∏—É–º –∑–∞ 150 ‚ÇΩ/–º–µ—Å.: –±–æ–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–π, –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã! –û–ø–ª–∞—Ç–∏: [–ÆKassa URL]"
        )
        logger.info(f"Premium command received from {update.message.from_user.id}")
    except Exception as e:
        logger.error(f"Error in premium command: {str(e)}")
        await update.message.reply_text("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

# Handle text messages
async def handle_message(update, context):
    user_message = update.message.text
    logger.info(f"Received message: {user_message}")
    
    # Static responses for Moscow
    if "–≥–¥–µ –ø–æ–µ—Å—Ç—å –Ω–∞ —Ç–∞–≥–∞–Ω–∫–µ" in user_message.lower():
        response = "–ü–æ–ø—Ä–æ–±—É–π '–ì—Ä–∞–±–ª–∏' –Ω–∞ –¢–∞–≥–∞–Ω–∫–µ ‚Äî —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ 500 ‚ÇΩ, –≤–∫—É—Å–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ. –ò–ª–∏ '–¢–µ—Ä–µ–º–æ–∫' ‚Äî –±–ª–∏–Ω—ã –æ—Ç 150 ‚ÇΩ."
        await update.message.reply_text(response)
        logger.info(f"Sent static response: {response}")
        return
    elif "—Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É" in user_message.lower():
        response = "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç —Ç—ë–º–Ω—É—é —Ç–µ–º—É? –ü–æ—Ç–æ–º—É —á—Ç–æ —Å–≤–µ—Ç–ª—ã–π —Ä–µ–∂–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ —Å—á—ë—Ç–µ –∑–∞ —Å–≤–µ—Ç! üòÑ"
        await update.message.reply_text(response)
        logger.info(f"Sent static response: {response}")
        return
    elif "—á—Ç–æ –ø–æ–µ—Å—Ç—å" in user_message.lower():
        response = "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! –•–æ—á–µ—à—å –±—ã—Å—Ç—Ä–æ ‚Äî –±–µ—Ä–∏ —à–∞—É—Ä–º—É –≤ –ª–∞—Ä—å–∫–µ (150‚Äì200 ‚ÇΩ). –î–ª—è —É—é—Ç–∞ ‚Äî '–ö–æ—Ñ–µ–º–∞–Ω–∏—è' –Ω–∞ –¢–≤–µ—Ä—Å–∫–æ–π, —á–µ–∫ 1000 ‚ÇΩ."
        await update.message.reply_text(response)
        logger.info(f"Sent static response: {response}")
        return
    elif "—á—Ç–æ –¥–µ–ª–∞—Ç—å –≤ –º–æ—Å–∫–≤–µ –≤–µ—á–µ—Ä–æ–º" in user_message.lower():
        response = "–ü—Ä–æ–≥—É–ª—è–π—Å—è –ø–æ –ö—Ä–∞—Å–Ω–æ–π –ø–ª–æ—â–∞–¥–∏ –∏–ª–∏ –∑–∞–≥–ª—è–Ω–∏ –≤ –±–∞—Ä 'Time Out' –Ω–∞ –¢–≤–µ—Ä—Å–∫–æ–π ‚Äî –∫–æ–∫—Ç–µ–π–ª–∏ –æ—Ç 500 ‚ÇΩ!"
        await update.message.reply_text(response)
        logger.info(f"Sent static response: {response}")
        return
    elif "–≥–¥–µ –≤—ã–ø–∏—Ç—å –≤ –º–æ—Å–∫–≤–µ" in user_message.lower():
        response = "–ó–∞–π–¥–∏ –≤ 'Noor Bar' –Ω–∞ –¢–≤–µ—Ä—Å–∫–æ–π ‚Äî –∫–æ–∫—Ç–µ–π–ª–∏ –æ—Ç 600 ‚ÇΩ, –∫—Ä—É—Ç–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞!"
        await update.message.reply_text(response)
        logger.info(f"Sent static response: {response}")
        return
    
    # Yandex Maps for other "–≥–¥–µ –ø–æ–µ—Å—Ç—å" queries
    if "–≥–¥–µ –ø–æ–µ—Å—Ç—å" in user_message.lower():
        try:
            place = user_message.split("–Ω–∞ ")[-1] if "–Ω–∞ " in user_message else "–ú–æ—Å–∫–≤–∞"
            url = f"https://api-maps.yandex.ru/2.1/?text=–∫–∞—Ñ–µ+{place}+–ú–æ—Å–∫–≤–∞&ll=37.6173,55.7558&spn=0.1,0.1&lang=ru_RU&apikey={YANDEX_API_KEY}"
            response = requests.get(url).json()
            places = response.get('features', [])
            if places:
                place_name = places[0]['properties']['name']
                response = f"–ü–æ–ø—Ä–æ–±—É–π {place_name} –≤ —Ä–∞–π–æ–Ω–µ {place}!"
            else:
                response = "–ù–µ –Ω–∞—à–µ–ª –∫–∞—Ñ–µ, –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ!"
            await update.message.reply_text(response)
            logger.info(f"Sent Yandex response: {response}")
        except Exception as e:
            logger.error(f"Yandex Maps error: {str(e)}\n{traceback.format_exc()}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π '–ì–¥–µ –ø–æ–µ—Å—Ç—å –Ω–∞ –¢–∞–≥–∞–Ω–∫–µ?'")
        return
    
    # Gemini response
    if not gemini_model:
        await update.message.reply_text("Gemini –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å '–ì–¥–µ –ø–æ–µ—Å—Ç—å –Ω–∞ –¢–∞–≥–∞–Ω–∫–µ?' –∏–ª–∏ '–†–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É'.")
        logger.warning("Gemini client is not initialized")
        return
    
    try:
        response = gemini_model.generate_content(
            [
                {"role": "user", "parts": [
                    "–¢—ã NeuroPal, –ò–ò-–±–æ—Ç –¥–ª—è –ú–æ—Å–∫–≤—ã. –û—Ç–≤–µ—á–∞–π –æ—Å—Ç—Ä–æ—É–º–Ω–æ, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ-—Ä—É—Å—Å–∫–∏. –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–≥–¥–µ –ø–æ–µ—Å—Ç—å') –ø—Ä–µ–¥–ª–∞–≥–∞–π –º–µ—Å—Ç–∞ –≤ –ú–æ—Å–∫–≤–µ."
                ]},
                {"role": "user", "parts": [user_message]}
            ],
            generation_config={"max_output_tokens": 100, "temperature": 0.7}
        )
        reply = response.text
        await update.message.reply_text(reply)
        logger.info(f"Sent Gemini response: {reply}")
    except Exception as e:
        logger.error(f"Gemini error: {str(e)}\n{traceback.format_exc()}")
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ Gemini: {str(e)}. –°–ø—Ä–æ—Å–∏ '–ì–¥–µ –ø–æ–µ—Å—Ç—å –Ω–∞ –¢–∞–≥–∞–Ω–∫–µ?'")

async def main():
    try:
        application = Application.builder().token(TOKEN).build()
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("premium", premium))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        logger.info("Starting bot...")
        await application.run_polling()
    except Exception as e:
        logger.error(f"Error in main: {str(e)}\n{traceback.format_exc()}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
