import telegram
from telegram import (
    ReplyKeyboardMarkup, KeyboardButton, Update,
    BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
)
from telegram.constants import ParseMode, ChatAction
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, PreCheckoutQueryHandler
)
import google.generativeai as genai
import google.api_core.exceptions
import requests
import logging
import traceback
import os
import asyncio
import nest_asyncio
import json
from datetime import datetime, timedelta, timezone
from typing import Optional, Dict, Any, Tuple, Union, List
import uuid
import firebase_admin
from firebase_admin import credentials, firestore, initialize_app
from firebase_admin.exceptions import FirebaseError
from google.cloud.firestore_v1.client import Client as FirestoreClient
from abc import ABC, abstractmethod

nest_asyncio.apply()
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
class AppConfig:
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "8185454402:AAEgJLaBSaUSyP9Z_zv76Fn0PtEwltAqga0")
    GOOGLE_GEMINI_API_KEY = os.getenv("GOOGLE_GEMINI_API_KEY", "AIzaSyCdDMpgLJyz6aYdwT9q4sbBk7sHVID4BTI")
    CUSTOM_GEMINI_PRO_API_KEY = os.getenv("CUSTOM_GEMINI_PRO_API_KEY", "sk-MHulnEHU3bRxsnDjr0nq68lTcRYa5IpQATY1pUG4NaxpWSMJzvzsJ4KCVu0P")
    CUSTOM_GROK_3_API_KEY = os.getenv("CUSTOM_GROK_3_API_KEY", "sk-MHulnEHU3bRxsnDjr0nq68lTcRYa5IpQATY1pUG4NaxpWSMJzvzsJ4KCVu0P")
    CUSTOM_GPT4O_MINI_API_KEY = os.getenv("CUSTOM_GPT4O_MINI_API_KEY", "sk-MHulnEHU3bRxsnDjr0nq68lTcRYa5IpQATY1pUG4NaxpWSMJzvzsJ4KCVu0P")
    PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN", "390540012:LIVE:70602")
    ADMIN_ID = int(os.getenv("ADMIN_ID", "489230152"))
    FIREBASE_CREDENTIALS_JSON_STR = os.getenv("FIREBASE_CREDENTIALS")
    FIREBASE_CERT_PATH = "gemioracle-firebase-adminsdk-fbsvc-8f89d5b941.json"

    MAX_OUTPUT_TOKENS_GEMINI_LIB = 2048
    MAX_MESSAGE_LENGTH_TELEGRAM = 4000
    MIN_AI_REQUEST_LENGTH = 4

    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã
    DEFAULT_FREE_REQUESTS_GOOGLE_FLASH_DAILY = 72
    DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY = 48
    # –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–æ 25 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è GPT-4o mini
    DEFAULT_FREE_REQUESTS_GPT4O_MINI_DAILY = 25

    # –õ–æ–≥–∏–∫–∞ –±–æ–Ω—É—Å–æ–≤ –∑–∞ –∫–∞–Ω–∞–ª —É–±—Ä–∞–Ω–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤ –ø–æ–ª—å–∑—É –≥–µ–º–æ–≤
    # NEWS_CHANNEL_USERNAME = "@timextech"
    # NEWS_CHANNEL_LINK = "https://t.me/timextech"
    # NEWS_CHANNEL_BONUS_MODEL_KEY = "custom_api_gemini_2_5_pro"
    # NEWS_CHANNEL_BONUS_GENERATIONS = 1

    DEFAULT_AI_MODE_KEY = "universal_ai_basic"
    DEFAULT_MODEL_KEY = "google_gemini_2_0_flash"


CONFIG = AppConfig()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–ª—é—á–µ–π API
_API_KEYS_PROVIDER = {
    "CUSTOM_GEMINI_PRO_API_KEY": CONFIG.CUSTOM_GEMINI_PRO_API_KEY,
    "CUSTOM_GROK_3_API_KEY": CONFIG.CUSTOM_GROK_3_API_KEY,
    "CUSTOM_GPT4O_MINI_API_KEY": CONFIG.CUSTOM_GPT4O_MINI_API_KEY,
}


# --- –ö–û–ù–°–¢–ê–ù–¢–´ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
class BotConstants:
    FS_USERS_COLLECTION = "users"
    FS_BOT_DATA_COLLECTION = "bot_data"
    FS_BOT_DATA_DOCUMENT = "data"
    # –ò–ó–ú–ï–ù–ï–ù–û: –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
    FS_ALL_USER_DAILY_COUNTS_KEY = "all_user_daily_counts"
    # –ò–ó–ú–ï–ù–ï–ù–û: –ö–ª—é—á –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –≥–µ–º–æ–≤
    FS_GEMS_BALANCE_KEY = "gems_balance"

    MENU_MAIN = "main_menu"
    MENU_AI_MODES_SUBMENU = "ai_modes_submenu"
    MENU_MODELS_SUBMENU = "models_submenu"
    MENU_LIMITS_SUBMENU = "limits_submenu"
    # –ò–ó–ú–ï–ù–ï–ù–û: –ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –≥–µ–º–æ–≤
    MENU_GEMS_STORE_SUBMENU = "gems_store_submenu"
    MENU_HELP_SUBMENU = "help_submenu"

    CALLBACK_ACTION_SUBMENU = "submenu"
    CALLBACK_ACTION_SET_AGENT = "set_agent"
    CALLBACK_ACTION_SET_MODEL = "set_model"
    CALLBACK_ACTION_SHOW_LIMITS = "show_limits"
    # –ò–ó–ú–ï–ù–ï–ù–û: –î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–µ–º–æ–≤
    CALLBACK_ACTION_BUY_GEMS = "buy_gems"
    CALLBACK_ACTION_SHOW_HELP = "show_help"

    API_TYPE_GOOGLE_GENAI = "google_genai"
    API_TYPE_CUSTOM_HTTP = "custom_http_api"


# --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –†–ï–ñ–ò–ú–û–í –ò –ú–û–î–ï–õ–ï–ô ---
AI_MODES = {
    "universal_ai_basic": {
        "name": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π",
        "prompt": (
            "–¢—ã ‚Äî Gemini, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç Google."
            "–¢–≤–æ—è —Ü–µ–ª—å ‚Äî —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —à–∏—Ä–æ–∫–∏–º —Å–ø–µ–∫—Ç—Ä–æ–º –∑–∞–¥–∞—á."
            # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        ),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π'. –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?"
    },
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    "joker": {
        "name": "–®—É—Ç–Ω–∏–∫",
        "prompt": (
            "–¢—ã ‚Äî –ò–ò —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ Gemini."
            # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–º–ø—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        ),
        "welcome": "–ê–≥–µ–Ω—Ç '–®—É—Ç–Ω–∏–∫' –≤–∫–ª—é—á–µ–Ω! üòÑ –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å —Å —É–ª—ã–±–∫–æ–π!"
    }
}

# –ò–ó–ú–ï–ù–ï–ù–û: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–µ–º–æ–≤
AVAILABLE_TEXT_MODELS = {
    "google_gemini_2_0_flash": {
        "name": "Gemini 2.0", "id": "gemini-2.0-flash", "api_type": BotConstants.API_TYPE_GOOGLE_GENAI,
        "is_limited": True, "free_daily_limit": CONFIG.DEFAULT_FREE_REQUESTS_GOOGLE_FLASH_DAILY, "gem_cost": 0
    },
    "google_gemini_2_5_flash_preview": {
        "name": "Gemini 2.5", "id": "gemini-2.5-flash-preview-04-17", "api_type": BotConstants.API_TYPE_GOOGLE_GENAI,
        "is_limited": True, "free_daily_limit": CONFIG.DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY, "gem_cost": 0
    },
    "custom_api_gemini_2_5_pro": {
        "name": "Gemini Pro", "id": "gemini-2.5-pro-preview-03-25", "api_type": BotConstants.API_TYPE_CUSTOM_HTTP,
        "endpoint": CONFIG.CUSTOM_GEMINI_PRO_ENDPOINT, "api_key_var_name": "CUSTOM_GEMINI_PRO_API_KEY",
        "is_limited": True, "free_daily_limit": 0, "gem_cost": 2.5
    },
    "custom_api_grok_3": {
        "name": "Grok 3", "id": "grok-3-beta", "api_type": BotConstants.API_TYPE_CUSTOM_HTTP,
        "endpoint": "https://api.gen-api.ru/api/v1/networks/grok-3", "api_key_var_name": "CUSTOM_GROK_3_API_KEY",
        "is_limited": True, "free_daily_limit": 0, "gem_cost": 2.5
    },
    "custom_api_gpt_4o_mini": {
        "name": "GPT-4o mini", "id": "gpt-4o-mini", "api_type": BotConstants.API_TYPE_CUSTOM_HTTP,
        "endpoint": "https://api.gen-api.ru/api/v1/networks/gpt-4o-mini", "api_key_var_name": "CUSTOM_GPT4O_MINI_API_KEY",
        "is_limited": True, "free_daily_limit": CONFIG.DEFAULT_FREE_REQUESTS_GPT4O_MINI_DAILY, "gem_cost": 0.5
    }
}
DEFAULT_MODEL_ID = AVAILABLE_TEXT_MODELS[CONFIG.DEFAULT_MODEL_KEY]["id"]

# –ò–ó–ú–ï–ù–ï–ù–û: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ–Ω—é
MENU_STRUCTURE = {
    BotConstants.MENU_MAIN: {
        "title": "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "items": [
            {"text": "ü§ñ –ê–≥–µ–Ω—Ç—ã –ò–ò", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_AI_MODES_SUBMENU},
            {"text": "‚öôÔ∏è –ú–æ–¥–µ–ª–∏ –ò–ò", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_MODELS_SUBMENU},
            {"text": "üìä –õ–∏–º–∏—Ç—ã", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_LIMITS_SUBMENU},
            {"text": "üíé –ö—É–ø–∏—Ç—å –ì–µ–º—ã", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_GEMS_STORE_SUBMENU},
            {"text": "‚ùì –ü–æ–º–æ—â—å", "action": BotConstants.CALLBACK_ACTION_SUBMENU, "target": BotConstants.MENU_HELP_SUBMENU}
        ], "parent": None, "is_submenu": False
    },
    BotConstants.MENU_AI_MODES_SUBMENU: {
        "title": "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç –ò–ò", "items": [
            {"text": mode["name"], "action": BotConstants.CALLBACK_ACTION_SET_AGENT, "target": key}
            for key, mode in AI_MODES.items()
        ], "parent": BotConstants.MENU_MAIN, "is_submenu": True
    },
    BotConstants.MENU_MODELS_SUBMENU: {
        "title": "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò", "items": [
            {"text": model["name"], "action": BotConstants.CALLBACK_ACTION_SET_MODEL, "target": key}
            for key, model in AVAILABLE_TEXT_MODELS.items()
        ], "parent": BotConstants.MENU_MAIN, "is_submenu": True
    },
    BotConstants.MENU_LIMITS_SUBMENU: {"title": "–í–∞—à–∏ –ª–∏–º–∏—Ç—ã", "items": [{"text": "üìä –ü–æ–∫–∞–∑–∞—Ç—å", "action": BotConstants.CALLBACK_ACTION_SHOW_LIMITS, "target": "usage"}], "parent": BotConstants.MENU_MAIN, "is_submenu": True},
    BotConstants.MENU_GEMS_STORE_SUBMENU: {"title": "–ú–∞–≥–∞–∑–∏–Ω –≥–µ–º–æ–≤", "items": [{"text": "üíé –ö—É–ø–∏—Ç—å 100 –≥–µ–º–æ–≤", "action": BotConstants.CALLBACK_ACTION_BUY_GEMS, "target": "buy_100_gems"}], "parent": BotConstants.MENU_MAIN, "is_submenu": True},
    BotConstants.MENU_HELP_SUBMENU: {"title": "–ü–æ–º–æ—â—å", "items": [{"text": "‚ùì –°–ø—Ä–∞–≤–∫–∞", "action": BotConstants.CALLBACK_ACTION_SHOW_HELP, "target": "help"}], "parent": BotConstants.MENU_MAIN, "is_submenu": True}
}

# --- –°–ï–†–í–ò–° –î–õ–Ø –†–ê–ë–û–¢–´ –° FIRESTORE ---
class FirestoreService:
    # ... (–∫–ª–∞—Å—Å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    def __init__(self, cert_path: str, creds_json_str: Optional[str] = None):
        self._db: Optional[FirestoreClient] = None
        try:
            cred_obj = None
            if creds_json_str:
                try:
                    cred_obj = credentials.Certificate(json.loads(creds_json_str))
                    logger.info("Firebase credentials loaded from JSON string.")
                except json.JSONDecodeError as e:
                    logger.error(f"Error parsing FIREBASE_CREDENTIALS_JSON_STR: {e}. Check JSON env var.")
                    raise
            elif os.path.exists(cert_path):
                cred_obj = credentials.Certificate(cert_path)
                logger.info(f"Firebase credentials loaded from file: {cert_path}.")
            else:
                raise FileNotFoundError("Firebase credentials not configured (JSON string or cert file).")

            if not firebase_admin._apps: # pylint: disable=protected-access
                initialize_app(cred_obj)
                logger.info("Firebase app successfully initialized.")
            else:
                logger.info("Firebase app already initialized.")
            self._db = firestore.client()
            logger.info("Firestore client successfully initialized.")
        except Exception as e:
            logger.error(f"Critical error during Firebase/Firestore initialization: {e}", exc_info=True)
            self._db = None

    async def _execute_firestore_op(self, func, *args, **kwargs):
        if not self._db:
            logger.warning(f"Firestore (db) is not initialized. Operation '{func.__name__}' skipped.")
            return None
        return await asyncio.get_event_loop().run_in_executor(None, lambda: func(*args, **kwargs))

    async def get_user_data(self, user_id: int) -> Dict[str, Any]:
        if not self._db: return {}
        doc_ref = self._db.collection(BotConstants.FS_USERS_COLLECTION).document(str(user_id))
        doc = await self._execute_firestore_op(doc_ref.get)
        return doc.to_dict() if doc and doc.exists else {}

    async def set_user_data(self, user_id: int, data: Dict[str, Any]) -> None:
        if not self._db: return
        doc_ref = self._db.collection(BotConstants.FS_USERS_COLLECTION).document(str(user_id))
        await self._execute_firestore_op(doc_ref.set, data, merge=True)
        logger.debug(f"User data for {user_id} updated with keys: {list(data.keys())}")

    async def get_bot_data(self) -> Dict[str, Any]:
        if not self._db: return {}
        doc_ref = self._db.collection(BotConstants.FS_BOT_DATA_COLLECTION).document(BotConstants.FS_BOT_DATA_DOCUMENT)
        doc = await self._execute_firestore_op(doc_ref.get)
        return doc.to_dict() if doc and doc.exists else {}

    async def set_bot_data(self, data: Dict[str, Any]) -> None:
        if not self._db: return
        doc_ref = self._db.collection(BotConstants.FS_BOT_DATA_COLLECTION).document(BotConstants.FS_BOT_DATA_DOCUMENT)
        await self._execute_firestore_op(doc_ref.set, data, merge=True)
        logger.debug(f"Bot data updated with keys: {list(data.keys())}")


firestore_service = FirestoreService(
    cert_path=CONFIG.FIREBASE_CERT_PATH,
    creds_json_str=CONFIG.FIREBASE_CREDENTIALS_JSON_STR
)

# --- –°–ï–†–í–ò–°–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° AI ---
class BaseAIService(ABC):
    # ... (–∫–ª–∞—Å—Å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    def __init__(self, model_config: Dict[str, Any]):
        self.model_config = model_config
        self.model_id = model_config["id"]

    @abstractmethod
    async def generate_response(self, system_prompt: str, user_prompt: str) -> str:
        pass


class GoogleGenAIService(BaseAIService):
    # ... (–∫–ª–∞—Å—Å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    async def generate_response(self, system_prompt: str, user_prompt: str) -> str:
        full_prompt = f"{system_prompt}\n\n**–ó–∞–ø—Ä–æ—Å:**\n{user_prompt}"
        try:
            model_genai = genai.GenerativeModel(
                self.model_id,
                generation_config={"max_output_tokens": CONFIG.MAX_OUTPUT_TOKENS_GEMINI_LIB}
            )
            response = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: model_genai.generate_content(full_prompt)
            )
            return response.text.strip() if response.text else "–û—Ç–≤–µ—Ç Google GenAI –ø—É—Å—Ç."
        except google.api_core.exceptions.ResourceExhausted as e:
            logger.error(f"Google GenAI API limit exhausted for model {self.model_id}: {e}")
            return f"–õ–∏–º–∏—Ç Google API –∏—Å—á–µ—Ä–ø–∞–Ω: {e}"
        except Exception as e:
            logger.error(f"Google GenAI API error for model {self.model_id}: {e}", exc_info=True)
            return f"–û—à–∏–±–∫–∞ Google API ({type(e).__name__}) –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ {self.model_id}."


class CustomHttpAIService(BaseAIService):
    async def generate_response(self, system_prompt: str, user_prompt: str) -> str:
        api_key_name = self.model_config.get("api_key_var_name")
        actual_key = _API_KEYS_PROVIDER.get(api_key_name)

        if not actual_key or "YOUR_" in actual_key or not (actual_key.startswith("sk-") or actual_key.startswith("AIzaSy")):
            logger.error(f"Invalid API key for model {self.model_id} (key name: {api_key_name}).")
            return f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ API –¥–ª—è ¬´{self.model_config.get('name', self.model_id)}¬ª."

        headers = {
            "Authorization": f"Bearer {actual_key}",
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ payload –¥–ª—è –≤—Å–µ—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        messages_payload = []
        if system_prompt:
            messages_payload.append({"role": "system", "content": system_prompt})
        messages_payload.append({"role": "user", "content": user_prompt})

        payload = {
            "messages": messages_payload,
            "model": self.model_id,
            "max_tokens": self.model_config.get("max_tokens", CONFIG.MAX_OUTPUT_TOKENS_GEMINI_LIB)
        }
        
        endpoint = self.model_config["endpoint"]

        try:
            response = await asyncio.get_event_loop().run_in_executor(
                None,
                lambda: requests.post(endpoint, headers=headers, json=payload, timeout=45)
            )
            response.raise_for_status()
            json_resp = response.json()
            logger.debug(f"Raw API response for {self.model_id}: {json_resp}")

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
            extracted_text = None
            if 'choices' in json_resp and isinstance(json_resp['choices'], list) and json_resp['choices']:
                message = json_resp['choices'][0].get('message', {})
                if 'content' in message:
                    extracted_text = message['content']

            # –ó–∞–ø–∞—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ API
            if extracted_text is None:
                if 'text' in json_resp and isinstance(json_resp['text'], str):
                    extracted_text = json_resp['text']
                elif 'output' in json_resp and isinstance(json_resp['output'], str):
                    extracted_text = json_resp['output']
                elif 'response' in json_resp and isinstance(json_resp['response'], str):
                     extracted_text = json_resp['response']

            return extracted_text.strip() if extracted_text else f"–û—Ç–≤–µ—Ç API {self.model_config['name']} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."

        except requests.exceptions.HTTPError as e:
            logger.error(f"Custom API HTTPError for {self.model_id} ({endpoint}): {e.response.status_code} - {e.response.text}", exc_info=True)
            return f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ Custom API ({e.response.status_code}) –¥–ª—è {self.model_config['name']}."
        except Exception as e:
            logger.error(f"Unexpected Custom API error for {self.model_id} ({endpoint}): {e}", exc_info=True)
            return f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Custom API ({type(e).__name__}) –¥–ª—è {self.model_config['name']}."


def get_ai_service(model_key: str) -> Optional[BaseAIService]:
    # ... (—Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    model_cfg = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_cfg:
        logger.error(f"Configuration for model key '{model_key}' not found.")
        return None
    
    api_type = model_cfg.get("api_type")
    if api_type == BotConstants.API_TYPE_GOOGLE_GENAI:
        return GoogleGenAIService(model_cfg)
    elif api_type == BotConstants.API_TYPE_CUSTOM_HTTP:
        return CustomHttpAIService(model_cfg)
    else:
        logger.error(f"Unknown API type '{api_type}' for model key '{model_key}'.")
        return None

# --- –£–¢–ò–õ–ò–¢–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

async def _store_and_try_delete_message(update: Update, user_id: int, is_command_to_keep: bool = False):
    # ... (—Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if not update.message: return

    message_id_to_process = update.message.message_id
    timestamp_now_iso = datetime.now(timezone.utc).isoformat()
    chat_id = update.effective_chat.id
    
    user_data_for_msg_handling = await firestore_service.get_user_data(user_id)

    prev_command_info = user_data_for_msg_handling.pop('user_command_to_delete', None)
    if prev_command_info and prev_command_info.get('message_id'):
        try:
            prev_msg_time = datetime.fromisoformat(prev_command_info['timestamp'])
            if prev_msg_time.tzinfo is None: prev_msg_time = prev_msg_time.replace(tzinfo=timezone.utc)
            if datetime.now(timezone.utc) - prev_msg_time <= timedelta(hours=48):
                await update.get_bot().delete_message(chat_id=chat_id, message_id=prev_command_info['message_id'])
                logger.info(f"Successfully deleted previous user message {prev_command_info['message_id']}")
        except (telegram.error.BadRequest, ValueError) as e:
            logger.warning(f"Failed to delete/process previous user message {prev_command_info.get('message_id')}: {e}")
    
    if not is_command_to_keep:
        user_data_for_msg_handling['user_command_to_delete'] = {
            'message_id': message_id_to_process, 'timestamp': timestamp_now_iso
        }
        try:
            await update.get_bot().delete_message(chat_id=chat_id, message_id=message_id_to_process)
            logger.info(f"Successfully deleted current user message {message_id_to_process} (not kept).")
            user_data_for_msg_handling.pop('user_command_to_delete', None)
        except telegram.error.BadRequest as e:
            logger.warning(f"Failed to delete current user message {message_id_to_process}: {e}. Will try next time if stored.")
    else:
         user_data_for_msg_handling['user_command_message_to_keep'] = {
            'message_id': message_id_to_process, 'timestamp': timestamp_now_iso
        }
    await firestore_service.set_user_data(user_id, user_data_for_msg_handling)


def auto_delete_message_decorator(is_command_to_keep: bool = False):
    # ... (—Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    def decorator(func):
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
            if update.effective_user and update.message:
                 await _store_and_try_delete_message(update, update.effective_user.id, is_command_to_keep)
            return await func(update, context)
        return wrapper
    return decorator

async def get_current_model_key(user_id: int, user_data: Optional[Dict[str, Any]] = None) -> str:
    # ... (—Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    user_data_loc = user_data if user_data is not None else await firestore_service.get_user_data(user_id)
    selected_id = user_data_loc.get('selected_model_id', DEFAULT_MODEL_ID)
    selected_api_type = user_data_loc.get('selected_api_type')

    if selected_api_type:
        for key, info in AVAILABLE_TEXT_MODELS.items():
            if info["id"] == selected_id and info.get("api_type") == selected_api_type:
                return key
    
    for key, info in AVAILABLE_TEXT_MODELS.items():
        if info["id"] == selected_id:
            if user_data_loc.get('selected_api_type') != info.get("api_type"):
                await firestore_service.set_user_data(user_id, {'selected_api_type': info.get("api_type")})
            return key
            
    default_cfg = AVAILABLE_TEXT_MODELS[CONFIG.DEFAULT_MODEL_KEY]
    await firestore_service.set_user_data(user_id, {
        'selected_model_id': default_cfg["id"], 
        'selected_api_type': default_cfg["api_type"]
    })
    return CONFIG.DEFAULT_MODEL_KEY

async def get_selected_model_details(user_id: int, user_data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    # ... (—Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    model_key = await get_current_model_key(user_id, user_data)
    return AVAILABLE_TEXT_MODELS.get(model_key, AVAILABLE_TEXT_MODELS[CONFIG.DEFAULT_MODEL_KEY])

async def get_current_mode_details(user_id: int, user_data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    # ... (—Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —É–¥–∞–ª–µ–Ω–∞ —Å–ø–µ—Ü. –ª–æ–≥–∏–∫–∞ –¥–ª—è gemini_pro_custom_mode)
    user_data_loc = user_data if user_data is not None else await firestore_service.get_user_data(user_id)
    mode_k_loc = user_data_loc.get('current_ai_mode', CONFIG.DEFAULT_AI_MODE_KEY)

    if mode_k_loc not in AI_MODES:
        mode_k_loc = CONFIG.DEFAULT_AI_MODE_KEY
        await firestore_service.set_user_data(user_id, {'current_ai_mode': mode_k_loc})
        
    return AI_MODES.get(mode_k_loc, AI_MODES[CONFIG.DEFAULT_AI_MODE_KEY])


def smart_truncate(text: str, max_length: int) -> Tuple[str, bool]:
    # ... (—Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if not isinstance(text, str) or len(text) <= max_length:
        return str(text), False

    suffix = "\n\n(...–æ—Ç–≤–µ—Ç –±—ã–ª —Å–æ–∫—Ä–∞—â–µ–Ω)"
    adjusted_max_length = max_length - len(suffix)

    if adjusted_max_length <= 0:
        return text[:max_length - len("...")] + "...", True 
        
    truncated_text = text[:adjusted_max_length]
    
    for separator in ['\n\n', '. ', '! ', '? ', '\n', ' ']: 
        position = truncated_text.rfind(separator)
        if position != -1:
            actual_cut_position = position + (len(separator) if separator != ' ' else 0)
            if actual_cut_position > 0 and actual_cut_position > adjusted_max_length * 0.3:
                 return text[:actual_cut_position].strip() + suffix, True
                 
    return text[:adjusted_max_length].strip() + suffix, True

# –ò–ó–ú–ï–ù–ï–ù–û: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –∏ –≥–µ–º–æ–≤
async def check_and_log_request_attempt(user_id: int, model_key: str) -> Tuple[bool, str, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (–ú–æ–∂–µ—Ç_–ª–∏_–ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å, –°–æ–æ–±—â–µ–Ω–∏–µ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –¢–∏–ø_—Å–ø–∏—Å–∞–Ω–∏—è)
    –¢–∏–ø_—Å–ø–∏—Å–∞–Ω–∏—è: 'free' –∏–ª–∏ 'gems'
    """
    today_str = datetime.now(timezone.utc).strftime("%Y-%m-%d")
    model_cfg = AVAILABLE_TEXT_MODELS.get(model_key)

    if not model_cfg or not model_cfg.get("is_limited"):
        return True, "", "free"  # –ù–µ–ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    user_data = await firestore_service.get_user_data(user_id)
    bot_data = await firestore_service.get_bot_data()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    all_user_counts = bot_data.get(BotConstants.FS_ALL_USER_DAILY_COUNTS_KEY, {})
    user_daily_counts = all_user_counts.get(str(user_id), {})
    model_usage_info = user_daily_counts.get(model_key, {'date': '', 'count': 0})
    
    current_usage = model_usage_info['count'] if model_usage_info['date'] == today_str else 0
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    free_limit = model_cfg.get("free_daily_limit", 0)
    if current_usage < free_limit:
        return True, "", "free"

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –≥–µ–º–∞—Ö
    gem_cost = model_cfg.get("gem_cost", 0)
    if gem_cost > 0:
        user_gems = user_data.get(BotConstants.FS_GEMS_BALANCE_KEY, 0)
        if user_gems >= gem_cost:
            return True, "", "gems"
        else:
            # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–º–æ–≤
            msg = (
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–º–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ ¬´{model_cfg['name']}¬ª.\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è: <b>{gem_cost}</b> üíé, —É –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: <b>{user_gems}</b> üíé.\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /buy –∏–ª–∏ –º–µ–Ω—é ¬´üíé –ö—É–ø–∏—Ç—å –ì–µ–º—ã¬ª."
            )
            return False, msg, ""
    
    # 3. –ï—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—Ç –∏ –º–æ–¥–µ–ª—å –Ω–µ –ø–ª–∞—Ç–Ω–∞—è (gem_cost=0)
    # –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ª–∏–º–∏—Ç –ø—Ä–æ—Å—Ç–æ –∏—Å—á–µ—Ä–ø–∞–Ω
    display_limit = free_limit
    message = (
        f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ({current_usage}/{display_limit}) –¥–ª—è –º–æ–¥–µ–ª–∏ ¬´{model_cfg['name']}¬ª.\n"
        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å."
    )
    return False, message, ""


# –ò–ó–ú–ï–ù–ï–ù–û: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –≥–µ–º–æ–≤
async def deduct_gems(user_id: int, model_key: str):
    """–°–ø–∏—Å—ã–≤–∞–µ—Ç –≥–µ–º—ã –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏."""
    model_cfg = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_cfg: return
    
    gem_cost = model_cfg.get("gem_cost", 0)
    if gem_cost <= 0: return

    user_data = await firestore_service.get_user_data(user_id)
    current_gems = user_data.get(BotConstants.FS_GEMS_BALANCE_KEY, 0)
    new_balance = max(0, current_gems - gem_cost)
    
    await firestore_service.set_user_data(user_id, {BotConstants.FS_GEMS_BALANCE_KEY: new_balance})
    logger.info(f"User {user_id} was charged {gem_cost} gems for using {model_key}. New balance: {new_balance}")


async def increment_request_count(user_id: int, model_key: str):
    """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –¥–Ω–µ–≤–Ω–æ–π —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    model_cfg = AVAILABLE_TEXT_MODELS.get(model_key)
    if not model_cfg or not model_cfg.get("is_limited"):
        return

    bot_data = await firestore_service.get_bot_data()
    all_user_daily_counts = bot_data.get(BotConstants.FS_ALL_USER_DAILY_COUNTS_KEY, {})
    user_daily_counts = all_user_daily_counts.get(str(user_id), {})
    
    today_str = datetime.now(timezone.utc).strftime("%Y-%m-%d")
    model_usage_info = user_daily_counts.get(model_key, {'date': today_str, 'count': 0})
    
    if model_usage_info['date'] != today_str:
        model_usage_info = {'date': today_str, 'count': 0}
    
    model_usage_info['count'] += 1
    user_daily_counts[model_key] = model_usage_info
    all_user_daily_counts[str(user_id)] = user_daily_counts
    
    await firestore_service.set_bot_data({BotConstants.FS_ALL_USER_DAILY_COUNTS_KEY: all_user_daily_counts})
    logger.info(f"Incremented daily count for user {user_id}, model {model_key} to {model_usage_info['count']}.")

# --- –§–£–ù–ö–¶–ò–ò –ú–ï–ù–Æ ---

def is_menu_button_text(text: str) -> bool:
    # ... (—Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        return True
    for menu_data in MENU_STRUCTURE.values():
        for item in menu_data.get("items", []):
            if item["text"] == text:
                return True
    return False

def generate_menu_keyboard(menu_key: str) -> ReplyKeyboardMarkup:
    # ... (—Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    menu_config = MENU_STRUCTURE.get(menu_key, MENU_STRUCTURE[BotConstants.MENU_MAIN])
    keyboard_rows: List[List[KeyboardButton]] = []
    items = menu_config["items"]

    if menu_key in [BotConstants.MENU_MAIN, BotConstants.MENU_MODELS_SUBMENU]:
        for i in range(0, len(items), 2):
            keyboard_rows.append(
                [KeyboardButton(items[j]["text"]) for j in range(i, min(i + 2, len(items)))]
            )
    else:
        for item in items:
            keyboard_rows.append([KeyboardButton(item["text"])])
            
    if menu_config.get("is_submenu", False):
        navigation_row = [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        if menu_config.get("parent"):
            navigation_row.insert(0, KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
        keyboard_rows.append(navigation_row)
        
    return ReplyKeyboardMarkup(keyboard_rows, resize_keyboard=True, one_time_keyboard=False)


async def show_menu(update: Update, user_id: int, menu_key: str, user_data_param: Optional[Dict[str, Any]] = None):
    # ... (—Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    menu_cfg = MENU_STRUCTURE.get(menu_key)
    if not menu_cfg:
        logger.error(f"Menu key '{menu_key}' not found. Defaulting to main menu for user {user_id}.")
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∫–∞–∑—ã–≤–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=generate_menu_keyboard(BotConstants.MENU_MAIN)
        )
        await firestore_service.set_user_data(user_id, {'current_menu': BotConstants.MENU_MAIN})
        return

    await firestore_service.set_user_data(user_id, {'current_menu': menu_key})
    await update.message.reply_text(
        menu_cfg["title"],
        reply_markup=generate_menu_keyboard(menu_key),
        disable_web_page_preview=True
    )
    logger.info(f"User {user_id} was shown menu '{menu_key}'.")


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î TELEGRAM ---

@auto_delete_message_decorator(is_command_to_keep=True)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_first_name = update.effective_user.first_name
    
    user_data_loc = await firestore_service.get_user_data(user_id)
    updates_to_user_data = {}

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'current_ai_mode' not in user_data_loc:
        updates_to_user_data['current_ai_mode'] = CONFIG.DEFAULT_AI_MODE_KEY
    if BotConstants.FS_GEMS_BALANCE_KEY not in user_data_loc:
        updates_to_user_data[BotConstants.FS_GEMS_BALANCE_KEY] = 0  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≥–µ–º–æ–≤
    
    default_model_config = AVAILABLE_TEXT_MODELS[CONFIG.DEFAULT_MODEL_KEY]
    if 'selected_model_id' not in user_data_loc:
        updates_to_user_data['selected_model_id'] = default_model_config["id"]
        updates_to_user_data['selected_api_type'] = default_model_config.get("api_type")

    if updates_to_user_data:
        await firestore_service.set_user_data(user_id, updates_to_user_data)
        user_data_loc.update(updates_to_user_data)

    current_model_details = await get_selected_model_details(user_id, user_data_loc)
    mode_details = await get_current_mode_details(user_id, user_data_loc)
    user_gems = user_data_loc.get(BotConstants.FS_GEMS_BALANCE_KEY, 0)

    # –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º –≥–µ–º–æ–≤
    greeting_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user_first_name}!\n\n"
        f"ü§ñ –¢–µ–∫—É—â–∏–π –∞–≥–µ–Ω—Ç: <b>{mode_details['name']}</b>\n"
        f"‚öôÔ∏è –ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: <b>{current_model_details['name']}</b>\n"
        f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{user_gems} –≥–µ–º–æ–≤</b>\n\n"
        "–Ø –≥–æ—Ç–æ–≤ –∫ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–∞–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò "
        "–∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."
    )
    await update.message.reply_text(
        greeting_message,
        parse_mode=ParseMode.HTML,
        reply_markup=generate_menu_keyboard(BotConstants.MENU_MAIN)
    )
    await firestore_service.set_user_data(user_id, {'current_menu': BotConstants.MENU_MAIN})
    logger.info(f"User {user_id} ({user_first_name}) started the bot.")

@auto_delete_message_decorator()
async def open_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_menu(update, update.effective_user.id, BotConstants.MENU_MAIN)

@auto_delete_message_decorator()
async def usage_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_limits(update, update.effective_user.id)

# –ò–ó–ú–ï–ù–ï–ù–û: –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–µ–º–æ–≤
@auto_delete_message_decorator()
async def buy_gems_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_gems_invoice(update, context)

@auto_delete_message_decorator()
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await show_help(update, update.effective_user.id)

# --- –õ–û–ì–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò ---

async def show_limits(update: Update, user_id: int):
    user_data = await firestore_service.get_user_data(user_id)
    bot_data = await firestore_service.get_bot_data()
    
    user_gems = user_data.get(BotConstants.FS_GEMS_BALANCE_KEY, 0)
    
    parts = [f"<b>üìä –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –∏ –±–∞–ª–∞–Ω—Å</b>\nüíé –ë–∞–ª–∞–Ω—Å: <b>{user_gems} –≥–µ–º–æ–≤</b>\n"]
    today_str = datetime.now(timezone.utc).strftime("%Y-%m-%d")
    user_counts_today = bot_data.get(BotConstants.FS_ALL_USER_DAILY_COUNTS_KEY, {}).get(str(user_id), {})

    for model_key, model_config in AVAILABLE_TEXT_MODELS.items():
        if model_config.get("is_limited"):
            usage_info = user_counts_today.get(model_key, {'date': '', 'count': 0})
            current_day_usage = usage_info['count'] if usage_info['date'] == today_str else 0
            
            free_limit = model_config.get("free_daily_limit", 0)
            gem_cost = model_config.get("gem_cost", 0)

            limit_str = f"{current_day_usage} / {free_limit}"
            cost_str = ""
            if gem_cost > 0:
                cost_str = f" (<b>{gem_cost} üíé</b>/–∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö)" if free_limit > 0 else f" (<b>{gem_cost} üíé</b>/–∑–∞–ø—Ä–æ—Å)"
            
            parts.append(f"‚ñ´Ô∏è {model_config['name']}: {limit_str}{cost_str}")

    parts.append("\nüíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /buy –∏–ª–∏ –º–µ–Ω—é.")
        
    current_menu = user_data.get('current_menu', BotConstants.MENU_LIMITS_SUBMENU)
    await update.message.reply_text(
        "\n".join(parts), 
        parse_mode=ParseMode.HTML, 
        reply_markup=generate_menu_keyboard(current_menu),
        disable_web_page_preview=True
    )


async def show_help(update: Update, user_id: int):
    user_data = await firestore_service.get_user_data(user_id)
    # –ò–ó–ú–ï–ù–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
    help_text = (
        "<b>‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "–Ø –≤–∞—à –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í–æ—Ç –∫–∞–∫ —Å–æ –º–Ω–æ–π —Ä–∞–±–æ—Ç–∞—Ç—å:\n\n"
        "1.  <b>–ó–∞–ø—Ä–æ—Å—ã –∫ –ò–ò</b>: –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞—á—É –≤ —á–∞—Ç. –Ø –æ—Ç–≤–µ—á—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n\n"
        "2.  <b>–≠–∫–æ–Ω–æ–º–∏–∫–∞ –≥–µ–º–æ–≤ üíé</b>: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–æ–¥–µ–ª–∏ —Ç—Ä–µ–±—É—é—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã '–≥–µ–º—ã'.\n"
        "    - –£ —á–∞—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã.\n"
        "    - –ü–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∏–ª–∏ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≥–µ–º—ã —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.\n\n"
        "3.  <b>–ú–µ–Ω—é</b>: –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:\n"
        "    ‚ñ´Ô∏è ¬´<b>ü§ñ –ê–≥–µ–Ω—Ç—ã –ò–ò</b>¬ª: –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ò–ò (–≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤).\n"
        "    ‚ñ´Ô∏è ¬´<b>‚öôÔ∏è –ú–æ–¥–µ–ª–∏ –ò–ò</b>¬ª: –ü–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –º–µ–∂–¥—É —è–∑—ã–∫–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏.\n"
        "    ‚ñ´Ô∏è ¬´<b>üìä –õ–∏–º–∏—Ç—ã</b>¬ª: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å –≥–µ–º–æ–≤ –∏ –¥–Ω–µ–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã.\n"
        "    ‚ñ´Ô∏è ¬´<b>üíé –ö—É–ø–∏—Ç—å –ì–µ–º—ã</b>¬ª: –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –≥–µ–º–æ–≤.\n"
        "    ‚ñ´Ô∏è ¬´<b>‚ùì –ü–æ–º–æ—â—å</b>¬ª: –≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª —Å–ø—Ä–∞–≤–∫–∏.\n\n"
        "4.  <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>:\n"
        "    ‚ñ´Ô∏è /start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.\n"
        "    ‚ñ´Ô∏è /menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
        "    ‚ñ´Ô∏è /usage - –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç—ã –∏ –±–∞–ª–∞–Ω—Å.\n"
        "    ‚ñ´Ô∏è /buy - –ö—É–ø–∏—Ç—å –≥–µ–º—ã.\n"
        "    ‚ñ´Ô∏è /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É."
    )
    current_menu = user_data.get('current_menu', BotConstants.MENU_HELP_SUBMENU)
    await update.message.reply_text(
        help_text, 
        parse_mode=ParseMode.HTML, 
        reply_markup=generate_menu_keyboard(current_menu),
        disable_web_page_preview=True
    )

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö –ú–ï–ù–Æ ---
async def menu_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text: return
    user_id = update.effective_user.id
    button_text = update.message.text.strip()

    if not is_menu_button_text(button_text): return 

    try:
        await update.message.delete()
    except telegram.error.TelegramError as e:
        logger.warning(f"Failed to delete menu button message '{button_text}': {e}")

    user_data = await firestore_service.get_user_data(user_id)
    current_menu_key = user_data.get('current_menu', BotConstants.MENU_MAIN)

    if button_text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        parent_key = MENU_STRUCTURE.get(current_menu_key, {}).get("parent", BotConstants.MENU_MAIN)
        await show_menu(update, user_id, parent_key, user_data)
        return 
    elif button_text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await show_menu(update, user_id, BotConstants.MENU_MAIN, user_data)
        return

    action_item_found = None
    action_origin_menu_key = current_menu_key
    for menu_key, menu_config in MENU_STRUCTURE.items():
        for item in menu_config.get("items", []):
            if item["text"] == button_text:
                action_item_found = item
                action_origin_menu_key = menu_key
                break
        if action_item_found: break
    
    if not action_item_found:
        logger.warning(f"Menu button '{button_text}' not matched to any action.")
        return

    action_type = action_item_found["action"]
    action_target = action_item_found["target"]
    return_menu_key = MENU_STRUCTURE.get(action_origin_menu_key, {}).get("parent", BotConstants.MENU_MAIN)

    if action_type == BotConstants.CALLBACK_ACTION_SUBMENU:
        await show_menu(update, user_id, action_target, user_data)
    
    elif action_type == BotConstants.CALLBACK_ACTION_SET_AGENT:
        await firestore_service.set_user_data(user_id, {'current_ai_mode': action_target})
        agent_details = AI_MODES[action_target]
        response_text = f"ü§ñ –ê–≥–µ–Ω—Ç –ò–ò –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{agent_details['name']}</b>."
        await update.message.reply_text(
            response_text, parse_mode=ParseMode.HTML, reply_markup=generate_menu_keyboard(return_menu_key)
        )
        await firestore_service.set_user_data(user_id, {'current_menu': return_menu_key})

    elif action_type == BotConstants.CALLBACK_ACTION_SET_MODEL:
        model_info = AVAILABLE_TEXT_MODELS[action_target]
        await firestore_service.set_user_data(user_id, {
            'selected_model_id': model_info["id"], 'selected_api_type': model_info["api_type"]
        })
        response_text = f"‚öôÔ∏è –ú–æ–¥–µ–ª—å –ò–ò –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: <b>{model_info['name']}</b>."
        await update.message.reply_text(
            response_text, parse_mode=ParseMode.HTML, reply_markup=generate_menu_keyboard(return_menu_key)
        )
        await firestore_service.set_user_data(user_id, {'current_menu': return_menu_key})

    elif action_type == BotConstants.CALLBACK_ACTION_SHOW_LIMITS:
        await show_limits(update, user_id)
    elif action_type == BotConstants.CALLBACK_ACTION_BUY_GEMS:
        await send_gems_invoice(update, context) # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞
    elif action_type == BotConstants.CALLBACK_ACTION_SHOW_HELP:
        await show_help(update, user_id)


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô (–ó–ê–ü–†–û–°–´ –ö AI) ---
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not update.message or not update.message.text: return
    user_message_text = update.message.text.strip()
    await _store_and_try_delete_message(update, user_id, is_command_to_keep=False)

    if is_menu_button_text(user_message_text): return

    if len(user_message_text) < CONFIG.MIN_AI_REQUEST_LENGTH:
        user_data = await firestore_service.get_user_data(user_id)
        await update.message.reply_text(
            "–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.",
            reply_markup=generate_menu_keyboard(user_data.get('current_menu', BotConstants.MENU_MAIN))
        )
        return

    logger.info(f"User {user_id} sent AI request: '{user_message_text[:100]}...'")
    
    user_data = await firestore_service.get_user_data(user_id)
    current_model_key = await get_current_model_key(user_id, user_data)
    
    can_proceed, limit_message, charge_type = await check_and_log_request_attempt(user_id, current_model_key)
    
    if not can_proceed:
        await update.message.reply_text(
            limit_message, 
            parse_mode=ParseMode.HTML, 
            reply_markup=generate_menu_keyboard(user_data.get('current_menu', BotConstants.MENU_MAIN)), 
            disable_web_page_preview=True
        )
        return

    ai_service = get_ai_service(current_model_key)
    if not ai_service:
        await update.message.reply_text("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ AI –º–æ–¥–µ–ª–∏. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    
    mode_details = await get_current_mode_details(user_id, user_data)
    system_prompt = mode_details["prompt"]
    
    try:
        ai_response_text = await ai_service.generate_response(system_prompt, user_message_text)
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        await increment_request_count(user_id, current_model_key)
        if charge_type == "gems":
            await deduct_gems(user_id, current_model_key)

    except Exception as e:
        logger.error(f"Unhandled exception in AI service for model {current_model_key}: {e}", exc_info=True)
        ai_response_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    final_reply_text, _ = smart_truncate(ai_response_text, CONFIG.MAX_MESSAGE_LENGTH_TELEGRAM)
    
    await update.message.reply_text(
        final_reply_text, 
        reply_markup=generate_menu_keyboard(user_data.get('current_menu', BotConstants.MENU_MAIN)), 
        disable_web_page_preview=True
    )
    logger.info(f"Successfully sent AI response (model: {current_model_key}) to user {user_id}.")


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô ---

# –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –≥–µ–º–æ–≤
async def send_gems_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—á–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É 100 –≥–µ–º–æ–≤."""
    chat_id = update.effective_chat.id
    title = "–ü–æ–∫—É–ø–∫–∞ –ì–µ–º–æ–≤"
    description = "100 –≥–µ–º–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–æ–¥–µ–ª–µ–π –ò–ò"
    # payload - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–∫—É–ø–∫–∏
    payload = f"buy_gems_100_user_{chat_id}_{uuid.uuid4()}"
    currency = "RUB"
    # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (100 —Ä—É–±–ª–µ–π = 10000 –∫–æ–ø–µ–µ–∫)
    price = 10000 
    
    prices = [LabeledPrice("100 üíé –ì–µ–º–æ–≤", price)]

    await context.bot.send_invoice(
        chat_id=chat_id,
        title=title,
        description=description,
        payload=payload,
        provider_token=CONFIG.PAYMENT_PROVIDER_TOKEN,
        currency=currency,
        prices=prices,
        # need_name=True, # –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–º—è
        # need_phone_number=True, # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω
        # need_email=True, # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω email
        # is_flexible=False # True, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∞
    )


async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ–∫—É–ø–∫–∞ –≥–µ–º–æ–≤
    if "buy_gems" in query.invoice_payload:
        await query.answer(ok=True)
        logger.info(f"PreCheckoutQuery OK for payload: {query.invoice_payload}")
    else:
        await query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É.")
        logger.warning(f"PreCheckoutQuery FAILED for payload: {query.invoice_payload}")

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    payment_info = update.message.successful_payment
    invoice_payload = payment_info.invoice_payload

    logger.info(f"Successful payment from user {user_id}. Amount: {payment_info.total_amount} {payment_info.currency}. Payload: {invoice_payload}")

    # –ò–ó–ú–ï–ù–ï–ù–û: –õ–æ–≥–∏–∫–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –≥–µ–º–æ–≤
    gems_to_add = 0
    if "buy_gems_100" in invoice_payload:
        gems_to_add = 100
    
    if gems_to_add > 0:
        user_data = await firestore_service.get_user_data(user_id)
        current_gems = user_data.get(BotConstants.FS_GEMS_BALANCE_KEY, 0)
        new_balance = current_gems + gems_to_add
        await firestore_service.set_user_data(user_id, {BotConstants.FS_GEMS_BALANCE_KEY: new_balance})
        
        confirmation_message = (
            f"üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{gems_to_add} –≥–µ–º–æ–≤</b>.\n"
            f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{new_balance} üíé</b>\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
        )
        await update.message.reply_text(confirmation_message, parse_mode=ParseMode.HTML)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if CONFIG.ADMIN_ID:
            try:
                admin_message = (
                    f"üîî –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –≥–µ–º–æ–≤!\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{update.effective_user.username})\n"
                    f"–°—É–º–º–∞: {payment_info.total_amount / 100} {payment_info.currency}\n"
                    f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: {gems_to_add} –≥–µ–º–æ–≤"
                )
                await context.bot.send_message(CONFIG.ADMIN_ID, admin_message)
            except Exception as e:
                logger.error(f"Failed to send payment notification to admin: {e}")
    else:
        logger.warning(f"Could not determine gems to add from payload: {invoice_payload}")
        await update.message.reply_text("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –≥–µ–º–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ---
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    # ... (—Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
    tb_string = "".join(tb_list)

    if isinstance(update, Update) and update.effective_chat:
        user_data_for_error_reply = {}
        if update.effective_user:
             user_data_for_error_reply = await firestore_service.get_user_data(update.effective_user.id)
        try:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start.",
                reply_markup=generate_menu_keyboard(user_data_for_error_reply.get('current_menu', BotConstants.MENU_MAIN))
            )
        except Exception as e:
            logger.error(f"Failed to send error message to user {update.effective_chat.id}: {e}")

    if CONFIG.ADMIN_ID and isinstance(update, Update) and update.effective_user:
        error_details = (
            f"ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞:\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {update.effective_user.id} (@{update.effective_user.username})\n"
            f"Traceback:\n```\n{tb_string[:3500]}\n```"
        )
        try:
            await context.bot.send_message(CONFIG.ADMIN_ID, error_details, parse_mode=ParseMode.MARKDOWN_V2)
        except Exception as e:
            logger.error(f"Failed to send detailed error report to admin: {e}")


# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ë–û–¢–ê ---
async def main():
    if CONFIG.GOOGLE_GEMINI_API_KEY and "YOUR_" not in CONFIG.GOOGLE_GEMINI_API_KEY:
        try:
            genai.configure(api_key=CONFIG.GOOGLE_GEMINI_API_KEY)
            logger.info("Google Gemini API configured.")
        except Exception as e:
            logger.error(f"Failed to configure Google Gemini API: {e}")
    else:
        logger.warning("Google Gemini API key is missing or invalid.")

    if not firestore_service._db:
        logger.critical("Firestore was NOT initialized! Bot may not work correctly.")

    app = Application.builder().token(CONFIG.TELEGRAM_TOKEN).read_timeout(30).connect_timeout(30).build()

    # –ò–ó–ú–ï–ù–ï–ù–û: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π /buy
    app.add_handler(CommandHandler("start", start), group=0)
    app.add_handler(CommandHandler("menu", open_menu_command), group=0)
    app.add_handler(CommandHandler("usage", usage_command), group=0)
    app.add_handler(CommandHandler("buy", buy_gems_command), group=0)
    app.add_handler(CommandHandler("help", help_command), group=0)
    
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_button_handler), group=1)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text), group=2)
    
    app.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    
    app.add_error_handler(error_handler)

    # –ò–ó–ú–ï–ù–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    bot_commands = [
        BotCommand("start", "üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ / –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("menu", "üìã –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("usage", "üìä –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç—ã –∏ –±–∞–ª–∞–Ω—Å"),
        BotCommand("buy", "üíé –ö—É–ø–∏—Ç—å –≥–µ–º—ã"),
        BotCommand("help", "‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É")
    ]
    try:
        await app.bot.set_my_commands(bot_commands)
        logger.info("Bot commands successfully set.")
    except Exception as e:
        logger.error(f"Failed to set bot commands: {e}")

    logger.info("Bot is starting...")
    await app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    asyncio.run(main())
