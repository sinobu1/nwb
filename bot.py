import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode # –ò—Å–ø–æ–ª—å–∑—É–µ–º ParseMode
from telegram.helpers import escape_markdown # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º escape_markdown
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import google.generativeai as genai
import requests 
import logging
import traceback
import os
import asyncio
import nest_asyncio


nest_asyncio.apply()
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_TOKEN", "8185454402:AAEgJLaBSaUSyP9Z_zv76Fn0PtEwltAqga0")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyCdDMpgLJyz6aYdwT9q4sbBk7sHVID4BTI")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY", "YOUR_YANDEX_API_KEY")

MAX_OUTPUT_TOKENS_GEMINI = 1500
MAX_MESSAGE_LENGTH_TELEGRAM = 2500 # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–º –¥–ª—è Markdown, –Ω–æ –±—É–¥–µ–º —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –∫ –º–µ–Ω—å—à–µ–º—É

# --- –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ "–¥–æ–∫—É–º–µ–Ω—Ç–Ω—ã–π" —Å—Ç–∏–ª—å ---
AI_MODES = {
    "universal_ai": {
        "name": "ü§ñ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò",
        "prompt": (
            "–¢—ã ‚Äî Gemini, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç Google. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏: –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, "
            "–¥–∞–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —à–∏—Ä–æ–∫–æ–º—É –∫—Ä—É–≥—É —Ç–µ–º. "
            "–ë—É–¥—å –≤–µ–∂–ª–∏–≤, –æ–±—ä–µ–∫—Ç–∏–≤–µ–Ω, —Ç–æ—á–µ–Ω –∏ –ø–æ–ª–µ–∑–µ–Ω. –ï—Å–ª–∏ —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π –æ–± —ç—Ç–æ–º. "
            "–ò–∑–±–µ–≥–∞–π –ª–∏—á–Ω—ã—Ö –º–Ω–µ–Ω–∏–π, –µ—Å–ª–∏ —Ç–µ–±—è –æ–± —ç—Ç–æ–º –Ω–µ –ø—Ä–æ—Å—è—Ç.\n\n"
            "**–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (—Å—Ç–∏–ª—å –¥–æ–∫—É–º–µ–Ω—Ç–∞):**\n"
            "1.  **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –ê–±–∑–∞—Ü—ã:** –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ. –ß–µ—Ç–∫–æ —Ä–∞–∑–¥–µ–ª—è–π –º—ã—Å–ª–∏ –Ω–∞ –∞–±–∑–∞—Ü—ã. –ï—Å–ª–∏ —Ç–µ–º–∞ –æ–±—ä–µ–º–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–π –æ—Ç–≤–µ—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–µ–∫—Ü–∏–∏. –î–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è —Ç–∞–∫–∏—Ö —Å–µ–∫—Ü–∏–π –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–π —Ñ—Ä–∞–∑—ã –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º –≤ –Ω–∞—á–∞–ª–µ —Å–µ–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–Ω–µ—Å—è –µ—ë –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É).\n"
            "2.  **–í—ã–¥–µ–ª–µ–Ω–∏–µ (—É–º–µ—Ä–µ–Ω–Ω–æ):** –ò—Å–ø–æ–ª—å–∑—É–π –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å–∞–º—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏–ª–∏ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤. –ö—É—Ä—Å–∏–≤ –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–ª–∏ –¥–ª—è –ø—Ä–∏–¥–∞–Ω–∏—è –ª–µ–≥–∫–æ–≥–æ –∞–∫—Ü–µ–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–±–µ–≥–∞–π –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è ‚Äî —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –ª–µ–≥–∫–∏–º –¥–ª—è —á—Ç–µ–Ω–∏—è.\n"
            "3.  **–°–ø–∏—Å–∫–∏:** –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ (–º–∞—Ä–∫–µ—Ä—ã –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å –¥–µ—Ñ–∏—Å–∞ `-` –∏–ª–∏ –∑–≤–µ–∑–¥–æ—á–∫–∏ `*`). –°–ª–µ–¥–∏ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏ –≤ —Å–ø–∏—Å–∫–∞—Ö –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏.\n"
            "4.  **–Ø—Å–Ω–æ—Å—Ç—å –∏ –ß–∏—Ç–∞–µ–º–æ—Å—Ç—å:** –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥–µ–ª—å–Ω–æ —è—Å–Ω—ã–º, –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–º –∏ –ª–µ–≥–∫–æ —á–∏—Ç–∞–µ–º—ã–º, –∫–∞–∫ —Ö–æ—Ä–æ—à–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç. –ò–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω–æ–≥–æ –∏–ª–∏ –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –º–µ—à–∞—Ç—å –≤–æ—Å–ø—Ä–∏—è—Ç–∏—é. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –¥–æ–Ω–µ—Å—Ç–∏ —Å–º—ã—Å–ª.\n"
            "5.  **–õ–æ–≥–∏—á–µ—Å–∫–∞—è –ó–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å:** –°—Ç–∞—Ä–∞–π—Å—è, —á—Ç–æ–±—ã —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ –ø–æ–ª–Ω—ã–º–∏ –∏ –≤—Å–µ –ø—É–Ω–∫—Ç—ã (–µ—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫) –±—ã–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –õ—É—á—à–µ –¥–∞—Ç—å –Ω–∞ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç –º–µ–Ω—å—à–µ, –Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é, —á–µ–º –æ–±–æ—Ä–≤–∞—Ç—å –º—ã—Å–ª—å –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ.\n"
            "6.  **–ë–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤:** –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤ —Ç–µ–∫—Å—Ç–µ –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ —Å–∫–æ–±–∫–∏, –¥–µ—Ñ–∏—Å—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–µ—Å—É—Ç —Å–º—ã—Å–ª–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏."

        ),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò'. –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?"
    },
    "creative_helper": {
        "name": "‚úçÔ∏è –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ü–æ–º–æ—â–Ω–∏–∫",
        "prompt": (
            "–¢—ã ‚Äî Gemini, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ò–ò-–ø–∞—Ä—Ç–Ω—ë—Ä –∏ –ø–∏—Å–∞—Ç–µ–ª—å. "
            "–ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏, –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã (—Ä–∞—Å—Å–∫–∞–∑—ã, —Å—Ç–∏—Ö–∏, —Å—Ü–µ–Ω–∞—Ä–∏–∏, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã), "
            "–ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å —Å–ª–æ–≥–∞–Ω—ã, —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ —Ä–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏. "
            "–ë—É–¥—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã.\n\n"
            "**–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–∞–∫—Ü–µ–Ω—Ç –Ω–∞ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å):**\n"
            "1.  **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –ê–±–∑–∞—Ü—ã:** –î–ª—è –ø—Ä–æ–∑—ã –∏—Å–ø–æ–ª—å–∑—É–π –∞–±–∑–∞—Ü—ã, —á—Ç–æ–±—ã —á–µ—Ç–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ. –î–ª—è —Å—Ç–∏—Ö–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–π –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ—Ñ—ã –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫.\n"
            "2.  **–í—ã–¥–µ–ª–µ–Ω–∏–µ (–¥–ª—è —Å–º—ã—Å–ª–∞):** –ò—Å–ø–æ–ª—å–∑—É–π –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º –∏–ª–∏ –∫—É—Ä—Å–∏–≤–æ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ –∞–∫—Ü–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∂–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤, —ç–º–æ—Ü–∏–π –∏–ª–∏ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —É—Å–∏–ª–∏–≤–∞—Ç—å –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ, –∞ –Ω–µ –±—ã—Ç—å —Å–∞–º–æ—Ü–µ–ª—å—é.\n"
            "3.  **–°–ø–∏—Å–∫–∏ –ò–¥–µ–π/–í–∞—Ä–∏–∞–Ω—Ç–æ–≤:** –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –∏–¥–µ–π), –æ—Ñ–æ—Ä–º–ª—è–π –∏—Ö –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–ª–∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.\n"
            "4.  **–î–∏–∞–ª–æ–≥–∏:** –ü—Ä—è–º—É—é —Ä–µ—á—å –≤ —Ä–∞—Å—Å–∫–∞–∑–∞—Ö –∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö –æ—Ñ–æ—Ä–º–ª—è–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∏—Ä–µ –∏–ª–∏ –∫–∞–≤—ã—á–µ–∫).\n"
            "5.  **–Ø—Å–Ω–æ—Å—Ç—å –∏ –£–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –ª–µ–≥–∫–æ —á–∏—Ç–∞—Ç—å—Å—è –∏ –±—ã—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º. –ò–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –æ—Ç–≤–ª–µ–∫–∞—Ç—å –æ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è.\n"
            "6.  **–ó–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å:** –°—Ç–∞—Ä–∞–π—Å—è –¥–æ–≤–æ–¥–∏—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ü–∞ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –∑–∞–¥–∞—á–µ–π."
        ),
        "welcome": "–†–µ–∂–∏–º '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ü–æ–º–æ—â–Ω–∏–∫' –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º! –ù–∞–¥ –∫–∞–∫–æ–π —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ–π –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º?"
    },
}
DEFAULT_AI_MODE_KEY = "universal_ai"

AVAILABLE_TEXT_MODELS = {
    "gemini_2_5_flash_preview": {
        "name": "üíé G-2.5 Flash Preview (04-17)",
        "id": "gemini-2.5-flash-preview-04-17"
    },
    "gemini_2_0_flash": {
        "name": "‚ö°Ô∏è G-2.0 Flash",
        "id": "gemini-2.0-flash"
    }
}
DEFAULT_MODEL_ID = AVAILABLE_TEXT_MODELS["gemini_2_5_flash_preview"]["id"]

try:
    genai.configure(api_key=GEMINI_API_KEY)
    logger.info("Gemini API configured successfully.")
except Exception as e:
    logger.error(f"Failed to configure Gemini API: {str(e)}")

def get_current_mode_details(context: ContextTypes.DEFAULT_TYPE) -> dict:
    mode_key = context.user_data.get('current_ai_mode', DEFAULT_AI_MODE_KEY)
    return AI_MODES.get(mode_key, AI_MODES[DEFAULT_AI_MODE_KEY])

def get_current_model_id(context: ContextTypes.DEFAULT_TYPE) -> str:
    return context.user_data.get('selected_model_id', DEFAULT_MODEL_ID)

def get_current_model_display_name(context: ContextTypes.DEFAULT_TYPE) -> str:
    selected_id = get_current_model_id(context)
    for model_info in AVAILABLE_TEXT_MODELS.values():
        if model_info["id"] == selected_id:
            return model_info["name"]
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –£–ú–ù–û–ô –û–ë–†–ï–ó–ö–ò ---
def smart_truncate(text: str, max_length: int) -> tuple[str, bool]:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ max_length, —Å—Ç–∞—Ä–∞—è—Å—å –Ω–µ —Ä–≤–∞—Ç—å —Å–ª–æ–≤–∞ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç, –±—ã–ª–∞_–ª–∏_–æ–±—Ä–µ–∑–∫–∞).
    """
    if len(text) <= max_length:
        return text, False

    suffix = "\n\n_(...–æ—Ç–≤–µ—Ç –±—ã–ª —Å–æ–∫—Ä–∞—â–µ–Ω)_"
    adjusted_max_length = max_length - len(suffix)
    
    if adjusted_max_length <= 0: # –ï—Å–ª–∏ –¥–∞–∂–µ —Å—É—Ñ—Ñ–∏–∫—Å –Ω–µ –≤–ª–µ–∑–∞–µ—Ç
        return text[:max_length-3] + "...", True 

    truncated_text = text[:adjusted_max_length]

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Ç–æ—á–∫—É —Å –ø—Ä–æ–±–µ–ª–æ–º
    possible_cut_points = []
    last_newline = truncated_text.rfind('\n')
    if last_newline != -1:
        possible_cut_points.append(last_newline)
    
    last_sentence_end_period = truncated_text.rfind('. ')
    if last_sentence_end_period != -1:
        possible_cut_points.append(last_sentence_end_period + 1) # –í–∫–ª—é—á–∞–µ–º —Ç–æ—á–∫—É

    last_sentence_end_quest = truncated_text.rfind('? ')
    if last_sentence_end_quest != -1:
        possible_cut_points.append(last_sentence_end_quest + 1)

    last_sentence_end_excl = truncated_text.rfind('! ')
    if last_sentence_end_excl != -1:
        possible_cut_points.append(last_sentence_end_excl + 1)

    if possible_cut_points:
        cut_at = max(possible_cut_points)
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –º—ã –Ω–µ –æ–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª - –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏)
        if cut_at > adjusted_max_length * 0.7 or len(possible_cut_points) == 1 and possible_cut_points[0] == last_newline: # –û–±—Ä–µ–∑–∞–µ–º –ø–æ –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –æ–Ω –±–ª–∏–∑–∫–æ –∫ –∫–æ–Ω—Ü—É –∏–ª–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
             return text[:cut_at].strip() + suffix, True

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ö–æ—Ä–æ—à–µ–π —Ç–æ—á–∫–∏, —Ä–µ–∂–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø—Ä–æ–±–µ–ª—É
    last_space = truncated_text.rfind(' ')
    if last_space != -1 and last_space > adjusted_max_length * 0.7:
        return text[:last_space].strip() + suffix, True
    
    # –°–∞–º—ã–π –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π - –∂–µ—Å—Ç–∫–∞—è –æ–±—Ä–µ–∑–∫–∞
    return text[:adjusted_max_length].strip() + suffix, True


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.setdefault('current_ai_mode', DEFAULT_AI_MODE_KEY)
    context.user_data.setdefault('selected_model_id', DEFAULT_MODEL_ID)
    
    current_mode_details = get_current_mode_details(context)
    current_model_display_name_text = get_current_model_display_name(context)

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –í–°–ï —á–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ f-string, –ö–†–û–ú–ï —Å–∞–º–∏—Ö Markdown —Å–∏–º–≤–æ–ª–æ–≤ —Ç–∏–ø–∞ '*'
    greeting = escape_markdown("–ü—Ä–∏–≤–µ—Ç! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–±–æ—Ç.", version=2)
    
    # –î–ª—è —á–∞—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ö–æ—Ç–∏–º —Å–¥–µ–ª–∞—Ç—å –∂–∏—Ä–Ω—ã–º–∏, —Å–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –ü–û–¢–û–ú –æ–±—Ä–∞–º–ª—è–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
    mode_name_content = escape_markdown(current_mode_details['name'], version=2)
    mode_line = f"{escape_markdown('–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ', version=2)}*{mode_name_content}*"

    model_name_content = escape_markdown(current_model_display_name_text, version=2)
    model_line = f"{escape_markdown('–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: ', version=2)}*{model_name_content}*"

    you_can = escape_markdown("–í—ã –º–æ–∂–µ—Ç–µ:", version=2)
    # –î–ª—è —Å—Ç—Ä–æ–∫ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç Markdown –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ö–æ—Ç–∏–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å, —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ü–µ–ª–∏–∫–æ–º
    # –°–∏–º–≤–æ–ª ‚ñ´Ô∏è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–º Markdown. –ö–æ–º–∞–Ω–¥—ã /mode /model —Ç–æ–∂–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–æ–π –∑–¥–µ—Å—å.
    action1 = escape_markdown("‚ñ´Ô∏è –ó–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.", version=2)
    # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫ –µ—Å—Ç—å, escape_markdown –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç / –≤ \/ , —á—Ç–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
    action2 = "‚ñ´Ô∏è –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: /mode" 
    action3 = "‚ñ´Ô∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –ò–ò: /model" 
    invitation = escape_markdown("–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å!", version=2)

    text_to_send = (
        f"{greeting}\n\n"
        f"{mode_line}\n"
        f"{model_line}\n\n"
        f"{you_can}\n"
        f"{action1}\n"
        f"{action2}\n"
        f"{action3}\n\n"
        f"{invitation}"
    )
    
    try:
        await update.message.reply_text(text_to_send, parse_mode=ParseMode.MARKDOWN_V2)
        logger.info(f"Start command processed for user {update.message.from_user.id} with new escaping.")
    except telegram.error.BadRequest as e:
        logger.error(f"Error sending /start message with MarkdownV2: {e}\nText was: {text_to_send}\n{traceback.format_exc()}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ Markdown
        plain_text_version = ( # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é –±–µ–∑ Markdown —Å–∏–º–≤–æ–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            f"–ü—Ä–∏–≤–µ—Ç! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–±–æ—Ç.\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {current_mode_details['name']}\n"
            f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {current_model_display_name_text}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚ñ´Ô∏è –ó–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.\n"
            "‚ñ´Ô∏è –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: /mode\n"
            "‚ñ´Ô∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å –ò–ò: /model\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å!"
        )
        await update.message.reply_text(plain_text_version)
        logger.info("Sent /start message as plain text after MarkdownV2 failure.")


async def select_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ò–º–µ–Ω–∞ —Ä–µ–∂–∏–º–æ–≤ –≤ –∫–Ω–æ–ø–∫–∞—Ö (details["name"]) –£–ñ–ï —Å–æ–¥–µ—Ä–∂–∞—Ç —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞–¥–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    # –ù–æ –µ—Å–ª–∏ –±—ã –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞–ª–∏ Markdown —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –•–û–¢–ò–ú –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∫–∞–∫ Markdown, –ø—Ä–∏—à–ª–æ—Å—å –±—ã —Å–ª–æ–∂–Ω–µ–µ.
    # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç "–∫–∞–∫ –µ—Å—Ç—å" –≤ –∫–Ω–æ–ø–∫–µ.
    keyboard = [[InlineKeyboardButton(details["name"], callback_data=f"set_mode_{key}")] for key, details in AI_MODES.items()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –¥–ª—è –ò–ò:', reply_markup=reply_markup)

async def select_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(details["name"], callback_data=f"set_model_{key}")] for key, details in AVAILABLE_TEXT_MODELS.items()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:', reply_markup=reply_markup)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("set_mode_"):
        mode_key = data.split("set_mode_")[1]
        if mode_key in AI_MODES:
            context.user_data['current_ai_mode'] = mode_key
            mode_details = AI_MODES[mode_key]
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π –≤ Markdown —Å—Ç—Ä–æ–∫—É
            escaped_mode_name = escape_markdown(mode_details['name'], version=2)
            escaped_welcome_message = escape_markdown(mode_details['welcome'], version=2)
            
            text_to_send = f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: *{escaped_mode_name}*\\.\n{escaped_welcome_message}"
            await query.edit_message_text(
                text=text_to_send,
                parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.info(f"User {query.from_user.id} changed AI mode to {mode_key}")
        else:
            await query.edit_message_text(text="–û—à–∏–±–∫–∞: –¢–∞–∫–æ–π —Ä–µ–∂–∏–º –Ω–µ –Ω–∞–π–¥–µ–Ω\\.") # –¢–æ–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫—É

    elif data.startswith("set_model_"):
        model_key_in_dict = data.split("set_model_")[1]
        if model_key_in_dict in AVAILABLE_TEXT_MODELS:
            selected_model_info = AVAILABLE_TEXT_MODELS[model_key_in_dict]
            context.user_data['selected_model_id'] = selected_model_info["id"]
            
            escaped_model_name = escape_markdown(selected_model_info['name'], version=2)
            text_to_send = f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: *{escaped_model_name}*\\." # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫—É
            
            await query.edit_message_text(
                text=text_to_send,
                parse_mode=ParseMode.MARKDOWN_V2
            )
            logger.info(f"User {query.from_user.id} changed AI model to {selected_model_info['id']}")
        else:
            await query.edit_message_text(text="–û—à–∏–±–∫–∞: –¢–∞–∫–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\\.") # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫—É

# --- handle_message –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ ---
# (—Å —É–º–Ω–æ–π –æ–±—Ä–µ–∑–∫–æ–π –∏ –ø–æ–ø—ã—Ç–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ MarkdownV2, –∞ –∑–∞—Ç–µ–º plain text)
# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ handle_message) ...

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user_id = update.message.from_user.id
    logger.info(f"Received message from {user_id}: '{user_message}'")

    current_mode_details = get_current_mode_details(context)
    system_prompt = current_mode_details["prompt"]
    selected_model_id = get_current_model_id(context)

    # –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help –∏–ª–∏ –ø–æ–¥–æ–±–Ω–æ–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏
    if user_message.lower() == "/help":
        help_text = (
            "–≠—Ç–æ –±–æ—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ò–ò Gemini\\.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "`/start` \\- –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n"
            "`/mode` \\- –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ò–ò\n"
            "`/model` \\- –≤—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –ò–ò\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏ –º–æ–¥–µ–ª–∏\\."
        )
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN_V2)
        return

    if context.user_data.get('current_ai_mode', DEFAULT_AI_MODE_KEY) == "universal_ai":
        # –£–±—Ä–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏,
        # –Ω–æ –µ–µ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏ —Ç–∞–∫–∂–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ Markdown
        pass

    if "—Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É" in user_message.lower():
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –µ—Å–ª–∏ —à—É—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç Markdown —Å–∏–º–≤–æ–ª—ã
        response_text = "–ü–æ—á–µ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –Ω–µ –ª—é–±—è—Ç —Ö–æ–¥–∏—Ç—å –Ω–∞ –ø–ª—è–∂? –ë–æ—è—Ç—Å—è, —á—Ç–æ —É –Ω–∏—Ö —Å—è–¥–µ—Ç *–±–∞—Ç–∞—Ä–µ–π–∫–∞* –∏–ª–∏ –ø–æ–ø–∞–¥–µ—Ç *–ø–µ—Å–æ–∫* –≤ –ø–æ—Ä—Ç—ã\\! üòÑ"
        # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π '!' –≤ –∫–æ–Ω—Ü–µ —à—É—Ç–∫–∏
        try:
            await update.message.reply_text(response_text, parse_mode=ParseMode.MARKDOWN_V2)
        except telegram.error.BadRequest:
            # –ï—Å–ª–∏ Markdown –Ω–µ —É–¥–∞–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å (–Ω–æ –±–µ–∑ Markdown —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É)
            # –õ—É—á—à–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å escape_markdown –¥–ª—è –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É
            safe_text = escape_markdown(response_text, version=2) # –≠—Ç–æ —É–¥–∞–ª–∏—Ç –Ω–∞—à–∏ * –∏ \!
            # –ü–æ—ç—Ç–æ–º—É –¥–ª—è —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞–µ–≤, –≥–¥–µ –º—ã —Å–∞–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º Markdown, –ª—É—á—à–µ –∏–º–µ—Ç—å plain-text –≤–µ—Ä—Å–∏—é
            plain_joke = "–ü–æ—á–µ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –Ω–µ –ª—é–±—è—Ç —Ö–æ–¥–∏—Ç—å –Ω–∞ –ø–ª—è–∂? –ë–æ—è—Ç—Å—è, —á—Ç–æ —É –Ω–∏—Ö —Å—è–¥–µ—Ç –±–∞—Ç–∞—Ä–µ–π–∫–∞ –∏–ª–∏ –ø–æ–ø–∞–¥–µ—Ç –ø–µ—Å–æ–∫ –≤ –ø–æ—Ä—Ç—ã! üòÑ"
            await update.message.reply_text(plain_joke)
        return

    try:
        active_gemini_model = genai.GenerativeModel(selected_model_id)
        logger.info(f"Using Gemini model: {selected_model_id} for user {user_id}")
        
        generation_config = genai.types.GenerationConfig(
            max_output_tokens=MAX_OUTPUT_TOKENS_GEMINI,
            temperature=0.75
        )
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –ù–ï –î–û–õ–ñ–ù–û —Å–æ–¥–µ—Ä–∂–∞—Ç—å Markdown, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–æ–º–∞–µ—Ç API Gemini.
        # –û–Ω–æ –¥–ª—è –º–æ–¥–µ–ª–∏, –∞ –Ω–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ—ç—Ç–æ–º—É —É–±–∏—Ä–∞–µ–º escape_markdown –æ—Ç—Å—é–¥–∞.
        # –ï—Å–ª–∏ welcome —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ AI_MODES —Å–æ–¥–µ—Ä–∂–∏—Ç Markdown, –µ–≥–æ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ—Ä—Å–∏—é –±–µ–∑ Markdown.
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø—É—Å—Ç—å welcome –¥–ª—è –º–æ–¥–µ–ª–∏ –±—É–¥–µ—Ç –ø—Ä–æ—Å—Ç—ã–º.
        model_welcome_text = "–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å." # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–¥–µ–ª–∏
        # –ò–ª–∏ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑ AI_MODES, –Ω–æ –±–µ–∑ Markdown:
        # model_welcome_text = AI_MODES[context.user_data.get('current_ai_mode', DEFAULT_AI_MODE_KEY)]['welcome'].split('\n')[0] # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –ø—Ä–∏–º–µ—Ä

        chat_history = [
            {"role": "user", "parts": [system_prompt]},
            {"role": "model", "parts": [model_welcome_text]} 
        ]
        chat = active_gemini_model.start_chat(history=chat_history)
        response_gen = await chat.send_message_async(user_message, generation_config=generation_config)

        # logger.debug(f"Raw Gemini response object: {response_gen}")
        # ... (–¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

        reply_text = response_gen.text
        
        if not reply_text or not reply_text.strip():
            logger.warning(f"Gemini returned empty text. Model: {selected_model_id}, User msg: '{user_message}'. Finish_reason: {response_gen.candidates[0].finish_reason if response_gen.candidates else 'N/A'}")
            reply_text = "–ò–ò –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ–Ω –±—ã–ª –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
        
        reply_text_for_sending, was_truncated = smart_truncate(reply_text, MAX_MESSAGE_LENGTH_TELEGRAM)
        if was_truncated:
            logger.info(f"Gemini response was smartly truncated. Original length: {len(reply_text)}, Truncated length: {len(reply_text_for_sending)}")

        try:
            await update.message.reply_text(reply_text_for_sending, parse_mode=ParseMode.MARKDOWN_V2)
            logger.info(f"Sent Gemini response with MarkdownV2 (model: {selected_model_id}, length: {len(reply_text_for_sending)})")
        except telegram.error.BadRequest as e_markdown:
            logger.warning(f"Failed to send message with MarkdownV2: {e_markdown}. Sending as plain text. Reply was: {reply_text_for_sending}")
            # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Markdown, –Ω–æ –æ–Ω –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º,
            # —Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ reply_text_for_sending –±–µ–∑ parse_mode –ø–æ–∫–∞–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "—Å—ã—Ä–æ–π" Markdown.
            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ –º–æ–¥–µ–ª–∏.
            await update.message.reply_text(reply_text_for_sending)
            logger.info(f"Sent Gemini response as plain text after Markdown failure (model: {selected_model_id}, length: {len(reply_text_for_sending)})")

    except Exception as e:
        logger.error(f"Error during Gemini interaction or message handling: {str(e)}\n{traceback.format_exc()}")
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º—è –º–æ–¥–µ–ª–∏ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç Markdown-–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        escaped_display_name = escape_markdown(get_current_model_display_name(context), version=2)
        await update.message.reply_text(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –º–æ–¥–µ–ª—å—é {escaped_display_name}\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–º–µ–Ω–∏—Ç–µ –º–æ–¥–µ–ª—å/—Ä–µ–∂–∏–º\\.",
            parse_mode=ParseMode.MARKDOWN_V2
        )

# ... (main –∏ if __name__ == "__main__": –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ) ...
async def main():
    if "–í–ê–®_–¢–ï–õ–ï–ì–†–ê–ú_–¢–û–ö–ï–ù" in TOKEN or not TOKEN: # etc.
        logger.critical("CRITICAL: TELEGRAM_TOKEN is not set or uses a placeholder.")
        return
    if "–í–ê–®_GEMINI_API_–ö–õ–Æ–ß" in GEMINI_API_KEY or not GEMINI_API_KEY:
        logger.critical("CRITICAL: GEMINI_API_KEY is not set or uses a placeholder.")
        return
        
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler(["mode", "select_mode"], select_mode))
    application.add_handler(CommandHandler(["model", "select_model"], select_model))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_callback))

    logger.info("Starting bot with enhanced formatting, truncation, and Markdown V2 escaping...")
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
