import telegram
from telegram import (
    InlineKeyboardButton, InlineKeyboardMarkup, Update,
    ReplyKeyboardMarkup, KeyboardButton, BotCommand
)
from telegram.constants import ParseMode, ChatAction # ChatAction –≤—Å–µ –µ—â–µ –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è "–ø–µ—á–∞—Ç–∞–µ—Ç..."
from telegram.helpers import escape_markdown
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, CallbackQueryHandler, PicklePersistence # <--- –î–û–ë–ê–í–õ–ï–ù–û –ó–î–ï–°–¨
)
import google.generativeai as genai
import google.api_core.exceptions # –û—Å—Ç–∞–≤–∏–º –Ω–∞ —Å–ª—É—á–∞–π —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ API
import requests
import logging
import traceback
import os
import asyncio
import nest_asyncio
# import io # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ –Ω–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

nest_asyncio.apply()
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO) # –í–µ—Ä–Ω–µ–º INFO, DEBUG –±—ã–ª –¥–ª—è imagine
logger = logging.getLogger(__name__)

# --- –ö–õ–Æ–ß–ò API –ò –¢–û–ö–ï–ù–´ ---
TOKEN = os.getenv("TELEGRAM_TOKEN", "8185454402:AAEgJLaBSaUSyP9Z_zv76Fn0PtEwltAqga0") # –ó–ê–ú–ï–ù–ò–¢–ï!!
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyCdDMpgLJyz6aYdwT9q4sbBk7sHVID4BTI") # –ó–ê–ú–ï–ù–ò–¢–ï!!
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY", "YOUR_YANDEX_API_KEY") # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
MAX_OUTPUT_TOKENS_GEMINI = 1500
MAX_MESSAGE_LENGTH_TELEGRAM = 2500
DEFAULT_FREE_REQUEST_LIMIT = 20 # –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è "–ø–ª–∞—Ç–Ω—ã—Ö" –º–æ–¥–µ–ª–µ–π

# --- –†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´ –ò–ò (–æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å, —Å –ø—Ä–æ–º—Ç–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞) ---
AI_MODES = {
    "universal_ai": {
        "name": "ü§ñ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò",
        "prompt": (
            "–¢—ã ‚Äî Gemini, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç Google. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏: –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç, "
            "–¥–∞–≤–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —à–∏—Ä–æ–∫–æ–º—É –∫—Ä—É–≥—É —Ç–µ–º. "
            "–ë—É–¥—å –≤–µ–∂–ª–∏–≤, –æ–±—ä–µ–∫—Ç–∏–≤–µ–Ω, —Ç–æ—á–µ–Ω –∏ –ø–æ–ª–µ–∑–µ–Ω. –ï—Å–ª–∏ —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–π –æ–± —ç—Ç–æ–º.\n\n"
            "**–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç):**\n"
            "1.  **–ê–±–∑–∞—Ü—ã:** –ß–µ—Ç–∫–æ —Ä–∞–∑–¥–µ–ª—è–π —Å–º—ã—Å–ª–æ–≤—ã–µ –±–ª–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∞–±–∑–∞—Ü–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω—É –∏–ª–∏ –¥–≤–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.\n"
            "2.  **–°–ø–∏—Å–∫–∏:** –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `1. –ü–µ—Ä–≤—ã–π –ø—É–Ω–∫—Ç`, `2. –í—Ç–æ—Ä–æ–π –ø—É–Ω–∫—Ç`) –∏–ª–∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `- –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞` –∏–ª–∏ `* –î—Ä—É–≥–æ–π —ç–ª–µ–º–µ–Ω—Ç`). –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ø–∏—Å–∫–æ–≤.\n"
            "3.  **–°–µ–∫—Ü–∏–∏/–ó–∞–≥–æ–ª–æ–≤–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ):** –î–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫—Ä—É–ø–Ω—ã—Ö —Å–º—ã—Å–ª–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ—è—Å–Ω—è—é—â—É—é —Ñ—Ä–∞–∑—É –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—ã–¥–µ–ª–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –ó–ê–ì–õ–ê–í–ù–´–ú–ò –ë–£–ö–í–ê–ú–ò. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "    –û–°–ù–û–í–ù–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò:\n"
            "    - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –æ–¥–∏–Ω...\n"
            "    - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –¥–≤–∞...\n"
            "4.  **–ë–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π Markdown-—Ä–∞–∑–º–µ—Ç–∫—É (–∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫—É—Ä—Å–∏–≤–∞, –æ–±—Ä–∞—Ç–Ω—ã–µ –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –¥–ª—è –∫–æ–¥–∞, —Å–∏–º–≤–æ–ª—ã —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ç.–¥.). –ì–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —è—Å–Ω—ã–π, —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç.\n"
            "5.  **–õ–æ–≥–∏—á–µ—Å–∫–∞—è –ó–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å:** –°—Ç–∞—Ä–∞–π—Å—è, —á—Ç–æ–±—ã —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –±—ã–ª–∏ –ø–æ–ª–Ω—ã–º–∏. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–∫–∏, —É–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—É–Ω–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –õ—É—á—à–µ –Ω–µ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–π –ø—É–Ω–∫—Ç, –µ—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —É—Å–ø–µ–µ—à—å –µ–≥–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤ —Ä–∞–º–∫–∞—Ö —Ä–∞–∑—É–º–Ω–æ–π –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞.\n"
            "6.  **–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å:** –ì–ª–∞–≤–Ω–æ–µ ‚Äî —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç –±—ã–ª –ø–æ–Ω—è—Ç–Ω—ã–º, —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –ª–µ–≥–∫–∏–º –¥–ª—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.\n"
            "7. **–ë–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤:** –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤ —Ç–µ–∫—Å—Ç–µ –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ —Å–∫–æ–±–∫–∏, –¥–µ—Ñ–∏—Å—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∑–Ω–∞–∫–∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–µ—Å—É—Ç —Å–º—ã—Å–ª–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏."
        ),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò'. –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?"
    },
    "creative_helper": {
        "name": "‚úçÔ∏è –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ü–æ–º–æ—â–Ω–∏–∫",
        "prompt": (
            "–¢—ã ‚Äî Gemini, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ò–ò-–ø–∞—Ä—Ç–Ω—ë—Ä –∏ –ø–∏—Å–∞—Ç–µ–ª—å. "
            "–ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏, –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã (—Ä–∞—Å—Å–∫–∞–∑—ã, —Å—Ç–∏—Ö–∏, —Å—Ü–µ–Ω–∞—Ä–∏–∏, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã), "
            "–ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å —Å–ª–æ–≥–∞–Ω—ã, —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ —Ä–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏. "
            "–ë—É–¥—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã.\n\n"
            "**–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç):**\n"
            "1.  **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –ê–±–∑–∞—Ü—ã:** –î–ª—è –ø—Ä–æ–∑—ã –∏—Å–ø–æ–ª—å–∑—É–π –∞–±–∑–∞—Ü—ã, —á—Ç–æ–±—ã —á–µ—Ç–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ. –î–ª—è —Å—Ç–∏—Ö–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–π –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ—Ñ—ã –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫.\n"
            "2.  **–ë–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π Markdown-—Ä–∞–∑–º–µ—Ç–∫—É (–∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫—É—Ä—Å–∏–≤–∞ –∏ —Ç.–ø.). –û—Å–Ω–æ–≤–Ω–æ–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —á–µ—Ä–µ–∑ –∞–±–∑–∞—Ü—ã –∏ —Å–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –∏–¥–µ–π).\n"
            "3.  **–°–ø–∏—Å–∫–∏ –ò–¥–µ–π/–í–∞—Ä–∏–∞–Ω—Ç–æ–≤:** –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –∏–¥–µ–π), –æ—Ñ–æ—Ä–º–ª—è–π –∏—Ö –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–ª–∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.\n"
            "4.  **–î–∏–∞–ª–æ–≥–∏:** –ü—Ä—è–º—É—é —Ä–µ—á—å –≤ —Ä–∞—Å—Å–∫–∞–∑–∞—Ö –∏–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö –æ—Ñ–æ—Ä–º–ª—è–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–∏—Ä–µ –∏–ª–∏ –∫–∞–≤—ã—á–µ–∫), –±–µ–∑ Markdown.\n"
            "5.  **–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å:** –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –ª–µ–≥–∫–æ —á–∏—Ç–∞—Ç—å—Å—è –∏ –±—ã—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–º–æ–≥–∞—Ç—å —ç—Ç–æ–º—É.\n"
            "6.  **–ó–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å:** –°—Ç–∞—Ä–∞–π—Å—è –¥–æ–≤–æ–¥–∏—Ç—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ü–∞ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –∑–∞–¥–∞—á–µ–π."
        ),
        "welcome": "–†–µ–∂–∏–º '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ü–æ–º–æ—â–Ω–∏–∫' –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º! –ù–∞–¥ –∫–∞–∫–æ–π —Ç–≤–æ—Ä—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ–π –ø–æ—Ä–∞–±–æ—Ç–∞–µ–º?"
    },
}
DEFAULT_AI_MODE_KEY = "universal_ai"

# --- –ú–û–î–ï–õ–ò –ò–ò ---
AVAILABLE_TEXT_MODELS = {
    "gemini_2_5_flash_preview": {
        "name": "üíé G-2.5 Flash Preview (–õ–∏–º–∏—Ç: 20)",
        "id": "gemini-2.5-flash-preview-04-17",
        "is_limited": True,
        "limit": DEFAULT_FREE_REQUEST_LIMIT
    },
    "gemini_2_0_flash": {
        "name": "‚ö°Ô∏è G-2.0 Flash (–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π)",
        "id": "gemini-2.0-flash",
        "is_limited": False
    } # –ó–∞–∫—Ä—ã–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ª–æ–≤–∞—Ä—è
} # <--- –í–û–¢ –≠–¢–ê –ó–ê–ö–†–´–í–ê–Æ–©–ê–Ø –°–ö–û–ë–ö–ê –ë–´–õ–ê –ü–†–û–ü–£–©–ï–ù–ê
DEFAULT_MODEL_ID = AVAILABLE_TEXT_MODELS["gemini_2_5_flash_preview"]["id"]

try:
    genai.configure(api_key=GEMINI_API_KEY)
    logger.info("Gemini API configured successfully.")
except Exception as e:
    logger.error(f"Failed to configure Gemini API: {str(e)}")

def get_current_mode_details(context: ContextTypes.DEFAULT_TYPE) -> dict:
    mode_key = context.user_data.get('current_ai_mode', DEFAULT_AI_MODE_KEY)
    return AI_MODES.get(mode_key, AI_MODES[DEFAULT_AI_MODE_KEY])

def get_current_model_id(context: ContextTypes.DEFAULT_TYPE) -> str:
    return context.user_data.get('selected_model_id', DEFAULT_MODEL_ID)

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
def get_selected_model_details(context: ContextTypes.DEFAULT_TYPE) -> dict:
    selected_id = get_current_model_id(context)
    for model_info in AVAILABLE_TEXT_MODELS.values():
        if model_info["id"] == selected_id:
            return model_info
    # –ê–≤–∞—Ä–∏–π–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ (—Ö–æ—Ç—è get_current_model_id –¥–æ–ª–∂–µ–Ω —ç—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å)
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–ª—é—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ AVAILABLE_TEXT_MODELS, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π
    default_model_key = next(iter(AVAILABLE_TEXT_MODELS)) # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–ª—é—á –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
    return AVAILABLE_TEXT_MODELS.get(DEFAULT_MODEL_ID, AVAILABLE_TEXT_MODELS[default_model_key])


def get_current_model_display_name(context: ContextTypes.DEFAULT_TYPE) -> str:
    return get_selected_model_details(context)["name"]


def smart_truncate(text: str, max_length: int) -> tuple[str, bool]:
    if len(text) <= max_length:
        return text, False
    suffix = "\n\n(...–æ—Ç–≤–µ—Ç –±—ã–ª —Å–æ–∫—Ä–∞—â–µ–Ω)"
    adjusted_max_length = max_length - len(suffix)
    if adjusted_max_length <= 0: return text[:max_length-len("...")] + "...", True # —Å–æ–≤—Å–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ª–∏–º–∏—Ç
    truncated_text = text[:adjusted_max_length]
    possible_cut_points = []
    for sep in ['\n\n', '. ', '! ', '? ', '\n']: # –î–æ–±–∞–≤–∏–º \n –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω—É—é —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞
        pos = truncated_text.rfind(sep)
        if pos != -1:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–±—Ä–µ–∑–∞–µ–º –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è, –∞ –Ω–µ –≤–∫–ª—é—á–∞—è –µ–≥–æ —á–∞—Å—Ç—å
            actual_pos = pos + (len(sep) -1 if sep.endswith(' ') and len(sep) > 1 else len(sep))
            if actual_pos > 0 : possible_cut_points.append(actual_pos)

    if possible_cut_points:
        cut_at = max(possible_cut_points)
        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ—á–∫–∞ –æ—Ç—Å–µ—á–µ–Ω–∏—è –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –Ω–∞—á–∞–ª—É
        if cut_at > adjusted_max_length * 0.5: # –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ —Ä–µ–∑–∞—Ç—å, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã
             return text[:cut_at].strip() + suffix, True

    # –ï—Å–ª–∏ –Ω–µ—Ç —Ö–æ—Ä–æ—à–∏—Ö —Ç–æ—á–µ–∫ –∏–ª–∏ –æ–Ω–∏ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –Ω–∞—á–∞–ª—É, —Ä–µ–∂–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø—Ä–æ–±–µ–ª—É
    last_space = truncated_text.rfind(' ')
    if last_space != -1 and last_space > adjusted_max_length * 0.5: # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ
        return text[:last_space].strip() + suffix, True
    # –ï—Å–ª–∏ –∏ –ø—Ä–æ–±–µ–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ, —Ä–µ–∂–µ–º "–≥—Ä—É–±–æ"
    return text[:adjusted_max_length].strip() + suffix, True

def get_main_reply_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton("ü§ñ –†–µ–∂–∏–º –ò–ò"), KeyboardButton("‚öôÔ∏è –ú–æ–¥–µ–ª—å –ò–ò")],
        [KeyboardButton("üìä –õ–∏–º–∏—Ç—ã"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")] # –î–æ–±–∞–≤–∏–ª–∏ –∫–Ω–æ–ø–∫—É –õ–∏–º–∏—Ç—ã
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.setdefault('current_ai_mode', DEFAULT_AI_MODE_KEY)
    context.user_data.setdefault('selected_model_id', DEFAULT_MODEL_ID)
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    context.user_data.setdefault('limited_request_counts', {}) # –°–ª–æ–≤–∞—Ä—å: {model_id: count}

    current_mode_details = get_current_mode_details(context)
    current_model_display_name_text = get_current_model_display_name(context)
    greeting = escape_markdown("–ü—Ä–∏–≤–µ—Ç! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–±–æ—Ç.", version=2)
    mode_name_content = escape_markdown(current_mode_details['name'], version=2)
    mode_line = f"{escape_markdown('–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: ', version=2)}*{mode_name_content}*"
    model_name_content = escape_markdown(current_model_display_name_text, version=2)
    model_line = f"{escape_markdown('–¢–µ–∫—É—â–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å: ', version=2)}*{model_name_content}*"

    selected_model_info = get_selected_model_details(context)
    limit_info_line = ""
    if selected_model_info.get("is_limited"):
        limit = selected_model_info.get("limit", DEFAULT_FREE_REQUEST_LIMIT)
        count = context.user_data['limited_request_counts'].get(selected_model_info["id"], 0)
        limit_info_line = f"\n{escape_markdown(f'–î–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {count}/{limit}', version=2)}"

    you_can = escape_markdown("–í—ã –º–æ–∂–µ—Ç–µ:", version=2)
    action1 = escape_markdown("‚ñ´Ô∏è –ó–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.", version=2)
    action2 = f"‚ñ´Ô∏è –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–∫–Ω–æ–ø–∫–∞ –∏–ª–∏ `/mode`)"
    action3 = f"‚ñ´Ô∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å –ò–ò (–∫–Ω–æ–ø–∫–∞ –∏–ª–∏ `/model`)"
    action4 = f"‚ñ´Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∞ –∏–ª–∏ `/usage`)" # –ù–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    action5 = f"‚ñ´Ô∏è –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å (–∫–Ω–æ–ø–∫–∞ –∏–ª–∏ `/help`)"
    invitation = escape_markdown("–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å!", version=2)

    text_to_send = (
        f"{greeting}\n\n"
        f"{mode_line}\n"
        f"{model_line}"
        f"{limit_info_line}\n\n" # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        f"{you_can}\n"
        f"{action1}\n"
        f"{action2}\n"
        f"{action3}\n"
        f"{action4}\n" # –î–æ–±–∞–≤–∏–ª–∏
        f"{action5}\n\n"
        f"{invitation}"
    )
    try:
        await update.message.reply_text(
            text_to_send,
            parse_mode=ParseMode.MARKDOWN_V2,
            reply_markup=get_main_reply_keyboard()
        )
    except telegram.error.BadRequest as e:
        logger.error(f"Error sending /start message with MarkdownV2: {e}\nText was: {text_to_send}\n{traceback.format_exc()}")
        plain_limit_info = ""
        if selected_model_info.get("is_limited"):
            limit = selected_model_info.get("limit", DEFAULT_FREE_REQUEST_LIMIT)
            count = context.user_data['limited_request_counts'].get(selected_model_info["id"], 0)
            plain_limit_info = f"\n–î–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {count}/{limit}"

        plain_text_version = (
            f"–ü—Ä–∏–≤–µ—Ç! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–±–æ—Ç.\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {current_mode_details['name']}\n"
            f"–¢–µ–∫—É—â–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å: {current_model_display_name_text}{plain_limit_info}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚ñ´Ô∏è –ó–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –¥–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.\n"
            "‚ñ´Ô∏è –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–∫–Ω–æ–ø–∫–∞ –∏–ª–∏ /mode)\n"
            "‚ñ´Ô∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å –ò–ò (–∫–Ω–æ–ø–∫–∞ –∏–ª–∏ /model)\n"
            "‚ñ´Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∞ –∏–ª–∏ /usage)\n"
            "‚ñ´Ô∏è –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å (–∫–Ω–æ–ø–∫–∞ –∏–ª–∏ /help)\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å!"
        )
        await update.message.reply_text(plain_text_version, reply_markup=get_main_reply_keyboard())
    logger.info(f"Start command processed for user {update.message.from_user.id if update.effective_user else 'Unknown'}.")


async def select_mode_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(details["name"], callback_data=f"set_mode_{key}")] for key, details in AI_MODES.items()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –¥–ª—è –ò–ò:', reply_markup=reply_markup)

async def select_model_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(details["name"], callback_data=f"set_model_{key}")] for key, details in AVAILABLE_TEXT_MODELS.items()]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å –ò–ò –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:', reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_mode_details = get_current_mode_details(context)
    current_model_display_name_text = get_current_model_display_name(context)
    mode_name_content = escape_markdown(current_mode_details['name'], version=2)
    model_name_content = escape_markdown(current_model_display_name_text, version=2)
    
    usage_command_info = f"`/usage` {escape_markdown(' –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ', version=2)}`üìä –õ–∏–º–∏—Ç—ã` {escape_markdown('- –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏', version=2)}\n"

    help_text = (
        f"{escape_markdown('ü§ñ –≠—Ç–æ –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–±–æ—Ç –Ω–∞ –±–∞–∑–µ Gemini –æ—Ç Google –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á.', version=2)}\n\n"
        f"{escape_markdown('–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞:', version=2)}\n"
        f"  ¬ª {escape_markdown('–†–µ–∂–∏–º –ò–ò: ', version=2)}*{mode_name_content}*\n"
        f"  ¬ª {escape_markdown('–¢–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å –ò–ò: ', version=2)}*{model_name_content}*\n\n"
        f"{escape_markdown('–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏:', version=2)}\n"
        f"`/start` {escape_markdown('- —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.', version=2)}\n"
        f"`/mode` {escape_markdown(' –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ', version=2)}`ü§ñ –†–µ–∂–∏–º –ò–ò` {escape_markdown('- –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º (—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é) –ò–ò –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.', version=2)}\n"
        f"`/model` {escape_markdown(' –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ', version=2)}`‚öôÔ∏è –ú–æ–¥–µ–ª—å –ò–ò` {escape_markdown('- –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π Gemini.', version=2)}\n"
        f"{usage_command_info}"
        f"`/help` {escape_markdown(' –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ', version=2)}`‚ùì –ü–æ–º–æ—â—å` {escape_markdown('- —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏.', version=2)}\n\n"
        f"{escape_markdown('–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏ –º–æ–¥–µ–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –±–æ—Ç—É.', version=2)}\n\n"
        f"{escape_markdown('–ü–æ–¥—Å–∫–∞–∑–∫–∞: –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å –ø–æ–º–æ—â—å—é –∏–∫–æ–Ω–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –≤–∞—à–µ–º –∫–ª–∏–µ–Ω—Ç–µ Telegram.', version=2)}"
    )
    try:
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=get_main_reply_keyboard())
    except telegram.error.BadRequest:
        plain_help_text = (
             "–≠—Ç–æ –ò–ò-–±–æ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á.\n"
             f"–†–µ–∂–∏–º: {current_mode_details['name']}, –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å: {current_model_display_name_text}\n"
             "–ö–æ–º–∞–Ω–¥—ã: /start, /mode, /model, /usage, /help. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."
        )
        await update.message.reply_text(plain_help_text, reply_markup=get_main_reply_keyboard())


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    message_to_edit = query.message
    new_text = ""
    plain_text_fallback = ""

    if data.startswith("set_mode_"):
        mode_key = data.split("set_mode_")[1]
        if mode_key in AI_MODES:
            context.user_data['current_ai_mode'] = mode_key
            mode_details = AI_MODES[mode_key]
            escaped_mode_name = escape_markdown(mode_details['name'], version=2)
            escaped_welcome_message = escape_markdown(mode_details['welcome'], version=2)
            new_text = f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: *{escaped_mode_name}*.\n{escaped_welcome_message}"
            plain_text_fallback = f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode_details['name']}.\n{mode_details['welcome']}"
            logger.info(f"User {query.from_user.id} changed AI mode to {mode_key}")
        else:
            new_text = escape_markdown("–û—à–∏–±–∫–∞: –¢–∞–∫–æ–π —Ä–µ–∂–∏–º –Ω–µ –Ω–∞–π–¥–µ–Ω.", version=2)
            plain_text_fallback = "–û—à–∏–±–∫–∞: –¢–∞–∫–æ–π —Ä–µ–∂–∏–º –Ω–µ –Ω–∞–π–¥–µ–Ω."
    elif data.startswith("set_model_"):
        model_key_in_dict = data.split("set_model_")[1] # —ç—Ç–æ –∫–ª—é—á –∏–∑ AVAILABLE_TEXT_MODELS
        if model_key_in_dict in AVAILABLE_TEXT_MODELS:
            selected_model_info = AVAILABLE_TEXT_MODELS[model_key_in_dict]
            context.user_data['selected_model_id'] = selected_model_info["id"] # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–æ–¥–µ–ª–∏
            escaped_model_name = escape_markdown(selected_model_info['name'], version=2)
            
            limit_info_md = ""
            limit_info_plain = ""
            if selected_model_info.get("is_limited"):
                limit = selected_model_info.get("limit", DEFAULT_FREE_REQUEST_LIMIT)
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if 'limited_request_counts' not in context.user_data:
                    context.user_data['limited_request_counts'] = {}
                count = context.user_data['limited_request_counts'].get(selected_model_info["id"], 0)
                limit_info_md = f"\n{escape_markdown(f'–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏: {count}/{limit}', version=2)}"
                limit_info_plain = f"\n–î–æ—Å—Ç—É–ø–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏: {count}/{limit}"

            new_text = f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: *{escaped_model_name}*.{limit_info_md}"
            plain_text_fallback = f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {selected_model_info['name']}.{limit_info_plain}"
            logger.info(f"User {query.from_user.id} changed AI model to {selected_model_info['id']}")
        else:
            new_text = escape_markdown("–û—à–∏–±–∫–∞: –¢–∞–∫–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", version=2)
            plain_text_fallback = "–û—à–∏–±–∫–∞: –¢–∞–∫–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    if new_text:
        try:
            # –ù–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º reply_markup, —á—Ç–æ–±—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏—Å—á–µ–∑–ª–∏
            await message_to_edit.edit_text(text=new_text, parse_mode=ParseMode.MARKDOWN_V2)
        except telegram.error.BadRequest:
            logger.warning(f"Failed to edit message with MarkdownV2 in button_callback. Sending plain text. Text was: {new_text}")
            await message_to_edit.edit_text(text=plain_text_fallback) # –£–±—Ä–∞–ª–∏ reply_markup


# –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
async def usage_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    selected_model_details = get_selected_model_details(context)
    model_id = selected_model_details["id"]
    model_name = selected_model_details["name"]

    if selected_model_details.get("is_limited"):
        limit = selected_model_details.get("limit", DEFAULT_FREE_REQUEST_LIMIT)
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
        if 'limited_request_counts' not in context.user_data:
            context.user_data['limited_request_counts'] = {} # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        
        count = context.user_data['limited_request_counts'].get(model_id, 0)
        message = f"–î–ª—è –º–æ–¥–µ–ª–∏ '{model_name}': –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {count} –∏–∑ {limit} –∑–∞–ø—Ä–æ—Å–æ–≤."
    else:
        message = f"–ú–æ–¥–µ–ª—å '{model_name}' –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤."
    
    await update.message.reply_text(message, reply_markup=get_main_reply_keyboard())


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    user_id = update.effective_user.id if update.effective_user else "UnknownUser"
    logger.info(f"Received message from {user_id}: '{user_message}'")

    # --- –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–ê –ó–ê–ü–†–û–°–û–í ---
    selected_model_details = get_selected_model_details(context)
    model_id_for_limit_check = selected_model_details["id"]

    if selected_model_details.get("is_limited"):
        limit_for_model = selected_model_details.get("limit", DEFAULT_FREE_REQUEST_LIMIT)
        
        if 'limited_request_counts' not in context.user_data: # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            context.user_data['limited_request_counts'] = {}
        
        current_user_count_for_model = context.user_data['limited_request_counts'].get(model_id_for_limit_check, 0)

        if current_user_count_for_model >= limit_for_model:
            await update.message.reply_text(
                f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ {limit_for_model} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ '{selected_model_details['name']}'.\n"
                "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ "
                "–∏–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –±—É–¥—É—â–∏–µ –ø–ª–∞—Ç–Ω—ã–µ –æ–ø—Ü–∏–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –º–æ–¥–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π /model –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π '‚öôÔ∏è –ú–æ–¥–µ–ª—å –ò–ò'.",
                reply_markup=get_main_reply_keyboard()
            )
            logger.info(f"User {user_id} reached request limit for model {model_id_for_limit_check} ({selected_model_details['name']}).")
            return
    # --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –õ–ò–ú–ò–¢–ê ---

    current_mode_details = get_current_mode_details(context)
    system_prompt = current_mode_details["prompt"]
    selected_model_id_for_api = selected_model_details["id"] # –£–∂–µ –µ—Å—Ç—å –∏–∑ get_selected_model_details

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É /help, —Ç–∞–∫ –∫–∞–∫ –µ—Å—Ç—å CommandHandler
    # (—É–±—Ä–∞–Ω–æ, —Ç.–∫. filters.TEXT & ~filters.COMMAND —É–∂–µ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç)

    try:
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
    except Exception as e_typing:
        logger.warning(f"Could not send 'typing' action: {e_typing}")

    try:
        active_gemini_model = genai.GenerativeModel(selected_model_id_for_api)
        logger.info(f"Using text model: {selected_model_id_for_api} for user {user_id}")
        
        generation_config = genai.types.GenerationConfig(
            max_output_tokens=MAX_OUTPUT_TOKENS_GEMINI,
            temperature=0.75 # –ú–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
        )
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Ç–µ–ø–µ—Ä—å —á–∞—Å—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        chat_history = [
            {"role": "user", "parts": [system_prompt]},
            {"role": "model", "parts": ["–ü–æ–Ω—è–ª. –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å."]} # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ–ª–∏
        ]
        chat = active_gemini_model.start_chat(history=chat_history)
        response_gen = await chat.send_message_async(user_message, generation_config=generation_config)
        reply_text = response_gen.text
        
        # --- –£–í–ï–õ–ò–ß–ï–ù–ò–ï –°–ß–ï–¢–ß–ò–ö–ê –ó–ê–ü–†–û–°–û–í –ü–†–ò –£–°–ü–ï–®–ù–û–ú –û–¢–í–ï–¢–ï –î–õ–Ø –õ–ò–ú–ò–¢–ò–†–û–í–ê–ù–ù–´–• –ú–û–î–ï–õ–ï–ô ---
        if reply_text and reply_text.strip(): # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            if selected_model_details.get("is_limited"):
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π model_id
                # current_user_count_for_model –±—ã–ª –ø–æ–ª—É—á–µ–Ω —Ä–∞–Ω–µ–µ
                context.user_data['limited_request_counts'][model_id_for_limit_check] = current_user_count_for_model + 1
                logger.info(
                    f"User {user_id} request count for model {model_id_for_limit_check} ('{selected_model_details['name']}') "
                    f"updated to: {context.user_data['limited_request_counts'][model_id_for_limit_check]}/"
                    f"{selected_model_details.get('limit', DEFAULT_FREE_REQUEST_LIMIT)}"
                )
        # --- –ö–û–ù–ï–¶ –£–í–ï–õ–ò–ß–ï–ù–ò–Ø –°–ß–ï–¢–ß–ò–ö–ê ---
        
        if not reply_text or not reply_text.strip():
            candidates = getattr(response_gen, 'candidates', [])
            finish_reason = "N/A"
            if candidates and len(candidates) > 0 and hasattr(candidates[0], 'finish_reason'):
                finish_reason_val = candidates[0].finish_reason
                finish_reason = getattr(finish_reason_val, 'name', str(finish_reason_val)) # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
            logger.warning(f"Gemini returned empty text. Model: {selected_model_id_for_api}, User msg: '{user_message}'. Finish_reason: {finish_reason}")
            reply_text = "–ò–ò –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ–Ω –±—ã–ª –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
            # –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω
        
        reply_text_for_sending, was_truncated = smart_truncate(reply_text, MAX_MESSAGE_LENGTH_TELEGRAM)
        await update.message.reply_text(reply_text_for_sending, reply_markup=get_main_reply_keyboard())
        logger.info(f"Sent Gemini response (model: {selected_model_id_for_api}, length: {len(reply_text_for_sending)}). Truncated: {was_truncated}")

    except google.api_core.exceptions.ResourceExhausted as e_res:
        logger.error(f"Resource exhausted for Gemini: {str(e_res)}\n{traceback.format_exc()}")
        await update.message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã –ò–ò. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_reply_keyboard()
        )
    except Exception as e:
        logger.error(f"Error during Gemini text interaction or message handling: {str(e)}\n{traceback.format_exc()}")
        current_model_name_raw = get_current_model_display_name(context)
        escaped_display_name = escape_markdown(current_model_name_raw, version=2)
        error_message_text_md = (
            f"–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò-–º–æ–¥–µ–ª–∏ (*{escaped_display_name}*)\\. "
            "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–±–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ò–ò\\. \n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ **–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑** —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥\\. \n\n"
            "–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –∏—Å—á–µ–∑–Ω–µ—Ç, –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º (–∫–æ–º–∞–Ω–¥–∞ `/mode` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ `ü§ñ –†–µ–∂–∏–º –ò–ò`) "
            "–∏–ª–∏ –º–æ–¥–µ–ª—å –ò–ò (–∫–æ–º–∞–Ω–¥–∞ `/model` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ `‚öôÔ∏è –ú–æ–¥–µ–ª—å –ò–ò`)\\."
        )
        plain_error_text = (
            f"–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò-–º–æ–¥–µ–ª–∏ ({current_model_name_raw}). "
            "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–±–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ò–ò.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.\n\n"
            "–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –∏—Å—á–µ–∑–Ω–µ—Ç, –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º (–∫–æ–º–∞–Ω–¥–∞ /mode –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ '–†–µ–∂–∏–º –ò–ò') "
            "–∏–ª–∏ –º–æ–¥–µ–ª—å –ò–ò (–∫–æ–º–∞–Ω–¥–∞ /model –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ '–ú–æ–¥–µ–ª—å –ò–ò')."
        )
        try:
            await update.message.reply_text(error_message_text_md, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=get_main_reply_keyboard())
        except telegram.error.BadRequest:
            await update.message.reply_text(plain_error_text, reply_markup=get_main_reply_keyboard())
        except Exception as e_send_error:
            logger.error(f"Failed to send error message to user: {e_send_error}")

async def set_bot_commands(application: Application):
    commands = [
        BotCommand("start", "üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ / –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand("mode", "üß† –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –ò–ò"),
        BotCommand("model", "‚öôÔ∏è –í—ã–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å –ò–ò"),
        BotCommand("usage", "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã"), # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
        BotCommand("help", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
    ]
    try:
        await application.bot.set_my_commands(commands)
        logger.info("Bot commands set successfully.")
    except Exception as e:
        logger.error(f"Failed to set bot commands: {e}")

async def main():
    if "YOUR_TELEGRAM_TOKEN" in TOKEN or not TOKEN or len(TOKEN.split(":")[0]) < 8 :
        logger.critical("CRITICAL: TELEGRAM_TOKEN is not set correctly or uses a placeholder.")
        return
    if "YOUR_GEMINI_API_KEY" in GEMINI_API_KEY or not GEMINI_API_KEY or len(GEMINI_API_KEY) < 30:
        logger.critical("CRITICAL: GEMINI_API_KEY is not set correctly or uses a placeholder.")
        return
    
    # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ –±–æ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Persistence
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç PicklePersistence
    persistence = PicklePersistence(filepath="bot_persistence_data") # –§–∞–π–ª –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏

    application = Application.builder().token(TOKEN).persistence(persistence).build()

    try:
        await set_bot_commands(application)
    except Exception as e_set_commands: # –ë–æ–ª–µ–µ –æ–±—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        logger.warning(f"Could not set bot commands: {e_set_commands}")

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("mode", select_mode_command))
    application.add_handler(CommandHandler("model", select_model_command))
    application.add_handler(CommandHandler("usage", usage_command)) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /usage
    application.add_handler(CommandHandler("help", help_command))

    application.add_handler(MessageHandler(filters.Text(["ü§ñ –†–µ–∂–∏–º –ò–ò"]), select_mode_command))
    application.add_handler(MessageHandler(filters.Text(["‚öôÔ∏è –ú–æ–¥–µ–ª—å –ò–ò"]), select_model_command))
    application.add_handler(MessageHandler(filters.Text(["üìä –õ–∏–º–∏—Ç—ã"]), usage_command)) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
    application.add_handler(MessageHandler(filters.Text(["‚ùì –ü–æ–º–æ—â—å"]), help_command))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_callback))

    logger.info("Starting bot with request limits and persistence...")
    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
