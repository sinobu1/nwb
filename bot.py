import telegram
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, BotCommand, ParseMode, ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, PreCheckoutQueryHandler
import google.generativeai as genai
import google.api_core.exceptions
import requests
import logging
import os
import asyncio
import nest_asyncio
import json
from datetime import datetime, timedelta
from typing import Optional
import firebase_admin
from firebase_admin import credentials, firestore
from google.cloud.firestore_v1 import AsyncClient
from gemini_pro_handler import query_gemini_pro, GEMINI_PRO_CONFIG
from grok_3_handler import query_grok_3, GROK_3_CONFIG
from bonus_handler import claim_news_bonus_logic, try_delete_user_message

nest_asyncio.apply()
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = os.getenv("TELEGRAM_TOKEN", "8185454402:AAEgJLaBSaUSyP9Z_zv76Fn0PtEwltAqga0")
GOOGLE_GEMINI_API_KEY = os.getenv("GOOGLE_GEMINI_API_KEY", "AIzaSyCdDMpgLJyz6aYdwT9q4sbBk7sHVID4BTI")
CUSTOM_GROK_3_API_KEY = os.getenv("CUSTOM_GROK_3_API_KEY", "sk-MHulnEHU3bRxsnDjr0nq68lTcRYa5IpQATY1pUG4NaxpWSMJzvzsJ4KCVu0P")
CUSTOM_GPT4O_MINI_API_KEY = os.getenv("CUSTOM_GPT4O_MINI_API_KEY", "sk-MHulnEHU3bRxsnDjr0nq68lTcRYa5IpQATY1pUG4NaxpWSMJzvzsJ4KCVu0P")
PAYMENT_PROVIDER_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN", "390540012:LIVE:70602")
YOUR_ADMIN_ID = 489230152

MAX_OUTPUT_TOKENS_GEMINI_LIB = 2048
MAX_MESSAGE_LENGTH_TELEGRAM = 4000
MIN_AI_REQUEST_LENGTH = 4

# –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
DEFAULT_FREE_REQUESTS_GOOGLE_FLASH_DAILY = 72
DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY = 48
DEFAULT_SUBSCRIPTION_REQUESTS_GOOGLE_FLASH_PREVIEW_DAILY = 75
DEFAULT_FREE_REQUESTS_CUSTOM_PRO_DAILY = 0
DEFAULT_SUBSCRIPTION_REQUESTS_CUSTOM_PRO_DAILY = 25
DEFAULT_FREE_REQUESTS_GROK_DAILY = 3
DEFAULT_SUBSCRIPTION_REQUESTS_GROK_DAILY = 25
DEFAULT_FREE_REQUESTS_GPT4O_MINI_DAILY = 3
DEFAULT_SUBSCRIPTION_REQUESTS_GPT4O_MINI_DAILY = 25
PRO_SUBSCRIPTION_LEVEL_KEY = "profi_access_v1"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ–Ω—É—Å–æ–≤
NEWS_CHANNEL_USERNAME = "@timextech"
NEWS_CHANNEL_LINK = "https://t.me/timextech"
NEWS_CHANNEL_BONUS_MODEL_KEY = "custom_api_gemini_2_5_pro"
NEWS_CHANNEL_BONUS_GENERATIONS = 1

# --- –ê–ì–ï–ù–¢–´ –ò –ú–û–î–ï–õ–ò –ò–ò ---
AI_MODES = {
    "universal_ai_basic": {
        "name": "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π",
        "prompt": (
            "–¢—ã ‚Äî Gemini, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
            "–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. "
            "–ë—É–¥—å –≤–µ–∂–ª–∏–≤, —Ç–æ—á–µ–Ω, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —Å –∞–±–∑–∞—Ü–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏. "
            "–û—Ñ–æ—Ä–º–ª—è–π –∑–∞–≥–æ–ª–æ–≤–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏ –∑–∞–≤–µ—Ä—à–∞–π —Å–ø–∏—Å–∫–∏."
        ),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π'. –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?"
    },
    "gemini_pro_custom_mode": {
        "name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
        "prompt": (
            "–¢—ã ‚Äî Gemini 2.5 Pro. "
            "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π —Ç–æ—á–Ω—ã–µ, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã. "
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Å –∞–±–∑–∞—Ü–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏."
        ),
        "welcome": "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'. –ö–∞–∫–æ–π —É –≤–∞—Å –∑–∞–ø—Ä–æ—Å?"
    },
    "creative_helper": {
        "name": "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π",
        "prompt": (
            "–¢—ã ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ò–ò-–ø–∞—Ä—Ç–Ω—ë—Ä. "
            "–ü–æ–º–æ–≥–∞–π —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã, –∏–¥–µ–∏, —Å—Ç–∏—Ö–∏. "
            "–ò—Å–ø–æ–ª—å–∑—É–π –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π —è–∑—ã–∫, –∑–∞–≤–µ—Ä—à–∞–π –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è."
        ),
        "welcome": "–ê–≥–µ–Ω—Ç '–¢–≤–æ—Ä—á–µ—Å–∫–∏–π' –≥–æ—Ç–æ–≤! –ù–∞–¥ —á–µ–º —Ä–∞–±–æ—Ç–∞–µ–º?"
    },
    "analyst": {
        "name": "–ê–Ω–∞–ª–∏—Ç–∏–∫",
        "prompt": (
            "–¢—ã ‚Äî –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫. "
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã. "
            "–£–∫–∞–∂–∏, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ."
        ),
        "welcome": "–ê–≥–µ–Ω—Ç '–ê–Ω–∞–ª–∏—Ç–∏–∫' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ö–∞–∫—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?"
    },
    "joker": {
        "name": "–®—É—Ç–Ω–∏–∫",
        "prompt": (
            "–¢—ã ‚Äî –ò–ò —Å —é–º–æ—Ä–æ–º. "
            "–û—Ç–≤–µ—á–∞–π –æ—Å—Ç—Ä–æ—É–º–Ω–æ, –¥–æ–±–∞–≤–ª—è–π —à—É—Ç–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–π –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å."
        ),
        "welcome": "–ê–≥–µ–Ω—Ç '–®—É—Ç–Ω–∏–∫' –≤–∫–ª—é—á–µ–Ω! üòÑ –ì–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å —Å —É–ª—ã–±–∫–æ–π!"
    }
}
DEFAULT_AI_MODE_KEY = "universal_ai_basic"

AVAILABLE_TEXT_MODELS = {
    "google_gemini_2_0_flash": {
        "name": "Gemini 2.0",
        "id": "gemini-2.0-flash",
        "api_type": "google_genai",
        "is_limited": True,
        "limit_type": "daily_free",
        "limit": DEFAULT_FREE_REQUESTS_GOOGLE_FLASH_DAILY,
        "cost_category": "google_flash_free"
    },
    "google_gemini_2_5_flash_preview": {
        "name": "Gemini 2.5",
        "id": "gemini-2.5-flash-preview-04-17",
        "api_type": "google_genai",
        "is_limited": True,
        "limit_type": "subscription_or_daily_free",
        "limit_if_no_subscription": DEFAULT_FREE_REQUESTS_GEMINI_2_5_FLASH_PREVIEW_DAILY,
        "subscription_daily_limit": DEFAULT_SUBSCRIPTION_REQUESTS_GOOGLE_FLASH_PREVIEW_DAILY,
        "cost_category": "google_flash_preview_flex"
    },
    "custom_api_gemini_2_5_pro": GEMINI_PRO_CONFIG,
    "custom_api_grok_3": GROK_3_CONFIG,
    "custom_api_gpt_4o_mini": {
        "name": "GPT-4o mini",
        "id": "gpt-4o-mini",
        "api_type": "custom_http_api",
        "endpoint": "https://api.gen-api.ru/api/v1/networks/gpt-4o-mini",
        "api_key_var_name": "CUSTOM_GPT4O_MINI_API_KEY",
        "is_limited": True,
        "limit_type": "subscription_custom_pro",
        "limit_if_no_subscription": DEFAULT_FREE_REQUESTS_GPT4O_MINI_DAILY,
        "subscription_daily_limit": DEFAULT_SUBSCRIPTION_REQUESTS_GPT4O_MINI_DAILY,
        "cost_category": "custom_api_gpt4o_mini_paid",
        "pricing_info": {}
    }
}
DEFAULT_MODEL_KEY = "google_gemini_2_0_flash"
DEFAULT_MODEL_ID = AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]["id"]

# --- –°–¢–†–£–ö–¢–£–†–ê –ú–ï–ù–Æ ---
MENU_STRUCTURE = {
    "main_menu": {
        "title": "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        "items": [
            {"text": "ü§ñ –ê–≥–µ–Ω—Ç—ã –ò–ò", "action": "submenu", "target": "ai_modes_submenu"},
            {"text": "‚öôÔ∏è –ú–æ–¥–µ–ª–∏ –ò–ò", "action": "submenu", "target": "models_submenu"},
            {"text": "üìä –õ–∏–º–∏—Ç—ã", "action": "submenu", "target": "limits_submenu"},
            {"text": "üéÅ –ë–æ–Ω—É—Å", "action": "submenu", "target": "bonus_submenu"},
            {"text": "üíé –ü–æ–¥–ø–∏—Å–∫–∞", "action": "submenu", "target": "subscription_submenu"},
            {"text": "‚ùì –ü–æ–º–æ—â—å", "action": "submenu", "target": "help_submenu"}
        ],
        "parent": None,
        "is_submenu": False
    },
    "ai_modes_submenu": {
        "title": "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç –ò–ò",
        "items": [
            {"text": mode["name"], "action": "set_agent", "target": key}
            for key, mode in AI_MODES.items()
            if key != "gemini_pro_custom_mode"
        ],
        "parent": "main_menu",
        "is_submenu": True
    },
    "models_submenu": {
        "title": "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò",
        "items": [
            {"text": model["name"], "action": "set_model", "target": key}
            for key, model in AVAILABLE_TEXT_MODELS.items()
        ],
        "parent": "main_menu",
        "is_submenu": True
    },
    "limits_submenu": {
        "title": "–í–∞—à–∏ –ª–∏–º–∏—Ç—ã",
        "items": [
            {"text": "üìä –ü–æ–∫–∞–∑–∞—Ç—å", "action": "show_limits", "target": "usage"}
        ],
        "parent": "main_menu",
        "is_submenu": True
    },
    "bonus_submenu": {
        "title": "–ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É",
        "items": [
            {"text": "üéÅ –ü–æ–ª—É—á–∏—Ç—å", "action": "check_bonus", "target": "news_bonus"}
        ],
        "parent": "main_menu",
        "is_submenu": True
    },
    "subscription_submenu": {
        "title": "–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏",
        "items": [
            {"text": "üíé –ö—É–ø–∏—Ç—å", "action": "show_subscription", "target": "subscribe"}
        ],
        "parent": "main_menu",
        "is_submenu": True
    },
    "help_submenu": {
        "title": "–ü–æ–º–æ—â—å",
        "items": [
            {"text": "‚ùì –°–ø—Ä–∞–≤–∫–∞", "action": "show_help", "target": "help"}
        ],
        "parent": "main_menu",
        "is_submenu": True
    }
}

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø FIREBASE ---
try:
    firebase_credentials = os.getenv("FIREBASE_CREDENTIALS")
    if firebase_credentials:
        cred = credentials.Certificate(json.loads(firebase_credentials))
    else:
        cred = credentials.Certificate("gemioracle-firebase-adminsdk-fbsvc-8f89d5b941.json")
    firebase_admin.initialize_app(cred)
    db = firestore.client()
    logger.info("Firebase —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Firebase: {e}")
    db = None

# --- –†–ê–ë–û–¢–ê –° FIRESTORE ---
async def get_user_data(user_id: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Firestore."""
    if not db:
        return {}
    doc_ref = db.collection("users").document(str(user_id))
    doc = await asyncio.to_thread(doc_ref.get)
    return doc.to_dict() or {}

async def set_user_data(user_id: int, data: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Firestore."""
    if not db:
        return
    doc_ref = db.collection("users").document(str(user_id))
    await asyncio.to_thread(doc_ref.set, data, merge=True)
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def get_bot_data() -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ –∏–∑ Firestore."""
    if not db:
        return {}
    doc_ref = db.collection("bot_data").document("data")
    doc = await asyncio.to_thread(doc_ref.get)
    return doc.to_dict() or {}

async def set_bot_data(data: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞ –≤ Firestore."""
    if not db:
        return
    doc_ref = db.collection("bot_data").document("data")
    await asyncio.to_thread(doc_ref.set, data, merge=True)
    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞")

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–ï–ñ–ò–ú–ê–ú–ò –ò –ú–û–î–ï–õ–Ø–ú–ò ---
async def get_current_mode_details(user_id: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ –ò–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_data = await get_user_data(user_id)
    current_model_key = await get_current_model_key(user_id)
    mode_key = user_data.get('current_ai_mode', DEFAULT_AI_MODE_KEY)

    if mode_key not in AI_MODES:
        mode_key = DEFAULT_AI_MODE_KEY
        user_data['current_ai_mode'] = mode_key
        await set_user_data(user_id, user_data)
        logger.info(f"–°–±—Ä–æ—à–µ–Ω —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    if current_model_key == "custom_api_gemini_2_5_pro":
        return AI_MODES.get("gemini_pro_custom_mode", AI_MODES[DEFAULT_AI_MODE_KEY])
    return AI_MODES.get(mode_key, AI_MODES[DEFAULT_AI_MODE_KEY])

async def get_current_model_key(user_id: int) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏ –ò–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_data = await get_user_data(user_id)
    selected_id = user_data.get('selected_model_id', DEFAULT_MODEL_ID)

    for key, info in AVAILABLE_TEXT_MODELS.items():
        if info["id"] == selected_id:
            if 'selected_api_type' not in user_data or user_data['selected_api_type'] != info.get("api_type"):
                user_data['selected_api_type'] = info.get("api_type")
                await set_user_data(user_id, user_data)
            return key

    user_data.update({
        'selected_model_id': DEFAULT_MODEL_ID,
        'selected_api_type': AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]["api_type"]
    })
    await set_user_data(user_id, user_data)
    logger.warning(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è ID {selected_id}. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
    return DEFAULT_MODEL_KEY

async def get_selected_model_details(user_id: int) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏."""
    model_key = await get_current_model_key(user_id)
    return AVAILABLE_TEXT_MODELS.get(model_key, AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY])

# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–ò–ú–ò–¢–ê–ú–ò ---
async def get_user_actual_limit_for_model(user_id: int, model_key: str) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏."""
    model_config = AVAILABLE_TEXT_MODELS.get(model_key, {})
    if not model_config.get("is_limited", False):
        return float('inf')

    bot_data = await get_bot_data()
    user_subscription = bot_data.get('user_subscriptions', {}).get(str(user_id), {})
    is_subscribed = False

    if user_subscription.get('valid_until'):
        try:
            valid_until = datetime.fromisoformat(user_subscription['valid_until'])
            if datetime.now().date() <= valid_until.date():
                is_subscribed = user_subscription.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")

    limit_type = model_config.get("limit_type")
    if limit_type == "daily_free":
        return model_config.get("limit", 0)
    elif limit_type == "subscription_or_daily_free":
        return model_config.get("subscription_daily_limit", 0) if is_subscribed else model_config.get("limit_if_no_subscription", 0)
    elif limit_type == "subscription_custom_pro":
        base_limit = model_config.get("subscription_daily_limit", 0) if is_subscribed else model_config.get("limit_if_no_subscription", 0)
        if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY:
            user_data = await get_user_data(user_id)
            if user_data.get('claimed_news_bonus', False):
                return base_limit + user_data.get('news_bonus_uses_left', 0)
        return base_limit
    return 0

async def check_and_log_request_attempt(user_id: int, model_key: str) -> tuple[bool, str, int]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞."""
    today = datetime.now().strftime("%Y-%m-%d")
    model_config = AVAILABLE_TEXT_MODELS.get(model_key, {})
    if not model_config.get("is_limited"):
        return True, "", 0

    bot_data = await get_bot_data()
    user_data = await get_user_data(user_id)
    user_subscription = bot_data.get('user_subscriptions', {}).get(str(user_id), {})
    is_profi = user_subscription.get('level') == PRO_SUBSCRIPTION_LEVEL_KEY and user_subscription.get('valid_until') and \
               datetime.fromisoformat(user_subscription['valid_until']).date() >= datetime.now().date()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–Ω—É—Å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY and not is_profi and user_data.get('claimed_news_bonus', False) and user_data.get('news_bonus_uses_left', 0) > 0:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–Ω—É—Å –¥–ª—è {model_key}.")
        return True, "bonus_available", 0

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤
    user_counts = bot_data.get('all_user_daily_counts', {}).get(str(user_id), {})
    model_usage = user_counts.get(model_key, {'date': '', 'count': 0})

    if model_usage['date'] != today:
        model_usage = {'date': today, 'count': 0}

    current_count = model_usage['count']
    actual_limit = await get_user_actual_limit_for_model(user_id, model_key)

    if current_count >= actual_limit:
        message = [f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ({current_count}/{actual_limit}) –¥–ª—è –º–æ–¥–µ–ª–∏ {model_config['name']}."]
        if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY and not is_profi:
            if not user_data.get('claimed_news_bonus', False):
                message.append(f'üí° –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ <a href="{NEWS_CHANNEL_LINK}">–∫–∞–Ω–∞–ª</a> –¥–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π!')
            elif user_data.get('news_bonus_uses_left', 0) == 0:
                message.append(f"‚ÑπÔ∏è –ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ <a href='{NEWS_CHANNEL_LINK}'>–∫–∞–Ω–∞–ª</a> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")
        if not is_profi:
            message.append("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –º–µ–Ω—é ¬´–ü–æ–¥–ø–∏—Å–∫–∞¬ª.")
        return False, "\n".join(message), current_count

    user_counts[model_key] = model_usage
    bot_data.setdefault('all_user_daily_counts', {}).setdefault(str(user_id), user_counts)
    await set_bot_data(bot_data)
    return True, "", current_count

async def increment_request_count(user_id: int, model_key: str):
    """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏."""
    model_config = AVAILABLE_TEXT_MODELS.get(model_key, {})
    if not model_config.get("is_limited"):
        return

    user_data = await get_user_data(user_id)
    bot_data = await get_bot_data()

    is_profi = bot_data.get('user_subscriptions', {}).get(str(user_id), {}).get('level') == PRO_SUBSCRIPTION_LEVEL_KEY and \
               datetime.fromisoformat(bot_data.get('user_subscriptions', {}).get(str(user_id), {}).get('valid_until', '1970-01-01')).date() >= datetime.now().date()

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY and not is_profi and user_data.get('claimed_news_bonus', False):
        uses_left = user_data.get('news_bonus_uses_left', 0)
        if uses_left > 0:
            user_data['news_bonus_uses_left'] = uses_left - 1
            await set_user_data(user_id, user_data)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ–Ω—É—Å –¥–ª—è {model_key}. –û—Å—Ç–∞–ª–æ—Å—å: {uses_left - 1}")
            return

    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
    today = datetime.now().strftime("%Y-%m-%d")
    user_counts = bot_data.setdefault('all_user_daily_counts', {}).setdefault(str(user_id), {})
    model_usage = user_counts.get(model_key, {'date': today, 'count': 0})

    if model_usage['date'] != today:
        model_usage = {'date': today, 'count': 0}

    model_usage['count'] += 1
    user_counts[model_key] = model_usage
    await set_bot_data(bot_data)
    logger.info(f"–°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è {model_key} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {model_usage['count']}")

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def smart_truncate(text: str, max_length: int) -> tuple[str, bool]:
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã —Å —É—á–µ—Ç–æ–º –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç–æ—á–µ–∫."""
    if not isinstance(text, str):
        return str(text), False
    if len(text) <= max_length:
        return text, False

    suffix = "\n\n(...–æ—Ç–≤–µ—Ç –±—ã–ª —Å–æ–∫—Ä–∞—â–µ–Ω)"
    adjusted_max = max_length - len(suffix)
    if adjusted_max <= 0:
        return text[:max_length - 3] + "...", True

    truncated = text[:adjusted_max]
    for sep in ['\n\n', '. ', '! ', '? ', '\n', ' ']:
        pos = truncated.rfind(sep)
        if pos != -1 and pos > adjusted_max * 0.3:
            cut = pos + (len(sep) if sep != ' ' else 0)
            return text[:cut].strip() + suffix, True
    return truncated.strip() + suffix, True

def is_menu_button_text(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é."""
    navigation_buttons = ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    if text in navigation_buttons:
        return True
    for menu in MENU_STRUCTURE.values():
        for item in menu["items"]:
            if item["text"] == text:
                return True
    return False

# --- –ú–ï–ù–Æ –ò –ö–õ–ê–í–ò–ê–¢–£–†–ê ---
def generate_menu_keyboard(menu_key: str) -> ReplyKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–Ω—é."""
    menu = MENU_STRUCTURE.get(menu_key, MENU_STRUCTURE["main_menu"])
    keyboard = []

    if menu_key in ["main_menu", "models_submenu"]:
        for i in range(0, len(menu["items"]), 2):
            row = [KeyboardButton(item["text"]) for item in menu["items"][i:i + 2]]
            keyboard.append(row)
    else:
        keyboard = [[KeyboardButton(item["text"])] for item in menu["items"]]

    if menu.get("is_submenu", False):
        nav_row = []
        if menu.get("parent"):
            nav_row.append(KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
        nav_row.append(KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        keyboard.append(nav_row)

    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

async def show_menu(update: Update, user_id: int, menu_key: str):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    menu = MENU_STRUCTURE.get(menu_key)
    if not menu:
        menu_key = "main_menu"
        menu = MENU_STRUCTURE[menu_key]
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á –º–µ–Ω—é: {menu_key}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

    user_data = await get_user_data(user_id)
    user_data['current_menu'] = menu_key
    await set_user_data(user_id, user_data)

    await update.message.reply_text(
        menu["title"],
        reply_markup=generate_menu_keyboard(menu_key),
        parse_mode=None,
        disable_web_page_preview=True
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é '{menu_key}'")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = update.effective_user.id
    user_data = await get_user_data(user_id)
    user_data.update({
        'current_ai_mode': user_data.get('current_ai_mode', DEFAULT_AI_MODE_KEY),
        'current_menu': 'main_menu',
        'selected_model_id': user_data.get('selected_model_id', DEFAULT_MODEL_ID),
        'selected_api_type': user_data.get('selected_api_type', AVAILABLE_TEXT_MODELS[DEFAULT_MODEL_KEY]["api_type"])
    })

    if update.message:
        user_data['user_command_message'] = {
            'message_id': update.message.message_id,
            'timestamp': datetime.now().isoformat()
        }
    await set_user_data(user_id, user_data)

    current_model_key = await get_current_model_key(user_id)
    mode_details = await get_current_mode_details(user_id)
    model_details = AVAILABLE_TEXT_MODELS.get(current_model_key, {})

    greeting = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n"
        f"–Ø —Ç–≤–æ–π –ò–ò-–±–æ—Ç –Ω–∞ –±–∞–∑–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π.\n\n"
        f"üß† –¢–µ–∫—É—â–∏–π –∞–≥–µ–Ω—Ç: <b>{mode_details.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}</b>\n"
        f"‚öôÔ∏è –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: <b>{model_details.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è')}</b>\n\n"
        "üí¨ –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é!"
    )
    await update.message.reply_text(
        greeting,
        parse_mode=ParseMode.HTML,
        reply_markup=generate_menu_keyboard("main_menu"),
        disable_web_page_preview=True
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")

async def open_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu."""
    user_id = update.effective_user.id
    user_data = await get_user_data(user_id)
    if update.message:
        user_data['user_command_message'] = {
            'message_id': update.message.message_id,
            'timestamp': datetime.now().isoformat()
        }
        await set_user_data(user_id, user_data)
        await try_delete_user_message(update, user_id)
    await show_menu(update, user_id, "main_menu")

async def usage_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /usage."""
    user_id = update.effective_user.id
    user_data = await get_user_data(user_id)
    if update.message:
        user_data['user_command_message'] = {
            'message_id': update.message.message_id,
            'timestamp': datetime.now().isoformat()
        }
        await set_user_data(user_id, user_data)
        await try_delete_user_message(update, user_id)
    await show_limits(update, user_id)

async def subscribe_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /subscribe."""
    user_id = update.effective_user.id
    user_data = await get_user_data(user_id)
    if update.message:
        user_data['user_command_message'] = {
            'message_id': update.message.message_id,
            'timestamp': datetime.now().isoformat()
        }
        await set_user_data(user_id, user_data)
        await try_delete_user_message(update, user_id)
    await show_subscription(update, user_id)

async def get_news_bonus_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /bonus."""
    user_id = update.effective_user.id
    await claim_news_bonus_logic(update, user_id, context)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help."""
    user_id = update.effective_user.id
    user_data = await get_user_data(user_id)
    if update.message:
        user_data['user_command_message'] = {
            'message_id': update.message.message_id,
            'timestamp': datetime.now().isoformat()
        }
        await set_user_data(user_id, user_data)
        await try_delete_user_message(update, user_id)
    await show_help(update, user_id)

async def show_limits(update: Update, user_id: int):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π."""
    bot_data = await get_bot_data()
    user_data = await get_user_data(user_id)
    user_subscription = bot_data.get('user_subscriptions', {}).get(str(user_id), {})

    sub_status = "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø"
    is_subscribed = False
    if user_subscription.get('valid_until'):
        try:
            valid_until = datetime.fromisoformat(user_subscription['valid_until'])
            if datetime.now().date() <= valid_until.date():
                sub_status = f"–ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ (–¥–æ {valid_until.strftime('%Y-%m-%d')})"
                is_subscribed = True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")

    text_parts = [
        "<b>üìä –í–∞—à–∏ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤</b>",
        f"–°—Ç–∞—Ç—É—Å: <b>{sub_status}</b>",
        ""
    ]

    today = datetime.now().strftime("%Y-%m-%d")
    user_counts = bot_data.get('all_user_daily_counts', {}).get(str(user_id), {})

    for model_key, model_config in AVAILABLE_TEXT_MODELS.items():
        if model_config.get("is_limited"):
            usage = user_counts.get(model_key, {'date': '', 'count': 0})
            count = usage['count'] if usage['date'] == today else 0
            limit = await get_user_actual_limit_for_model(user_id, model_key)
            bonus_note = ""
            if model_key == NEWS_CHANNEL_BONUS_MODEL_KEY and not is_subscribed and user_data.get('claimed_news_bonus', False):
                bonus_note = f" (–≤–∫–ª—é—á–∞—è {user_data.get('news_bonus_uses_left', 0)} –±–æ–Ω—É—Å–Ω—ã—Ö)"
            text_parts.append(f"‚ñ´Ô∏è {model_config['name']}: <b>{count}/{limit if limit != float('inf') else '‚àû'}</b>{bonus_note}")

    if not is_subscribed:
        text_parts.append("\n–•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–æ–≤? –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –º–µ–Ω—é ¬´–ü–æ–¥–ø–∏—Å–∫–∞¬ª.")

    current_menu = user_data.get('current_menu', 'limits_submenu')
    if current_menu not in MENU_STRUCTURE:
        current_menu = 'limits_submenu'

    await update.message.reply_text(
        "\n".join(text_parts),
        parse_mode=ParseMode.HTML,
        reply_markup=generate_menu_keyboard(current_menu),
        disable_web_page_preview=True
    )
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

async def show_subscription(update: Update, user_id: int):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ."""
    bot_data = await get_bot_data()
    user_data = await get_user_data(user_id)
    user_subscription = bot_data.get('user_subscriptions', {}).get(str(user_id), {})

    text_parts = ["<b>üíé –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏</b>"]
    is_subscribed = False

    if user_subscription.get('valid_until'):
        try:
            valid_until = datetime.fromisoformat(user_subscription['valid_until'])
            if datetime.now().date() <= valid_until.date():
                text_parts.append(f"\n‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{valid_until.strftime('%d.%m.%Y')}</b>.")
                text_parts.append("   –î–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∏ –≤—Å–µ –º–æ–¥–µ–ª–∏.")
                is_subscribed = True
            else:
                text_parts.append(f"\n‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ <b>{valid_until.strftime('%d.%m.%Y')}</b>.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
            text_parts.append("\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏.")

    if not is_subscribed:
        text_parts.extend([
            "\n–° –ø–æ–¥–ø–∏—Å–∫–æ–π <b>–ü—Ä–æ—Ñ–∏</b> –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:",
            "‚ñ´Ô∏è –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –≤—Å–µ –º–æ–¥–µ–ª–∏.",
            f"‚ñ´Ô∏è –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ {AVAILABLE_TEXT_MODELS['custom_api_gemini_2_5_pro']['name']}.",
            f"‚ñ´Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ {AVAILABLE_TEXT_MODELS['custom_api_grok_3']['name']}.",
            f"‚ñ´Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ {AVAILABLE_TEXT_MODELS['custom_api_gpt_4o_mini']['name']}.",
            "‚ñ´Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–≤–∏—Ç–∏—è –±–æ—Ç–∞.",
            "\n–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥–æ–π /subscribe."
        ])

    current_menu = user_data.get('current_menu', 'subscription_submenu')
    if current_menu not in MENU_STRUCTURE:
        current_menu = 'subscription_submenu'

    await update.message.reply_text(
        "\n".join(text_parts),
        parse_mode=ParseMode.HTML,
        reply_markup=generate_menu_keyboard(current_menu),
        disable_web_page_preview=True
    )
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è {user_id}")

async def show_help(update: Update, user_id: int):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    user_data = await get_user_data(user_id)
    if update.message:
        user_data['user_command_message'] = {
            'message_id': update.message.message_id,
            'timestamp': datetime.now().isoformat()
        }
        await set_user_data(user_id, user_data)
        await try_delete_user_message(update, user_id)

    help_text = (
        "<b>‚ùì –°–ø—Ä–∞–≤–∫–∞</b>\n\n"
        "–Ø ‚Äî –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π.\n"
        "‚ñ´Ô∏è <b>–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ</b>: –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–ª—É—á–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã.\n"
        "‚ñ´Ô∏è <b>–ê–≥–µ–Ω—Ç—ã</b>: –í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞ –≤ –º–µ–Ω—é ¬´ü§ñ –ê–≥–µ–Ω—Ç—ã –ò–ò¬ª.\n"
        "‚ñ´Ô∏è <b>–ú–æ–¥–µ–ª–∏</b>: –ü–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ –º–æ–¥–µ–ª–∏ –≤ –º–µ–Ω—é ¬´‚öôÔ∏è –ú–æ–¥–µ–ª–∏ –ò–ò¬ª.\n"
        "‚ñ´Ô∏è <b>–õ–∏–º–∏—Ç—ã</b>: –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–∏–º–∏—Ç—ã –≤ –º–µ–Ω—é ¬´üìä –õ–∏–º–∏—Ç—ã¬ª.\n"
        "‚ñ´Ô∏è <b>–ë–æ–Ω—É—Å</b>: –ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –≤ –º–µ–Ω—é ¬´üéÅ –ë–æ–Ω—É—Å¬ª.\n"
        "‚ñ´Ô∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>: –£–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç—ã –≤ –º–µ–Ω—é ¬´üíé –ü–æ–¥–ø–∏—Å–∫–∞¬ª.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚ñ´Ô∏è /start ‚Äî –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.\n"
        "‚ñ´Ô∏è /menu ‚Äî –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.\n"
        "‚ñ´Ô∏è /usage ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–º–∏—Ç—ã.\n"
        "‚ñ´Ô∏è /subscribe ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ.\n"
        "‚ñ´Ô∏è /bonus ‚Äî –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å.\n"
        "‚ñ´Ô∏è /help ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É."
    )

    current_menu = user_data.get('current_menu', 'help_submenu')
    if current_menu not in MENU_STRUCTURE:
        current_menu = 'help_submenu'

    await update.message.reply_text(
        help_text,
        parse_mode=ParseMode.HTML,
        reply_markup=generate_menu_keyboard(current_menu),
        disable_web_page_preview=True
    )
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

# --- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ú–ï–ù–Æ ---
async def menu_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é."""
    if not update.message or not update.message.text:
        return

    user_id = update.effective_user.id
    button_text = update.message.text.strip()

    if not is_menu_button_text(button_text):
        return

    user_data = await get_user_data(user_id)
    user_data['user_command_message'] = {
        'message_id': update.message.message_id,
        'timestamp': datetime.now().isoformat()
    }
    await set_user_data(user_id, user_data)
    await try_delete_user_message(update, user_id)

    current_menu = user_data.get('current_menu', 'main_menu')
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '{button_text}' –≤ –º–µ–Ω—é '{current_menu}'")

    if button_text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        parent_menu = MENU_STRUCTURE.get(current_menu, {}).get("parent", "main_menu")
        await show_menu(update, user_id, parent_menu)
        return
    elif button_text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await show_menu(update, user_id, "main_menu")
        return

    action_item = None
    for menu in MENU_STRUCTURE.values():
        for item in menu["items"]:
            if item["text"] == button_text:
                action_item = item
                break
        if action_item:
            break

    if not action_item:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu.",
            reply_markup=generate_menu_keyboard(current_menu),
            parse_mode=None
        )
        return

    action, target = action_item["action"], action_item["target"]
    logger.info(f"–ö–Ω–æ–ø–∫–∞ '{button_text}' –≤—ã–∑—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '{action}' —Å —Ü–µ–ª—å—é '{target}'")

    if action == "submenu":
        await show_menu(update, user_id, target)
    elif action == "set_agent":
        return_menu = MENU_STRUCTURE.get(current_menu, {}).get("parent", "main_menu")
        if target in AI_MODES and target != "gemini_pro_custom_mode":
            user_data['current_ai_mode'] = target
            await set_user_data(user_id, user_data)
            agent = AI_MODES[target]
            text = f"ü§ñ –ê–≥–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <b>{agent['name']}</b>.\n\n{agent.get('welcome', '–ì–æ—Ç–æ–≤!')}"
        else:
            text = "–û—à–∏–±–∫–∞: –ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–≥–µ–Ω—Ç '{target}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        await update.message.reply_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=generate_menu_keyboard(return_menu),
            disable_web_page_preview=True
        )
        user_data['current_menu'] = return_menu
        await set_user_data(user_id, user_data)
    elif action == "set_model":
        return_menu = MENU_STRUCTURE.get(current_menu, {}).get("parent", "main_menu")
        if target in AVAILABLE_TEXT_MODELS:
            model_config = AVAILABLE_TEXT_MODELS[target]
            user_data.update({
                'selected_model_id': model_config["id"],
                'selected_api_type': model_config["api_type"]
            })
            if target in ["custom_api_grok_3", "custom_api_gpt_4o_mini"] and user_data.get('current_ai_mode') == "gemini_pro_custom_mode":
                user_data['current_ai_mode'] = DEFAULT_AI_MODE_KEY
            await set_user_data(user_id, user_data)
            today = datetime.now().strftime("%Y-%m-%d")
            user_counts = (await get_bot_data()).get('all_user_daily_counts', {}).get(str(user_id), {})
            usage = user_counts.get(target, {'date': '', 'count': 0})
            count = usage['count'] if usage['date'] == today else 0
            limit = await get_user_actual_limit_for_model(user_id, target)
            text = f"‚öôÔ∏è –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: <b>{model_config['name']}</b>.\n–õ–∏–º–∏—Ç: {count}/{limit if limit != float('inf') else '‚àû'}."
        else:
            text = "–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–≤–µ—Ä–Ω—É—é –º–æ–¥–µ–ª—å '{target}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        await update.message.reply_text(
            text,
            parse_mode=ParseMode.HTML,
            reply_markup=generate_menu_keyboard(return_menu),
            disable_web_page_preview=True
        )
        user_data['current_menu'] = return_menu
        await set_user_data(user_id, user_data)
    elif action == "show_limits":
        await show_limits(update, user_id)
    elif action == "check_bonus":
        await claim_news_bonus_logic(update, user_id, context)
    elif action == "show_subscription":
        await show_subscription(update, user_id)
    elif action == "show_help":
        await show_help(update, user_id)
    else:
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=generate_menu_keyboard(current_menu),
            parse_mode=None
        )

# --- –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ---
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò."""
    user_id = update.effective_user.id
    if not update.message or not update.message.text:
        return

    user_message = update.message.text.strip()
    chat_id = update.effective_chat.id

    if is_menu_button_text(user_message):
        return

    if len(user_message) < MIN_AI_REQUEST_LENGTH:
        user_data = await get_user_data(user_id)
        await update.message.reply_text(
            "–ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –£—Ç–æ—á–Ω–∏—Ç–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.",
            reply_markup=generate_menu_keyboard(user_data.get('current_menu', 'main_menu')),
            parse_mode=None,
            disable_web_page_preview=True
        )
        logger.info(f"–ö–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å –æ—Ç {user_id}: '{user_message}'")
        return

    logger.info(f"–ó–∞–ø—Ä–æ—Å –ò–ò –æ—Ç {user_id}: '{user_message[:100]}...'")

    current_model_key = await get_current_model_key(user_id)
    model_config = AVAILABLE_TEXT_MODELS.get(current_model_key)
    if not model_config:
        user_data = await get_user_data(user_id)
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=generate_menu_keyboard(user_data.get('current_menu', 'main_menu')),
            parse_mode=None
        )
        logger.error(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–ª—é—á–∞ '{current_model_key}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return

    can_proceed, limit_message, current_count = await check_and_log_request_attempt(user_id, current_model_key)
    if not can_proceed:
        user_data = await get_user_data(user_id)
        await update.message.reply_text(
            limit_message,
            parse_mode=ParseMode.HTML,
            reply_markup=generate_menu_keyboard(user_data.get('current_menu', 'main_menu')),
            disable_web_page_preview=True
        )
        logger.info(f"–õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è {user_id} –Ω–∞ –º–æ–¥–µ–ª–∏ {current_model_key}")
        return

    await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
    mode_details = await get_current_mode_details(user_id)
    system_prompt = mode_details["prompt"]
    response_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò."

    api_type = model_config.get("api_type", "").strip()
    if api_type == "google_genai":
        full_prompt = f"{system_prompt}\n\n**–ó–∞–ø—Ä–æ—Å:**\n{user_message}"
        genai.configure(api_key=GOOGLE_GEMINI_API_KEY)
        genai_model = genai.GenerativeModel(model_name=model_config["id"], generation_config={"max_output_tokens": MAX_OUTPUT_TOKENS_GEMINI_LIB})
        try:
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ Google GenAI: {model_config['id']} –¥–ª—è {user_id}")
            response = await asyncio.get_event_loop().run_in_executor(
                None, lambda: genai_model.generate_content(full_prompt)
            )
            response_text = response.text.strip() or "–û—Ç–≤–µ—Ç –æ—Ç Google GenAI –ø—É—Å—Ç."
            logger.info(f"–û—Ç–≤–µ—Ç Google GenAI –ø–æ–ª—É—á–µ–Ω –¥–ª—è {user_id}. –î–ª–∏–Ω–∞: {len(response_text)}")
        except google.api_core.exceptions.ResourceExhausted:
            response_text = "–õ–∏–º–∏—Ç Google API –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            logger.error(f"Google API –∏—Å—á–µ—Ä–ø–∞–Ω –¥–ª—è {user_id}, –º–æ–¥–µ–ª—å {model_config['id']}")
        except Exception as e:
            response_text = f"–û—à–∏–±–∫–∞ Google API: {type(e).__name__}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            logger.error(f"–û—à–∏–±–∫–∞ Google GenAI –¥–ª—è {user_id}, –º–æ–¥–µ–ª—å {model_config['id']}: {e}")

    elif api_type == "custom_http_api":
        api_key_name = model_config.get("api_key_var_name")
        api_key = globals().get(api_key_name)
        if not api_key or "YOUR_" in api_key or not api_key:
            response_text = f"–û—à–∏–±–∫–∞: –ö–ª—é—á API –¥–ª—è ¬´{model_config.get('name', current_model_key)}¬ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
            logger.error(f"–û—à–∏–±–∫–∞ –∫–ª—é—á–∞ API –¥–ª—è –º–æ–¥–µ–ª–∏ '{current_model_key}'")
        else:
            if current_model_key == "custom_api_gemini_2_5_pro":
                response_text, success = await query_gemini_pro(system_prompt, user_message)
                if not success:
                    logger.warning(f"–û—à–∏–±–∫–∞ Gemini 2.5 Pro –¥–ª—è {user_id}: {response_text}")
            elif current_model_key == "custom_api_grok_3":
                response_text, success = await query_grok_3(system_prompt, user_message)
                if not success:
                    logger.warning(f"–û—à–∏–±–∫–∞ Grok 3 –¥–ª—è {user_id}: {response_text}")
            else:
                headers = {
                    "Authorization": f"Bearer {api_key}",
                    "Content-Type": "application/json",
                    "Accept": "application/json"
                }
                messages = []
                is_gpt_4o_mini = model_config["id"] == "gpt-4o-mini"
                if system_prompt:
                    messages.append({
                        "role": "system",
                        "content": [{"type": "text", "text": system_prompt}] if is_gpt_4o_mini else system_prompt
                    })
                messages.append({
                    "role": "user",
                    "content": [{"type": "text", "text": user_message}] if is_gpt_4o_mini else user_message
                })

                payload = {
                    "messages": messages,
                    "model": model_config["id"],
                    "is_sync": True,
                    "max_tokens": model_config.get("max_tokens", MAX_OUTPUT_TOKENS_GEMINI_LIB),
                    "temperature": 1.0,
                    "top_p": 1.0,
                    "n": 1,
                    "stream": False
                }

                try:
                    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ Custom API: {model_config['endpoint']} –¥–ª—è {user_id}")
                    response = await asyncio.get_event_loop().run_in_executor(
                        None, lambda: requests.post(model_config["endpoint"], headers=headers, json=payload, timeout=45)
                    )
                    response.raise_for_status()
                    response_json = response.json()
                    extracted_text = None

                    if model_config["id"] == "gpt-4o-mini" and response_json.get("status") == "success":
                        output = response_json.get("output")
                        if isinstance(output, str):
                            extracted_text = output.strip()
                        elif isinstance(output, dict):
                            extracted_text = output.get("text", output.get("content", "")).strip()
                        elif output is not None:
                            extracted_text = str(output).strip()
                            logger.warning(f"gpt-4o-mini: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {type(output)}")
                        else:
                            extracted_text = "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –æ–Ω –ø—É—Å—Ç."
                            logger.warning(f"gpt-4o-mini: –ü–æ–ª–µ 'output' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {response_json}")
                    else:
                        for key in ["text", "content", "message", "output", "response"]:
                            if isinstance(response_json.get(key), str):
                                extracted_text = response_json[key].strip()
                                break
                        if not extracted_text:
                            extracted_text = ""
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –¥–ª—è {model_config['id']}: {response_json}")

                    response_text = extracted_text or "–û—Ç–≤–µ—Ç –æ—Ç API –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç."
                except requests.exceptions.HTTPError as e:
                    response_text = f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ ({e.response.status_code}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    logger.error(f"HTTPError –¥–ª—è {model_config['id']}: {e}")
                except requests.exceptions.RequestException as e:
                    response_text = f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."
                    logger.error(f"RequestException –¥–ª—è {model_config['id']}: {e}")
                except Exception as e:
                    response_text = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}."
                    logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è {model_config['id']}: {e}")

    else:
        response_text = "–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø API."
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π api_type '{api_type}' –¥–ª—è –º–æ–¥–µ–ª–∏ {current_model_key}")

    final_response, was_truncated = smart_truncate(response_text, MAX_MESSAGE_LENGTH_TELEGRAM)
    if was_truncated:
        logger.info(f"–û—Ç–≤–µ—Ç –¥–ª—è {user_id} (–º–æ–¥–µ–ª—å {current_model_key}) –æ–±—Ä–µ–∑–∞–Ω –¥–æ {MAX_MESSAGE_LENGTH_TELEGRAM} —Å–∏–º–≤–æ–ª–æ–≤.")

    await increment_request_count(user_id, current_model_key)
    user_data = await get_user_data(user_id)
    await update.message.reply_text(
        final_response,
        parse_mode=None,
        reply_markup=generate_menu_keyboard(user_data.get('current_menu', 'main_menu')),
        disable_web_page_preview=True
    )
    log_response = final_response[:100].replace('\n', ' ')
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ò–ò (–º–æ–¥–µ–ª—å: {current_model_key}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: '{log_response}...'")

# --- –ü–õ–ê–¢–ï–ñ–ò ---
async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞."""
    query = update.pre_checkout_query
    expected_payload = f"subscription_{PRO_SUBSCRIPTION_LEVEL_KEY}_payload_example"
    if query.invoice_payload == expected_payload:
        await query.answer(ok=True)
        logger.info(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è {query.user.id} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
    else:
        await query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É. –°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π —Å—á–µ—Ç.")
        logger.warning(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–ª—è {query.user.id}: {query.invoice_payload}")

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞."""
    user_id = update.effective_user.id
    payment = update.message.successful_payment
    expected_payload = f"subscription_{PRO_SUBSCRIPTION_LEVEL_KEY}_payload_example"

    logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ—Ç {user_id}. Payload: {payment.invoice_payload}, –°—É–º–º–∞: {payment.total_amount} {payment.currency}")

    if payment.invoice_payload != expected_payload:
        await update.message.reply_text(
            "–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode=None
        )
        if YOUR_ADMIN_ID:
            await context.bot.send_message(
                chat_id=YOUR_ADMIN_ID,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è {user_id}. Payload: {payment.invoice_payload}, –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_payload}",
                parse_mode=ParseMode.HTML
            )
        logger.error(f"–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ payload –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è {user_id}: {payment.invoice_payload}")
        return

    bot_data = await get_bot_data()
    user_subscriptions = bot_data.setdefault('user_subscriptions', {})
    current_sub = user_subscriptions.get(str(user_id), {})
    start_date = datetime.now().astimezone()
    if current_sub.get('valid_until'):
        try:
            previous_valid_until = datetime.fromisoformat(current_sub['valid_until'])
            if previous_valid_until > start_date:
                start_date = previous_valid_until
        except ValueError:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}")

    new_valid_until = start_date + timedelta(days=30)
    user_subscriptions[str(user_id)] = {
        'level': PRO_SUBSCRIPTION_LEVEL_KEY,
        'valid_until': new_valid_until.isoformat(),
        'last_payment_amount': payment.total_amount,
        'last_payment_currency': payment.currency,
        'purchase_date': datetime.now().astimezone().isoformat()
    }
    bot_data['user_subscriptions'] = user_subscriptions
    await set_bot_data(bot_data)

    user_data = await get_user_data(user_id)
    await update.message.reply_text(
        f"üéâ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω! –ü–æ–¥–ø–∏—Å–∫–∞ –ü—Ä–æ—Ñ–∏ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ <b>{new_valid_until.strftime('%d.%m.%Y')}</b>.",
        parse_mode=ParseMode.HTML,
        reply_markup=generate_menu_keyboard(user_data.get('current_menu', 'main_menu')),
        disable_web_page_preview=True
    )
    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_valid_until.isoformat()}")

    if YOUR_ADMIN_ID:
        await context.bot.send_message(
            chat_id=YOUR_ADMIN_ID,
            text=(
                f"üîî –ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞!\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.full_name} (ID: {user_id})\n"
                f"–°—É–º–º–∞: {payment.total_amount / 100} {payment.currency}\n"
                f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {new_valid_until.strftime('%d.%m.%Y')}"
            ),
            parse_mode=ParseMode.HTML
        )

# --- –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ---
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞."""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=True)
    if isinstance(update, Update) and update.effective_chat:
        user_data = await get_user_data(update.effective_user.id)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
            reply_markup=generate_menu_keyboard(user_data.get('current_menu', 'main_menu')),
            parse_mode=None
        )
    if YOUR_ADMIN_ID and isinstance(update, Update):
        await context.bot.send_message(
            chat_id=YOUR_ADMIN_ID,
            text=f"ü§ñ –û—à–∏–±–∫–∞: {context.error.__class__.__name__}: {context.error}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.id}",
            parse_mode=ParseMode.HTML
        )

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    app = Application.builder().token(TOKEN).read_timeout(30).connect_timeout(30).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", open_menu_command))
    app.add_handler(CommandHandler("usage", usage_command))
    app.add_handler(CommandHandler("subscribe", subscribe_info_command))
    app.add_handler(CommandHandler("bonus", get_news_bonus_info_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, menu_button_handler), group=1)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text), group=2)
    app.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    app.add_error_handler(error_handler)

    commands = [
        BotCommand("start", "üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"),
        BotCommand("menu", "üìã –ú–µ–Ω—é"),
        BotCommand("usage", "üìä –õ–∏–º–∏—Ç—ã"),
        BotCommand("subscribe", "üíé –ü–æ–¥–ø–∏—Å–∫–∞"),
        BotCommand("bonus", "üéÅ –ë–æ–Ω—É—Å"),
        BotCommand("help", "‚ùì –°–ø—Ä–∞–≤–∫–∞")
    ]
    await app.bot.set_my_commands(commands)
    logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

    await app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        raise
